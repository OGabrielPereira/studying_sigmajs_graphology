{"version":3,"sources":["sigma.layout.forceAtlas2/worker.js"],"names":["undefined","_root","inWebWorker","Worker","W","ppn","ppe","ppr","maxForce","iterations","converged","settings","linLogMode","outboundAttractionDistribution","adjustSizes","edgeWeightInfluence","scalingRatio","strongGravityMode","gravity","slowDown","barnesHutOptimize","barnesHutTheta","startingIterations","iterationsPerRender","NodeMatrix","EdgeMatrix","RegionMatrix","extend","i","k","res","l","arguments","length","__emptyObject","obj","hasOwnProperty","nodeProperties","x","y","dx","dy","old_dx","old_dy","mass","convergence","size","fixed","edgeProperties","source","target","weight","regionProperties","node","centerX","centerY","nextSibling","firstChild","massCenterX","massCenterY","np","p","parseInt","ep","rp","nan","v","isNaN","init","nodes","edges","config","nodesLength","edgesLength","configure","o","pass","a","j","r","n","n1","n2","e","w","g","m","outboundAttCompensation","coefficient","xDist","yDist","ewc","distance","factor","minX","Infinity","maxX","minY","maxY","q","q0","q1","q2","q3","Math","min","max","sqrt","pow","log","force","swinging","traction","nodespeed","sendNewCoords","window","document","createEvent","initEvent","createEventObject","eventType","eventName","data","buffer","requestAnimationFrame","dispatchEvent","self","postMessage","run","listener","action","Float32Array","removeEventListener","addEventListener","crush","fnString","pattern","RegExp","replace","getWorkerFn","toString","eval","sigma","prototype","getForceAtlas2Worker","call"],"mappings":"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","file":"worker.5c2ec87c.js","sourceRoot":"..","sourcesContent":["; (function (undefined) {\n    'use strict';\n\n    /**\n     * Sigma ForceAtlas2.5 Webworker\n     * ==============================\n     *\n     * Author: Guillaume Plique (Yomguithereal)\n     * Algorithm author: Mathieu Jacomy @ Sciences Po Medialab & WebAtlas\n     * Version: 1.0.3\n     */\n\n    var _root = this,\n        inWebWorker = !('document' in _root);\n\n    /**\n     * Worker Function Wrapper\n     * ------------------------\n     *\n     * The worker has to be wrapped into a single stringified function\n     * to be passed afterwards as a BLOB object to the supervisor.\n     */\n    var Worker = function (undefined) {\n        'use strict';\n\n        /**\n         * Worker settings and properties\n         */\n        var W = {\n\n            // Properties\n            ppn: 10,\n            ppe: 3,\n            ppr: 9,\n            maxForce: 10,\n            iterations: 0,\n            converged: false,\n\n            // Possible to change through config\n            settings: {\n                linLogMode: false,\n                outboundAttractionDistribution: false,\n                adjustSizes: false,\n                edgeWeightInfluence: 0,\n                scalingRatio: 1,\n                strongGravityMode: false,\n                gravity: 1,\n                slowDown: 1,\n                barnesHutOptimize: false,\n                barnesHutTheta: 0.5,\n                startingIterations: 1,\n                iterationsPerRender: 1\n            }\n        };\n\n        var NodeMatrix,\n            EdgeMatrix,\n            RegionMatrix;\n\n        /**\n         * Helpers\n         */\n        function extend() {\n            var i,\n                k,\n                res = {},\n                l = arguments.length;\n\n            for (i = l - 1; i >= 0; i--)\n                for (k in arguments[i])\n                    res[k] = arguments[i][k];\n            return res;\n        }\n\n        function __emptyObject(obj) {\n            var k;\n\n            for (k in obj)\n                if (!('hasOwnProperty' in obj) || obj.hasOwnProperty(k))\n                    delete obj[k];\n\n            return obj;\n        }\n\n        /**\n         * Matrices properties accessors\n         */\n        var nodeProperties = {\n            x: 0,\n            y: 1,\n            dx: 2,\n            dy: 3,\n            old_dx: 4,\n            old_dy: 5,\n            mass: 6,\n            convergence: 7,\n            size: 8,\n            fixed: 9\n        };\n\n        var edgeProperties = {\n            source: 0,\n            target: 1,\n            weight: 2\n        };\n\n        var regionProperties = {\n            node: 0,\n            centerX: 1,\n            centerY: 2,\n            size: 3,\n            nextSibling: 4,\n            firstChild: 5,\n            mass: 6,\n            massCenterX: 7,\n            massCenterY: 8\n        };\n\n        function np(i, p) {\n\n            // DEBUG: safeguards\n            if ((i % W.ppn) !== 0)\n                throw 'np: non correct (' + i + ').';\n            if (i !== parseInt(i))\n                throw 'np: non int.';\n\n            if (p in nodeProperties)\n                return i + nodeProperties[p];\n            else\n                throw 'ForceAtlas2.Worker - ' +\n                'Inexistant node property given (' + p + ').';\n        }\n\n        function ep(i, p) {\n\n            // DEBUG: safeguards\n            if ((i % W.ppe) !== 0)\n                throw 'ep: non correct (' + i + ').';\n            if (i !== parseInt(i))\n                throw 'ep: non int.';\n\n            if (p in edgeProperties)\n                return i + edgeProperties[p];\n            else\n                throw 'ForceAtlas2.Worker - ' +\n                'Inexistant edge property given (' + p + ').';\n        }\n\n        function rp(i, p) {\n\n            // DEBUG: safeguards\n            if ((i % W.ppr) !== 0)\n                throw 'rp: non correct (' + i + ').';\n            if (i !== parseInt(i))\n                throw 'rp: non int.';\n\n            if (p in regionProperties)\n                return i + regionProperties[p];\n            else\n                throw 'ForceAtlas2.Worker - ' +\n                'Inexistant region property given (' + p + ').';\n        }\n\n        // DEBUG\n        function nan(v) {\n            if (isNaN(v))\n                throw 'NaN alert!';\n        }\n\n\n        /**\n         * Algorithm initialization\n         */\n\n        function init(nodes, edges, config) {\n            config = config || {};\n            var i, l;\n\n            // Matrices\n            NodeMatrix = nodes;\n            EdgeMatrix = edges;\n\n            // Length\n            W.nodesLength = NodeMatrix.length;\n            W.edgesLength = EdgeMatrix.length;\n\n            // Merging configuration\n            configure(config);\n        }\n\n        function configure(o) {\n            W.settings = extend(o, W.settings);\n        }\n\n        /**\n         * Algorithm pass\n         */\n\n        // MATH: get distances stuff and power 2 issues\n        function pass() {\n            var a, i, j, l, r, n, n1, n2, e, w, g, k, m;\n\n            var outboundAttCompensation,\n                coefficient,\n                xDist,\n                yDist,\n                ewc,\n                mass,\n                distance,\n                size,\n                factor;\n\n            // 1) Initializing layout data\n            //-----------------------------\n\n            // Resetting positions & computing max values\n            for (n = 0; n < W.nodesLength; n += W.ppn) {\n                NodeMatrix[np(n, 'old_dx')] = NodeMatrix[np(n, 'dx')];\n                NodeMatrix[np(n, 'old_dy')] = NodeMatrix[np(n, 'dy')];\n                NodeMatrix[np(n, 'dx')] = 0;\n                NodeMatrix[np(n, 'dy')] = 0;\n            }\n\n            // If outbound attraction distribution, compensate\n            if (W.settings.outboundAttractionDistribution) {\n                outboundAttCompensation = 0;\n                for (n = 0; n < W.nodesLength; n += W.ppn) {\n                    outboundAttCompensation += NodeMatrix[np(n, 'mass')];\n                }\n\n                outboundAttCompensation /= W.nodesLength;\n            }\n\n\n            // 1.bis) Barnes-Hut computation\n            //------------------------------\n\n            if (W.settings.barnesHutOptimize) {\n\n                var minX = Infinity,\n                    maxX = -Infinity,\n                    minY = Infinity,\n                    maxY = -Infinity,\n                    q, q0, q1, q2, q3;\n\n                // Setting up\n                // RegionMatrix = new Float32Array(W.nodesLength / W.ppn * 4 * W.ppr);\n                RegionMatrix = [];\n\n                // Computing min and max values\n                for (n = 0; n < W.nodesLength; n += W.ppn) {\n                    minX = Math.min(minX, NodeMatrix[np(n, 'x')]);\n                    maxX = Math.max(maxX, NodeMatrix[np(n, 'x')]);\n                    minY = Math.min(minY, NodeMatrix[np(n, 'y')]);\n                    maxY = Math.max(maxY, NodeMatrix[np(n, 'y')]);\n                }\n\n                // Build the Barnes Hut root region\n                RegionMatrix[rp(0, 'node')] = -1;\n                RegionMatrix[rp(0, 'centerX')] = (minX + maxX) / 2;\n                RegionMatrix[rp(0, 'centerY')] = (minY + maxY) / 2;\n                RegionMatrix[rp(0, 'size')] = Math.max(maxX - minX, maxY - minY);\n                RegionMatrix[rp(0, 'nextSibling')] = -1;\n                RegionMatrix[rp(0, 'firstChild')] = -1;\n                RegionMatrix[rp(0, 'mass')] = 0;\n                RegionMatrix[rp(0, 'massCenterX')] = 0;\n                RegionMatrix[rp(0, 'massCenterY')] = 0;\n\n                // Add each node in the tree\n                l = 1;\n                for (n = 0; n < W.nodesLength; n += W.ppn) {\n\n                    // Current region, starting with root\n                    r = 0;\n\n                    while (true) {\n                        // Are there sub-regions?\n\n                        // We look at first child index\n                        if (RegionMatrix[rp(r, 'firstChild')] >= 0) {\n\n                            // There are sub-regions\n\n                            // We just iterate to find a \"leave\" of the tree\n                            // that is an empty region or a region with a single node\n                            // (see next case)\n\n                            // Find the quadrant of n\n                            if (NodeMatrix[np(n, 'x')] < RegionMatrix[rp(r, 'centerX')]) {\n\n                                if (NodeMatrix[np(n, 'y')] < RegionMatrix[rp(r, 'centerY')]) {\n\n                                    // Top Left quarter\n                                    q = RegionMatrix[rp(r, 'firstChild')];\n                                }\n                                else {\n\n                                    // Bottom Left quarter\n                                    q = RegionMatrix[rp(r, 'firstChild')] + W.ppr;\n                                }\n                            }\n                            else {\n                                if (NodeMatrix[np(n, 'y')] < RegionMatrix[rp(r, 'centerY')]) {\n\n                                    // Top Right quarter\n                                    q = RegionMatrix[rp(r, 'firstChild')] + W.ppr * 2;\n                                }\n                                else {\n\n                                    // Bottom Right quarter\n                                    q = RegionMatrix[rp(r, 'firstChild')] + W.ppr * 3;\n                                }\n                            }\n\n                            // Update center of mass and mass (we only do it for non-leave regions)\n                            RegionMatrix[rp(r, 'massCenterX')] =\n                                (RegionMatrix[rp(r, 'massCenterX')] * RegionMatrix[rp(r, 'mass')] +\n                                    NodeMatrix[np(n, 'x')] * NodeMatrix[np(n, 'mass')]) /\n                                (RegionMatrix[rp(r, 'mass')] + NodeMatrix[np(n, 'mass')]);\n\n                            RegionMatrix[rp(r, 'massCenterY')] =\n                                (RegionMatrix[rp(r, 'massCenterY')] * RegionMatrix[rp(r, 'mass')] +\n                                    NodeMatrix[np(n, 'y')] * NodeMatrix[np(n, 'mass')]) /\n                                (RegionMatrix[rp(r, 'mass')] + NodeMatrix[np(n, 'mass')]);\n\n                            RegionMatrix[rp(r, 'mass')] += NodeMatrix[np(n, 'mass')];\n\n                            // Iterate on the right quadrant\n                            r = q;\n                            continue;\n                        }\n                        else {\n\n                            // There are no sub-regions: we are in a \"leave\"\n\n                            // Is there a node in this leave?\n                            if (RegionMatrix[rp(r, 'node')] < 0) {\n\n                                // There is no node in region:\n                                // we record node n and go on\n                                RegionMatrix[rp(r, 'node')] = n;\n                                break;\n                            }\n                            else {\n\n                                // There is a node in this region\n\n                                // We will need to create sub-regions, stick the two\n                                // nodes (the old one r[0] and the new one n) in two\n                                // subregions. If they fall in the same quadrant,\n                                // we will iterate.\n\n                                // Create sub-regions\n                                RegionMatrix[rp(r, 'firstChild')] = l * W.ppr;\n                                w = RegionMatrix[rp(r, 'size')] / 2;  // new size (half)\n\n                                // NOTE: we use screen coordinates\n                                // from Top Left to Bottom Right\n\n                                // Top Left sub-region\n                                g = RegionMatrix[rp(r, 'firstChild')];\n\n                                RegionMatrix[rp(g, 'node')] = -1;\n                                RegionMatrix[rp(g, 'centerX')] = RegionMatrix[rp(r, 'centerX')] - w;\n                                RegionMatrix[rp(g, 'centerY')] = RegionMatrix[rp(r, 'centerY')] - w;\n                                RegionMatrix[rp(g, 'size')] = w;\n                                RegionMatrix[rp(g, 'nextSibling')] = g + W.ppr;\n                                RegionMatrix[rp(g, 'firstChild')] = -1;\n                                RegionMatrix[rp(g, 'mass')] = 0;\n                                RegionMatrix[rp(g, 'massCenterX')] = 0;\n                                RegionMatrix[rp(g, 'massCenterY')] = 0;\n\n                                // Bottom Left sub-region\n                                g += W.ppr;\n                                RegionMatrix[rp(g, 'node')] = -1;\n                                RegionMatrix[rp(g, 'centerX')] = RegionMatrix[rp(r, 'centerX')] - w;\n                                RegionMatrix[rp(g, 'centerY')] = RegionMatrix[rp(r, 'centerY')] + w;\n                                RegionMatrix[rp(g, 'size')] = w;\n                                RegionMatrix[rp(g, 'nextSibling')] = g + W.ppr;\n                                RegionMatrix[rp(g, 'firstChild')] = -1;\n                                RegionMatrix[rp(g, 'mass')] = 0;\n                                RegionMatrix[rp(g, 'massCenterX')] = 0;\n                                RegionMatrix[rp(g, 'massCenterY')] = 0;\n\n                                // Top Right sub-region\n                                g += W.ppr;\n                                RegionMatrix[rp(g, 'node')] = -1;\n                                RegionMatrix[rp(g, 'centerX')] = RegionMatrix[rp(r, 'centerX')] + w;\n                                RegionMatrix[rp(g, 'centerY')] = RegionMatrix[rp(r, 'centerY')] - w;\n                                RegionMatrix[rp(g, 'size')] = w;\n                                RegionMatrix[rp(g, 'nextSibling')] = g + W.ppr;\n                                RegionMatrix[rp(g, 'firstChild')] = -1;\n                                RegionMatrix[rp(g, 'mass')] = 0;\n                                RegionMatrix[rp(g, 'massCenterX')] = 0;\n                                RegionMatrix[rp(g, 'massCenterY')] = 0;\n\n                                // Bottom Right sub-region\n                                g += W.ppr;\n                                RegionMatrix[rp(g, 'node')] = -1;\n                                RegionMatrix[rp(g, 'centerX')] = RegionMatrix[rp(r, 'centerX')] + w;\n                                RegionMatrix[rp(g, 'centerY')] = RegionMatrix[rp(r, 'centerY')] + w;\n                                RegionMatrix[rp(g, 'size')] = w;\n                                RegionMatrix[rp(g, 'nextSibling')] = RegionMatrix[rp(r, 'nextSibling')];\n                                RegionMatrix[rp(g, 'firstChild')] = -1;\n                                RegionMatrix[rp(g, 'mass')] = 0;\n                                RegionMatrix[rp(g, 'massCenterX')] = 0;\n                                RegionMatrix[rp(g, 'massCenterY')] = 0;\n\n                                l += 4;\n\n                                // Now the goal is to find two different sub-regions\n                                // for the two nodes: the one previously recorded (r[0])\n                                // and the one we want to add (n)\n\n                                // Find the quadrant of the old node\n                                if (NodeMatrix[np(RegionMatrix[rp(r, 'node')], 'x')] < RegionMatrix[rp(r, 'centerX')]) {\n                                    if (NodeMatrix[np(RegionMatrix[rp(r, 'node')], 'y')] < RegionMatrix[rp(r, 'centerY')]) {\n\n                                        // Top Left quarter\n                                        q = RegionMatrix[rp(r, 'firstChild')];\n                                    }\n                                    else {\n\n                                        // Bottom Left quarter\n                                        q = RegionMatrix[rp(r, 'firstChild')] + W.ppr;\n                                    }\n                                }\n                                else {\n                                    if (NodeMatrix[np(RegionMatrix[rp(r, 'node')], 'y')] < RegionMatrix[rp(r, 'centerY')]) {\n\n                                        // Top Right quarter\n                                        q = RegionMatrix[rp(r, 'firstChild')] + W.ppr * 2;\n                                    }\n                                    else {\n\n                                        // Bottom Right quarter\n                                        q = RegionMatrix[rp(r, 'firstChild')] + W.ppr * 3;\n                                    }\n                                }\n\n                                // We remove r[0] from the region r, add its mass to r and record it in q\n                                RegionMatrix[rp(r, 'mass')] = NodeMatrix[np(RegionMatrix[rp(r, 'node')], 'mass')];\n                                RegionMatrix[rp(r, 'massCenterX')] = NodeMatrix[np(RegionMatrix[rp(r, 'node')], 'x')];\n                                RegionMatrix[rp(r, 'massCenterY')] = NodeMatrix[np(RegionMatrix[rp(r, 'node')], 'y')];\n\n                                RegionMatrix[rp(q, 'node')] = RegionMatrix[rp(r, 'node')];\n                                RegionMatrix[rp(r, 'node')] = -1;\n\n                                // Find the quadrant of n\n                                if (NodeMatrix[np(n, 'x')] < RegionMatrix[rp(r, 'centerX')]) {\n                                    if (NodeMatrix[np(n, 'y')] < RegionMatrix[rp(r, 'centerY')]) {\n\n                                        // Top Left quarter\n                                        q2 = RegionMatrix[rp(r, 'firstChild')];\n                                    }\n                                    else {\n                                        // Bottom Left quarter\n                                        q2 = RegionMatrix[rp(r, 'firstChild')] + W.ppr;\n                                    }\n                                }\n                                else {\n                                    if (NodeMatrix[np(n, 'y')] < RegionMatrix[rp(r, 'centerY')]) {\n\n                                        // Top Right quarter\n                                        q2 = RegionMatrix[rp(r, 'firstChild')] + W.ppr * 2;\n                                    }\n                                    else {\n\n                                        // Bottom Right quarter\n                                        q2 = RegionMatrix[rp(r, 'firstChild')] + W.ppr * 3;\n                                    }\n                                }\n\n                                if (q === q2) {\n\n                                    // If both nodes are in the same quadrant,\n                                    // we have to try it again on this quadrant\n                                    r = q;\n                                    continue;\n                                }\n\n                                // If both quadrants are different, we record n\n                                // in its quadrant\n                                RegionMatrix[rp(q2, 'node')] = n;\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n\n\n            // 2) Repulsion\n            //--------------\n            // NOTES: adjustSizes = antiCollision & scalingRatio = coefficient\n\n            if (W.settings.barnesHutOptimize) {\n                coefficient = W.settings.scalingRatio;\n\n                // Applying repulsion through regions\n                for (n = 0; n < W.nodesLength; n += W.ppn) {\n\n                    // Computing leaf quad nodes iteration\n\n                    r = 0; // Starting with root region\n                    while (true) {\n\n                        if (RegionMatrix[rp(r, 'firstChild')] >= 0) {\n\n                            // The region has sub-regions\n\n                            // We run the Barnes Hut test to see if we are at the right distance\n                            distance = Math.sqrt(\n                                (Math.pow(NodeMatrix[np(n, 'x')] - RegionMatrix[rp(r, 'massCenterX')], 2)) +\n                                (Math.pow(NodeMatrix[np(n, 'y')] - RegionMatrix[rp(r, 'massCenterY')], 2))\n                            );\n\n                            if (2 * RegionMatrix[rp(r, 'size')] / distance < W.settings.barnesHutTheta) {\n\n                                // We treat the region as a single body, and we repulse\n\n                                xDist = NodeMatrix[np(n, 'x')] - RegionMatrix[rp(r, 'massCenterX')];\n                                yDist = NodeMatrix[np(n, 'y')] - RegionMatrix[rp(r, 'massCenterY')];\n\n                                if (W.settings.adjustSizes) {\n\n                                    //-- Linear Anti-collision Repulsion\n                                    if (distance > 0) {\n                                        factor = coefficient * NodeMatrix[np(n, 'mass')] *\n                                            RegionMatrix[rp(r, 'mass')] / distance / distance;\n\n                                        NodeMatrix[np(n, 'dx')] += xDist * factor;\n                                        NodeMatrix[np(n, 'dy')] += yDist * factor;\n                                    }\n                                    else if (distance < 0) {\n                                        factor = -coefficient * NodeMatrix[np(n, 'mass')] *\n                                            RegionMatrix[rp(r, 'mass')] / distance;\n\n                                        NodeMatrix[np(n, 'dx')] += xDist * factor;\n                                        NodeMatrix[np(n, 'dy')] += yDist * factor;\n                                    }\n                                }\n                                else {\n\n                                    //-- Linear Repulsion\n                                    if (distance > 0) {\n                                        factor = coefficient * NodeMatrix[np(n, 'mass')] *\n                                            RegionMatrix[rp(r, 'mass')] / distance / distance;\n\n                                        NodeMatrix[np(n, 'dx')] += xDist * factor;\n                                        NodeMatrix[np(n, 'dy')] += yDist * factor;\n                                    }\n                                }\n\n                                // When this is done, we iterate. We have to look at the next sibling.\n                                if (RegionMatrix[rp(r, 'nextSibling')] < 0)\n                                    break;  // No next sibling: we have finished the tree\n                                r = RegionMatrix[rp(r, 'nextSibling')];\n                                continue;\n\n                            }\n                            else {\n\n                                // The region is too close and we have to look at sub-regions\n                                r = RegionMatrix[rp(r, 'firstChild')];\n                                continue;\n                            }\n\n                        }\n                        else {\n\n                            // The region has no sub-region\n                            // If there is a node r[0] and it is not n, then repulse\n\n                            if (RegionMatrix[rp(r, 'node')] >= 0 && RegionMatrix[rp(r, 'node')] !== n) {\n                                xDist = NodeMatrix[np(n, 'x')] - NodeMatrix[np(RegionMatrix[rp(r, 'node')], 'x')];\n                                yDist = NodeMatrix[np(n, 'y')] - NodeMatrix[np(RegionMatrix[rp(r, 'node')], 'y')];\n\n                                distance = Math.sqrt(xDist * xDist + yDist * yDist);\n\n                                if (W.settings.adjustSizes) {\n\n                                    //-- Linear Anti-collision Repulsion\n                                    if (distance > 0) {\n                                        factor = coefficient * NodeMatrix[np(n, 'mass')] *\n                                            NodeMatrix[np(RegionMatrix[rp(r, 'node')], 'mass')] / distance / distance;\n\n                                        NodeMatrix[np(n, 'dx')] += xDist * factor;\n                                        NodeMatrix[np(n, 'dy')] += yDist * factor;\n                                    }\n                                    else if (distance < 0) {\n                                        factor = -coefficient * NodeMatrix[np(n, 'mass')] *\n                                            NodeMatrix[np(RegionMatrix[rp(r, 'node')], 'mass')] / distance;\n\n                                        NodeMatrix[np(n, 'dx')] += xDist * factor;\n                                        NodeMatrix[np(n, 'dy')] += yDist * factor;\n                                    }\n                                }\n                                else {\n\n                                    //-- Linear Repulsion\n                                    if (distance > 0) {\n                                        factor = coefficient * NodeMatrix[np(n, 'mass')] *\n                                            NodeMatrix[np(RegionMatrix[rp(r, 'node')], 'mass')] / distance / distance;\n\n                                        NodeMatrix[np(n, 'dx')] += xDist * factor;\n                                        NodeMatrix[np(n, 'dy')] += yDist * factor;\n                                    }\n                                }\n\n                            }\n\n                            // When this is done, we iterate. We have to look at the next sibling.\n                            if (RegionMatrix[rp(r, 'nextSibling')] < 0)\n                                break;  // No next sibling: we have finished the tree\n                            r = RegionMatrix[rp(r, 'nextSibling')];\n                            continue;\n                        }\n                    }\n                }\n            }\n            else {\n                coefficient = W.settings.scalingRatio;\n\n                // Square iteration\n                for (n1 = 0; n1 < W.nodesLength; n1 += W.ppn) {\n                    for (n2 = 0; n2 < n1; n2 += W.ppn) {\n\n                        // Common to both methods\n                        xDist = NodeMatrix[np(n1, 'x')] - NodeMatrix[np(n2, 'x')];\n                        yDist = NodeMatrix[np(n1, 'y')] - NodeMatrix[np(n2, 'y')];\n\n                        if (W.settings.adjustSizes) {\n\n                            //-- Anticollision Linear Repulsion\n                            distance = Math.sqrt(xDist * xDist + yDist * yDist) -\n                                NodeMatrix[np(n1, 'size')] -\n                                NodeMatrix[np(n2, 'size')];\n\n                            if (distance > 0) {\n                                factor = coefficient *\n                                    NodeMatrix[np(n1, 'mass')] *\n                                    NodeMatrix[np(n2, 'mass')] /\n                                    distance / distance;\n\n                                // Updating nodes' dx and dy\n                                NodeMatrix[np(n1, 'dx')] += xDist * factor;\n                                NodeMatrix[np(n1, 'dy')] += yDist * factor;\n\n                                NodeMatrix[np(n2, 'dx')] += xDist * factor;\n                                NodeMatrix[np(n2, 'dy')] += yDist * factor;\n                            }\n                            else if (distance < 0) {\n                                factor = 100 * coefficient *\n                                    NodeMatrix[np(n1, 'mass')] *\n                                    NodeMatrix[np(n2, 'mass')];\n\n                                // Updating nodes' dx and dy\n                                NodeMatrix[np(n1, 'dx')] += xDist * factor;\n                                NodeMatrix[np(n1, 'dy')] += yDist * factor;\n\n                                NodeMatrix[np(n2, 'dx')] -= xDist * factor;\n                                NodeMatrix[np(n2, 'dy')] -= yDist * factor;\n                            }\n                        }\n                        else {\n\n                            //-- Linear Repulsion\n                            distance = Math.sqrt(xDist * xDist + yDist * yDist);\n\n                            if (distance > 0) {\n                                factor = coefficient *\n                                    NodeMatrix[np(n1, 'mass')] *\n                                    NodeMatrix[np(n2, 'mass')] /\n                                    distance / distance;\n\n                                // Updating nodes' dx and dy\n                                NodeMatrix[np(n1, 'dx')] += xDist * factor;\n                                NodeMatrix[np(n1, 'dy')] += yDist * factor;\n\n                                NodeMatrix[np(n2, 'dx')] -= xDist * factor;\n                                NodeMatrix[np(n2, 'dy')] -= yDist * factor;\n                            }\n                        }\n                    }\n                }\n            }\n\n\n            // 3) Gravity\n            //------------\n            g = W.settings.gravity / W.settings.scalingRatio;\n            coefficient = W.settings.scalingRatio;\n            for (n = 0; n < W.nodesLength; n += W.ppn) {\n                factor = 0;\n\n                // Common to both methods\n                xDist = NodeMatrix[np(n, 'x')];\n                yDist = NodeMatrix[np(n, 'y')];\n                distance = Math.sqrt(\n                    Math.pow(xDist, 2) + Math.pow(yDist, 2)\n                );\n\n                if (W.settings.strongGravityMode) {\n\n                    //-- Strong gravity\n                    if (distance > 0)\n                        factor = coefficient * NodeMatrix[np(n, 'mass')] * g;\n                }\n                else {\n\n                    //-- Linear Anti-collision Repulsion n\n                    if (distance > 0)\n                        factor = coefficient * NodeMatrix[np(n, 'mass')] * g / distance;\n                }\n\n                // Updating node's dx and dy\n                NodeMatrix[np(n, 'dx')] -= xDist * factor;\n                NodeMatrix[np(n, 'dy')] -= yDist * factor;\n            }\n\n\n\n            // 4) Attraction\n            //---------------\n            coefficient = 1 *\n                (W.settings.outboundAttractionDistribution ?\n                    outboundAttCompensation :\n                    1);\n\n            // TODO: simplify distance\n            // TODO: coefficient is always used as -c --> optimize?\n            for (e = 0; e < W.edgesLength; e += W.ppe) {\n                n1 = EdgeMatrix[ep(e, 'source')];\n                n2 = EdgeMatrix[ep(e, 'target')];\n                w = EdgeMatrix[ep(e, 'weight')];\n\n                // Edge weight influence\n                ewc = Math.pow(w, W.settings.edgeWeightInfluence);\n\n                // Common measures\n                xDist = NodeMatrix[np(n1, 'x')] - NodeMatrix[np(n2, 'x')];\n                yDist = NodeMatrix[np(n1, 'y')] - NodeMatrix[np(n2, 'y')];\n\n                // Applying attraction to nodes\n                if (W.settings.adjustSizes) {\n\n                    distance = Math.sqrt(\n                        (Math.pow(xDist, 2) + Math.pow(yDist, 2)) -\n                        NodeMatrix[np(n1, 'size')] -\n                        NodeMatrix[np(n2, 'size')]\n                    );\n\n                    if (W.settings.linLogMode) {\n                        if (W.settings.outboundAttractionDistribution) {\n\n                            //-- LinLog Degree Distributed Anti-collision Attraction\n                            if (distance > 0) {\n                                factor = -coefficient * ewc * Math.log(1 + distance) /\n                                    distance /\n                                    NodeMatrix[np(n1, 'mass')];\n                            }\n                        }\n                        else {\n\n                            //-- LinLog Anti-collision Attraction\n                            if (distance > 0) {\n                                factor = -coefficient * ewc * Math.log(1 + distance) / distance;\n                            }\n                        }\n                    }\n                    else {\n                        if (W.settings.outboundAttractionDistribution) {\n\n                            //-- Linear Degree Distributed Anti-collision Attraction\n                            if (distance > 0) {\n                                factor = -coefficient * ewc / NodeMatrix[np(n1, 'mass')];\n                            }\n                        }\n                        else {\n\n                            //-- Linear Anti-collision Attraction\n                            if (distance > 0) {\n                                factor = -coefficient * ewc;\n                            }\n                        }\n                    }\n                }\n                else {\n\n                    distance = Math.sqrt(\n                        Math.pow(xDist, 2) + Math.pow(yDist, 2)\n                    );\n\n                    if (W.settings.linLogMode) {\n                        if (W.settings.outboundAttractionDistribution) {\n\n                            //-- LinLog Degree Distributed Attraction\n                            if (distance > 0) {\n                                factor = -coefficient * ewc * Math.log(1 + distance) /\n                                    distance /\n                                    NodeMatrix[np(n1, 'mass')];\n                            }\n                        }\n                        else {\n\n                            //-- LinLog Attraction\n                            if (distance > 0)\n                                factor = -coefficient * ewc * Math.log(1 + distance) / distance;\n                        }\n                    }\n                    else {\n                        if (W.settings.outboundAttractionDistribution) {\n\n                            //-- Linear Attraction Mass Distributed\n                            // NOTE: Distance is set to 1 to override next condition\n                            distance = 1;\n                            factor = -coefficient * ewc / NodeMatrix[np(n1, 'mass')];\n                        }\n                        else {\n\n                            //-- Linear Attraction\n                            // NOTE: Distance is set to 1 to override next condition\n                            distance = 1;\n                            factor = -coefficient * ewc;\n                        }\n                    }\n                }\n\n                // Updating nodes' dx and dy\n                // TODO: if condition or factor = 1?\n                if (distance > 0) {\n\n                    // Updating nodes' dx and dy\n                    NodeMatrix[np(n1, 'dx')] += xDist * factor;\n                    NodeMatrix[np(n1, 'dy')] += yDist * factor;\n\n                    NodeMatrix[np(n2, 'dx')] -= xDist * factor;\n                    NodeMatrix[np(n2, 'dy')] -= yDist * factor;\n                }\n            }\n\n\n            // 5) Apply Forces\n            //-----------------\n            var force,\n                swinging,\n                traction,\n                nodespeed;\n\n            // MATH: sqrt and square distances\n            if (W.settings.adjustSizes) {\n\n                for (n = 0; n < W.nodesLength; n += W.ppn) {\n                    if (!NodeMatrix[np(n, 'fixed')]) {\n                        force = Math.sqrt(\n                            Math.pow(NodeMatrix[np(n, 'dx')], 2) +\n                            Math.pow(NodeMatrix[np(n, 'dy')], 2)\n                        );\n\n                        if (force > W.maxForce) {\n                            NodeMatrix[np(n, 'dx')] =\n                                NodeMatrix[np(n, 'dx')] * W.maxForce / force;\n                            NodeMatrix[np(n, 'dy')] =\n                                NodeMatrix[np(n, 'dy')] * W.maxForce / force;\n                        }\n\n                        swinging = NodeMatrix[np(n, 'mass')] *\n                            Math.sqrt(\n                                (NodeMatrix[np(n, 'old_dx')] - NodeMatrix[np(n, 'dx')]) *\n                                (NodeMatrix[np(n, 'old_dx')] - NodeMatrix[np(n, 'dx')]) +\n                                (NodeMatrix[np(n, 'old_dy')] - NodeMatrix[np(n, 'dy')]) *\n                                (NodeMatrix[np(n, 'old_dy')] - NodeMatrix[np(n, 'dy')])\n                            );\n\n                        traction = Math.sqrt(\n                            (NodeMatrix[np(n, 'old_dx')] + NodeMatrix[np(n, 'dx')]) *\n                            (NodeMatrix[np(n, 'old_dx')] + NodeMatrix[np(n, 'dx')]) +\n                            (NodeMatrix[np(n, 'old_dy')] + NodeMatrix[np(n, 'dy')]) *\n                            (NodeMatrix[np(n, 'old_dy')] + NodeMatrix[np(n, 'dy')])\n                        ) / 2;\n\n                        nodespeed =\n                            0.1 * Math.log(1 + traction) / (1 + Math.sqrt(swinging));\n\n                        // Updating node's positon\n                        NodeMatrix[np(n, 'x')] =\n                            NodeMatrix[np(n, 'x')] + NodeMatrix[np(n, 'dx')] *\n                            (nodespeed / W.settings.slowDown);\n                        NodeMatrix[np(n, 'y')] =\n                            NodeMatrix[np(n, 'y')] + NodeMatrix[np(n, 'dy')] *\n                            (nodespeed / W.settings.slowDown);\n                    }\n                }\n            }\n            else {\n\n                for (n = 0; n < W.nodesLength; n += W.ppn) {\n                    if (!NodeMatrix[np(n, 'fixed')]) {\n\n                        swinging = NodeMatrix[np(n, 'mass')] *\n                            Math.sqrt(\n                                (NodeMatrix[np(n, 'old_dx')] - NodeMatrix[np(n, 'dx')]) *\n                                (NodeMatrix[np(n, 'old_dx')] - NodeMatrix[np(n, 'dx')]) +\n                                (NodeMatrix[np(n, 'old_dy')] - NodeMatrix[np(n, 'dy')]) *\n                                (NodeMatrix[np(n, 'old_dy')] - NodeMatrix[np(n, 'dy')])\n                            );\n\n                        traction = Math.sqrt(\n                            (NodeMatrix[np(n, 'old_dx')] + NodeMatrix[np(n, 'dx')]) *\n                            (NodeMatrix[np(n, 'old_dx')] + NodeMatrix[np(n, 'dx')]) +\n                            (NodeMatrix[np(n, 'old_dy')] + NodeMatrix[np(n, 'dy')]) *\n                            (NodeMatrix[np(n, 'old_dy')] + NodeMatrix[np(n, 'dy')])\n                        ) / 2;\n\n                        nodespeed = NodeMatrix[np(n, 'convergence')] *\n                            Math.log(1 + traction) / (1 + Math.sqrt(swinging));\n\n                        // Updating node convergence\n                        NodeMatrix[np(n, 'convergence')] =\n                            Math.min(1, Math.sqrt(\n                                nodespeed *\n                                (Math.pow(NodeMatrix[np(n, 'dx')], 2) +\n                                    Math.pow(NodeMatrix[np(n, 'dy')], 2)) /\n                                (1 + Math.sqrt(swinging))\n                            ));\n\n                        // Updating node's positon\n                        NodeMatrix[np(n, 'x')] =\n                            NodeMatrix[np(n, 'x')] + NodeMatrix[np(n, 'dx')] *\n                            (nodespeed / W.settings.slowDown);\n                        NodeMatrix[np(n, 'y')] =\n                            NodeMatrix[np(n, 'y')] + NodeMatrix[np(n, 'dy')] *\n                            (nodespeed / W.settings.slowDown);\n                    }\n                }\n            }\n\n            // Counting one more iteration\n            W.iterations++;\n        }\n\n        /**\n         * Message reception & sending\n         */\n\n        // Sending data back to the supervisor\n        var sendNewCoords;\n\n        if (typeof window !== 'undefined' && window.document) {\n\n            // From same document as sigma\n            sendNewCoords = function () {\n                var e;\n\n                if (document.createEvent) {\n                    e = document.createEvent('Event');\n                    e.initEvent('newCoords', true, false);\n                }\n                else {\n                    e = document.createEventObject();\n                    e.eventType = 'newCoords';\n                }\n\n                e.eventName = 'newCoords';\n                e.data = {\n                    nodes: NodeMatrix.buffer\n                };\n                requestAnimationFrame(function () {\n                    document.dispatchEvent(e);\n                });\n            };\n        }\n        else {\n\n            // From a WebWorker\n            sendNewCoords = function () {\n                self.postMessage(\n                    { nodes: NodeMatrix.buffer },\n                    [NodeMatrix.buffer]\n                );\n            };\n        }\n\n        // Algorithm run\n        function run(n) {\n            for (var i = 0; i < n; i++)\n                pass();\n            sendNewCoords();\n        }\n\n        // On supervisor message\n        var listener = function (e) {\n            switch (e.data.action) {\n                case 'start':\n                    init(\n                        new Float32Array(e.data.nodes),\n                        new Float32Array(e.data.edges),\n                        e.data.config\n                    );\n\n                    // First iteration(s)\n                    run(W.settings.startingIterations);\n                    break;\n\n                case 'loop':\n                    NodeMatrix = new Float32Array(e.data.nodes);\n                    run(W.settings.iterationsPerRender);\n                    break;\n\n                case 'config':\n\n                    // Merging new settings\n                    configure(e.data.config);\n                    break;\n\n                case 'kill':\n\n                    // Deleting context for garbage collection\n                    __emptyObject(W);\n                    NodeMatrix = null;\n                    EdgeMatrix = null;\n                    RegionMatrix = null;\n                    self.removeEventListener('message', listener);\n                    break;\n\n                default:\n            }\n        };\n\n        // Adding event listener\n        self.addEventListener('message', listener);\n    };\n\n\n    /**\n     * Exporting\n     * ----------\n     *\n     * Crush the worker function and make it accessible by sigma's instances so\n     * the supervisor can call it.\n     */\n    function crush(fnString) {\n        var pattern,\n            i,\n            l;\n\n        var np = [\n            'x',\n            'y',\n            'dx',\n            'dy',\n            'old_dx',\n            'old_dy',\n            'mass',\n            'convergence',\n            'size',\n            'fixed'\n        ];\n\n        var ep = [\n            'source',\n            'target',\n            'weight'\n        ];\n\n        var rp = [\n            'node',\n            'centerX',\n            'centerY',\n            'size',\n            'nextSibling',\n            'firstChild',\n            'mass',\n            'massCenterX',\n            'massCenterY'\n        ];\n\n        // rp\n        // NOTE: Must go first\n        for (i = 0, l = rp.length; i < l; i++) {\n            pattern = new RegExp('rp\\\\(([^,]*), \\'' + rp[i] + '\\'\\\\)', 'g');\n            fnString = fnString.replace(\n                pattern,\n                (i === 0) ? '$1' : '$1 + ' + i\n            );\n        }\n\n        // np\n        for (i = 0, l = np.length; i < l; i++) {\n            pattern = new RegExp('np\\\\(([^,]*), \\'' + np[i] + '\\'\\\\)', 'g');\n            fnString = fnString.replace(\n                pattern,\n                (i === 0) ? '$1' : '$1 + ' + i\n            );\n        }\n\n        // ep\n        for (i = 0, l = ep.length; i < l; i++) {\n            pattern = new RegExp('ep\\\\(([^,]*), \\'' + ep[i] + '\\'\\\\)', 'g');\n            fnString = fnString.replace(\n                pattern,\n                (i === 0) ? '$1' : '$1 + ' + i\n            );\n        }\n\n        return fnString;\n    }\n\n    // Exporting\n    function getWorkerFn() {\n        var fnString = crush ? crush(Worker.toString()) : Worker.toString();\n        return ';(' + fnString + ').call(this);';\n    }\n\n    if (inWebWorker) {\n\n        // We are in a webworker, so we launch the Worker function\n        eval(getWorkerFn());\n    }\n    else {\n\n        // We are requesting the worker from sigma, we retrieve it therefore\n        if (typeof sigma === 'undefined')\n            throw 'sigma is not declared';\n\n        sigma.prototype.getForceAtlas2Worker = getWorkerFn;\n    }\n}).call(this);"]}