{"id":"node_modules/@yomguithereal/helpers/extend.js","dependencies":[{"name":"/home/ven/graphTest/package.json","includedInParent":true,"mtime":1664287371192},{"name":"/home/ven/graphTest/node_modules/@yomguithereal/helpers/package.json","includedInParent":true,"mtime":1664366517382}],"generated":{"js":"/**\n * Extend function\n * ================\n *\n * Function used to push a bunch of values into an array at once.\n *\n * Its strategy is to mutate target array's length then setting the new indices\n * to be the values to add.\n *\n * A benchmark proved that it is faster than the following strategies:\n *   1) `array.push.apply(array, values)`.\n *   2) A loop of pushes.\n *   3) `array = array.concat(values)`, obviously.\n *\n * Intuitively, this is correct because when adding a lot of elements, the\n * chosen strategies does not need to handle the `arguments` object to\n * execute #.apply's variadicity and because the array know its final length\n * at the beginning, avoiding potential multiple reallocations of the underlying\n * contiguous array. Some engines may be able to optimize the loop of push\n * operations but empirically they don't seem to do so.\n */\n\n/**\n * Extends the target array with the given values.\n *\n * @param  {array} array  - Target array.\n * @param  {array} values - Values to add.\n */\nmodule.exports = function extend(array, values) {\n  var l2 = values.length;\n\n  if (l2 === 0)\n    return;\n\n  var l1 = array.length;\n\n  array.length += l2;\n\n  for (var i = 0; i < l2; i++)\n    array[l1 + i] = values[i];\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/@yomguithereal/helpers/extend.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@yomguithereal/helpers/extend.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@yomguithereal/helpers/extend.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@yomguithereal/helpers/extend.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@yomguithereal/helpers/extend.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@yomguithereal/helpers/extend.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@yomguithereal/helpers/extend.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@yomguithereal/helpers/extend.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@yomguithereal/helpers/extend.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@yomguithereal/helpers/extend.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@yomguithereal/helpers/extend.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@yomguithereal/helpers/extend.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@yomguithereal/helpers/extend.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@yomguithereal/helpers/extend.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@yomguithereal/helpers/extend.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@yomguithereal/helpers/extend.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@yomguithereal/helpers/extend.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@yomguithereal/helpers/extend.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@yomguithereal/helpers/extend.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@yomguithereal/helpers/extend.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@yomguithereal/helpers/extend.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@yomguithereal/helpers/extend.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@yomguithereal/helpers/extend.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@yomguithereal/helpers/extend.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@yomguithereal/helpers/extend.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@yomguithereal/helpers/extend.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@yomguithereal/helpers/extend.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@yomguithereal/helpers/extend.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@yomguithereal/helpers/extend.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@yomguithereal/helpers/extend.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@yomguithereal/helpers/extend.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@yomguithereal/helpers/extend.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@yomguithereal/helpers/extend.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@yomguithereal/helpers/extend.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@yomguithereal/helpers/extend.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@yomguithereal/helpers/extend.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@yomguithereal/helpers/extend.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@yomguithereal/helpers/extend.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@yomguithereal/helpers/extend.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@yomguithereal/helpers/extend.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@yomguithereal/helpers/extend.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@yomguithereal/helpers/extend.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}}],"sources":{"node_modules/@yomguithereal/helpers/extend.js":"/**\n * Extend function\n * ================\n *\n * Function used to push a bunch of values into an array at once.\n *\n * Its strategy is to mutate target array's length then setting the new indices\n * to be the values to add.\n *\n * A benchmark proved that it is faster than the following strategies:\n *   1) `array.push.apply(array, values)`.\n *   2) A loop of pushes.\n *   3) `array = array.concat(values)`, obviously.\n *\n * Intuitively, this is correct because when adding a lot of elements, the\n * chosen strategies does not need to handle the `arguments` object to\n * execute #.apply's variadicity and because the array know its final length\n * at the beginning, avoiding potential multiple reallocations of the underlying\n * contiguous array. Some engines may be able to optimize the loop of push\n * operations but empirically they don't seem to do so.\n */\n\n/**\n * Extends the target array with the given values.\n *\n * @param  {array} array  - Target array.\n * @param  {array} values - Values to add.\n */\nmodule.exports = function extend(array, values) {\n  var l2 = values.length;\n\n  if (l2 === 0)\n    return;\n\n  var l1 = array.length;\n\n  array.length += l2;\n\n  for (var i = 0; i < l2; i++)\n    array[l1 + i] = values[i];\n};\n"},"lineCount":42}},"error":null,"hash":"d9fb728d82425c16eb293104234ebfed","cacheData":{"env":{}}}