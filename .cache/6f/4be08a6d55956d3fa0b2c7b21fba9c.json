{"id":"node_modules/sigma/utils/edge-collisions.js","dependencies":[{"name":"/home/ven/graphTest/package.json","includedInParent":true,"mtime":1664287371192},{"name":"/home/ven/graphTest/node_modules/sigma/package.json","includedInParent":true,"mtime":1664279401161}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.doEdgeCollideWithPoint = exports.isPixelColored = void 0;\n/**\n * This helper returns true is the pixel at (x,y) in the given WebGL context is\n * colored, and false else.\n */\nfunction isPixelColored(gl, x, y) {\n    var pixels = new Uint8Array(4);\n    gl.readPixels(x, gl.drawingBufferHeight - y, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, pixels);\n    return pixels[3] > 0;\n}\nexports.isPixelColored = isPixelColored;\n/**\n * This helper checks whether or not a point (x, y) collides with an\n * edge, connecting a source (xS, yS) to a target (xT, yT) with a thickness in\n * pixels.\n */\nfunction doEdgeCollideWithPoint(x, y, xS, yS, xT, yT, thickness) {\n    // Check first if point is out of the rectangle which opposite corners are the\n    // source and the target, rectangle we expand by `thickness` in every\n    // directions:\n    if (x < xS - thickness && x < xT - thickness)\n        return false;\n    if (y < yS - thickness && y < yT - thickness)\n        return false;\n    if (x > xS + thickness && x > xT + thickness)\n        return false;\n    if (y > yS + thickness && y > yT + thickness)\n        return false;\n    // Check actual collision now: Since we now the point is in this big rectangle\n    // we \"just\" need to check that the distance between the point and the line\n    // connecting the source and the target is less than `thickness`:\n    // https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line\n    var distance = Math.abs((xT - xS) * (yS - y) - (xS - x) * (yT - yS)) / Math.sqrt(Math.pow(xT - xS, 2) + Math.pow(yT - yS, 2));\n    return distance < thickness / 2;\n}\nexports.doEdgeCollideWithPoint = doEdgeCollideWithPoint;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/sigma/utils/edge-collisions.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/sigma/utils/edge-collisions.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/sigma/utils/edge-collisions.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/sigma/utils/edge-collisions.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/sigma/utils/edge-collisions.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/sigma/utils/edge-collisions.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/sigma/utils/edge-collisions.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/sigma/utils/edge-collisions.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/sigma/utils/edge-collisions.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/sigma/utils/edge-collisions.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/sigma/utils/edge-collisions.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/sigma/utils/edge-collisions.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/sigma/utils/edge-collisions.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/sigma/utils/edge-collisions.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/sigma/utils/edge-collisions.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/sigma/utils/edge-collisions.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/sigma/utils/edge-collisions.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/sigma/utils/edge-collisions.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/sigma/utils/edge-collisions.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/sigma/utils/edge-collisions.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/sigma/utils/edge-collisions.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/sigma/utils/edge-collisions.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/sigma/utils/edge-collisions.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/sigma/utils/edge-collisions.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/sigma/utils/edge-collisions.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/sigma/utils/edge-collisions.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/sigma/utils/edge-collisions.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/sigma/utils/edge-collisions.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/sigma/utils/edge-collisions.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/sigma/utils/edge-collisions.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/sigma/utils/edge-collisions.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/sigma/utils/edge-collisions.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/sigma/utils/edge-collisions.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/sigma/utils/edge-collisions.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/sigma/utils/edge-collisions.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/sigma/utils/edge-collisions.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/sigma/utils/edge-collisions.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/sigma/utils/edge-collisions.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/sigma/utils/edge-collisions.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}}],"sources":{"node_modules/sigma/utils/edge-collisions.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.doEdgeCollideWithPoint = exports.isPixelColored = void 0;\n/**\n * This helper returns true is the pixel at (x,y) in the given WebGL context is\n * colored, and false else.\n */\nfunction isPixelColored(gl, x, y) {\n    var pixels = new Uint8Array(4);\n    gl.readPixels(x, gl.drawingBufferHeight - y, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, pixels);\n    return pixels[3] > 0;\n}\nexports.isPixelColored = isPixelColored;\n/**\n * This helper checks whether or not a point (x, y) collides with an\n * edge, connecting a source (xS, yS) to a target (xT, yT) with a thickness in\n * pixels.\n */\nfunction doEdgeCollideWithPoint(x, y, xS, yS, xT, yT, thickness) {\n    // Check first if point is out of the rectangle which opposite corners are the\n    // source and the target, rectangle we expand by `thickness` in every\n    // directions:\n    if (x < xS - thickness && x < xT - thickness)\n        return false;\n    if (y < yS - thickness && y < yT - thickness)\n        return false;\n    if (x > xS + thickness && x > xT + thickness)\n        return false;\n    if (y > yS + thickness && y > yT + thickness)\n        return false;\n    // Check actual collision now: Since we now the point is in this big rectangle\n    // we \"just\" need to check that the distance between the point and the line\n    // connecting the source and the target is less than `thickness`:\n    // https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line\n    var distance = Math.abs((xT - xS) * (yS - y) - (xS - x) * (yT - yS)) / Math.sqrt(Math.pow(xT - xS, 2) + Math.pow(yT - yS, 2));\n    return distance < thickness / 2;\n}\nexports.doEdgeCollideWithPoint = doEdgeCollideWithPoint;\n"},"lineCount":39}},"error":null,"hash":"48ee8dfd9815781e25b3f2d95d46aef2","cacheData":{"env":{}}}