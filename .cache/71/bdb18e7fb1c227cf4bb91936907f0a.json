{"id":"node_modules/sigma/rendering/canvas/hover.js","dependencies":[{"name":"/home/ven/graphTest/package.json","includedInParent":true,"mtime":1664287371192},{"name":"/home/ven/graphTest/node_modules/sigma/package.json","includedInParent":true,"mtime":1664279401161},{"name":"./label","loc":{"line":6,"column":38,"index":254},"parent":"/home/ven/graphTest/node_modules/sigma/rendering/canvas/hover.js","resolved":"/home/ven/graphTest/node_modules/sigma/rendering/canvas/label.js"}],"generated":{"js":"\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar label_1 = __importDefault(require(\"./label\"));\n/**\n * Draw an hovered node.\n * - if there is no label => display a shadow on the node\n * - if the label box is bigger than node size => display a label box that contains the node with a shadow\n * - else node with shadow and the label box\n */\nfunction drawHover(context, data, settings) {\n    var size = settings.labelSize, font = settings.labelFont, weight = settings.labelWeight;\n    context.font = \"\".concat(weight, \" \").concat(size, \"px \").concat(font);\n    // Then we draw the label background\n    context.fillStyle = \"#FFF\";\n    context.shadowOffsetX = 0;\n    context.shadowOffsetY = 0;\n    context.shadowBlur = 8;\n    context.shadowColor = \"#000\";\n    var PADDING = 2;\n    if (typeof data.label === \"string\") {\n        var textWidth = context.measureText(data.label).width, boxWidth = Math.round(textWidth + 5), boxHeight = Math.round(size + 2 * PADDING), radius = Math.max(data.size, size / 2) + PADDING;\n        var angleRadian = Math.asin(boxHeight / 2 / radius);\n        var xDeltaCoord = Math.sqrt(Math.abs(Math.pow(radius, 2) - Math.pow(boxHeight / 2, 2)));\n        context.beginPath();\n        context.moveTo(data.x + xDeltaCoord, data.y + boxHeight / 2);\n        context.lineTo(data.x + radius + boxWidth, data.y + boxHeight / 2);\n        context.lineTo(data.x + radius + boxWidth, data.y - boxHeight / 2);\n        context.lineTo(data.x + xDeltaCoord, data.y - boxHeight / 2);\n        context.arc(data.x, data.y, radius, angleRadian, -angleRadian);\n        context.closePath();\n        context.fill();\n    }\n    else {\n        context.beginPath();\n        context.arc(data.x, data.y, data.size + PADDING, 0, Math.PI * 2);\n        context.closePath();\n        context.fill();\n    }\n    context.shadowOffsetX = 0;\n    context.shadowOffsetY = 0;\n    context.shadowBlur = 0;\n    // And finally we draw the label\n    (0, label_1.default)(context, data, settings);\n}\nexports.default = drawHover;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/sigma/rendering/canvas/hover.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/sigma/rendering/canvas/hover.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/sigma/rendering/canvas/hover.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/sigma/rendering/canvas/hover.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/sigma/rendering/canvas/hover.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/sigma/rendering/canvas/hover.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/sigma/rendering/canvas/hover.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/sigma/rendering/canvas/hover.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/sigma/rendering/canvas/hover.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/sigma/rendering/canvas/hover.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/sigma/rendering/canvas/hover.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/sigma/rendering/canvas/hover.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/sigma/rendering/canvas/hover.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/sigma/rendering/canvas/hover.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/sigma/rendering/canvas/hover.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/sigma/rendering/canvas/hover.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/sigma/rendering/canvas/hover.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/sigma/rendering/canvas/hover.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/sigma/rendering/canvas/hover.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/sigma/rendering/canvas/hover.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/sigma/rendering/canvas/hover.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/sigma/rendering/canvas/hover.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/sigma/rendering/canvas/hover.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/sigma/rendering/canvas/hover.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/sigma/rendering/canvas/hover.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/sigma/rendering/canvas/hover.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/sigma/rendering/canvas/hover.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/sigma/rendering/canvas/hover.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/sigma/rendering/canvas/hover.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/sigma/rendering/canvas/hover.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/sigma/rendering/canvas/hover.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/sigma/rendering/canvas/hover.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/sigma/rendering/canvas/hover.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/sigma/rendering/canvas/hover.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/sigma/rendering/canvas/hover.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/sigma/rendering/canvas/hover.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/sigma/rendering/canvas/hover.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/sigma/rendering/canvas/hover.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/sigma/rendering/canvas/hover.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/sigma/rendering/canvas/hover.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/sigma/rendering/canvas/hover.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/sigma/rendering/canvas/hover.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/sigma/rendering/canvas/hover.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/sigma/rendering/canvas/hover.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/sigma/rendering/canvas/hover.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/sigma/rendering/canvas/hover.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/sigma/rendering/canvas/hover.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/sigma/rendering/canvas/hover.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/sigma/rendering/canvas/hover.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}}],"sources":{"node_modules/sigma/rendering/canvas/hover.js":"\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar label_1 = __importDefault(require(\"./label\"));\n/**\n * Draw an hovered node.\n * - if there is no label => display a shadow on the node\n * - if the label box is bigger than node size => display a label box that contains the node with a shadow\n * - else node with shadow and the label box\n */\nfunction drawHover(context, data, settings) {\n    var size = settings.labelSize, font = settings.labelFont, weight = settings.labelWeight;\n    context.font = \"\".concat(weight, \" \").concat(size, \"px \").concat(font);\n    // Then we draw the label background\n    context.fillStyle = \"#FFF\";\n    context.shadowOffsetX = 0;\n    context.shadowOffsetY = 0;\n    context.shadowBlur = 8;\n    context.shadowColor = \"#000\";\n    var PADDING = 2;\n    if (typeof data.label === \"string\") {\n        var textWidth = context.measureText(data.label).width, boxWidth = Math.round(textWidth + 5), boxHeight = Math.round(size + 2 * PADDING), radius = Math.max(data.size, size / 2) + PADDING;\n        var angleRadian = Math.asin(boxHeight / 2 / radius);\n        var xDeltaCoord = Math.sqrt(Math.abs(Math.pow(radius, 2) - Math.pow(boxHeight / 2, 2)));\n        context.beginPath();\n        context.moveTo(data.x + xDeltaCoord, data.y + boxHeight / 2);\n        context.lineTo(data.x + radius + boxWidth, data.y + boxHeight / 2);\n        context.lineTo(data.x + radius + boxWidth, data.y - boxHeight / 2);\n        context.lineTo(data.x + xDeltaCoord, data.y - boxHeight / 2);\n        context.arc(data.x, data.y, radius, angleRadian, -angleRadian);\n        context.closePath();\n        context.fill();\n    }\n    else {\n        context.beginPath();\n        context.arc(data.x, data.y, data.size + PADDING, 0, Math.PI * 2);\n        context.closePath();\n        context.fill();\n    }\n    context.shadowOffsetX = 0;\n    context.shadowOffsetY = 0;\n    context.shadowBlur = 0;\n    // And finally we draw the label\n    (0, label_1.default)(context, data, settings);\n}\nexports.default = drawHover;\n"},"lineCount":49}},"error":null,"hash":"1b75d6124ac60ed8f617fef264d005c8","cacheData":{"env":{}}}