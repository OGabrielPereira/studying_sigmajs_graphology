{"id":"node_modules/sigma/sigma.js","dependencies":[{"name":"/home/ven/graphTest/package.json","includedInParent":true,"mtime":1664287371192},{"name":"/home/ven/graphTest/node_modules/sigma/package.json","includedInParent":true,"mtime":1664366520512},{"name":"./core/camera","loc":{"line":43,"column":39,"index":1862},"parent":"/home/ven/graphTest/node_modules/sigma/sigma.js","resolved":"/home/ven/graphTest/node_modules/sigma/core/camera.js"},{"name":"./core/captors/mouse","loc":{"line":44,"column":38,"index":1919},"parent":"/home/ven/graphTest/node_modules/sigma/sigma.js","resolved":"/home/ven/graphTest/node_modules/sigma/core/captors/mouse.js"},{"name":"./core/quadtree","loc":{"line":45,"column":41,"index":1986},"parent":"/home/ven/graphTest/node_modules/sigma/sigma.js","resolved":"/home/ven/graphTest/node_modules/sigma/core/quadtree.js"},{"name":"./types","loc":{"line":46,"column":22,"index":2029},"parent":"/home/ven/graphTest/node_modules/sigma/sigma.js","resolved":"/home/ven/graphTest/node_modules/sigma/types.js"},{"name":"./utils","loc":{"line":47,"column":22,"index":2063},"parent":"/home/ven/graphTest/node_modules/sigma/sigma.js","resolved":"/home/ven/graphTest/node_modules/sigma/utils/index.js"},{"name":"./core/labels","loc":{"line":48,"column":23,"index":2098},"parent":"/home/ven/graphTest/node_modules/sigma/sigma.js","resolved":"/home/ven/graphTest/node_modules/sigma/core/labels.js"},{"name":"./settings","loc":{"line":49,"column":25,"index":2141},"parent":"/home/ven/graphTest/node_modules/sigma/sigma.js","resolved":"/home/ven/graphTest/node_modules/sigma/settings.js"},{"name":"./core/captors/touch","loc":{"line":50,"column":38,"index":2194},"parent":"/home/ven/graphTest/node_modules/sigma/sigma.js","resolved":"/home/ven/graphTest/node_modules/sigma/core/captors/touch.js"},{"name":"./utils/matrices","loc":{"line":51,"column":25,"index":2245},"parent":"/home/ven/graphTest/node_modules/sigma/sigma.js","resolved":"/home/ven/graphTest/node_modules/sigma/utils/matrices.js"},{"name":"./utils/edge-collisions","loc":{"line":52,"column":32,"index":2298},"parent":"/home/ven/graphTest/node_modules/sigma/sigma.js","resolved":"/home/ven/graphTest/node_modules/sigma/utils/edge-collisions.js"}],"generated":{"js":"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar camera_1 = __importDefault(require(\"./core/camera\"));\nvar mouse_1 = __importDefault(require(\"./core/captors/mouse\"));\nvar quadtree_1 = __importDefault(require(\"./core/quadtree\"));\nvar types_1 = require(\"./types\");\nvar utils_1 = require(\"./utils\");\nvar labels_1 = require(\"./core/labels\");\nvar settings_1 = require(\"./settings\");\nvar touch_1 = __importDefault(require(\"./core/captors/touch\"));\nvar matrices_1 = require(\"./utils/matrices\");\nvar edge_collisions_1 = require(\"./utils/edge-collisions\");\n/**\n * Important functions.\n */\nfunction applyNodeDefaults(settings, key, data) {\n    if (!data.hasOwnProperty(\"x\") || !data.hasOwnProperty(\"y\"))\n        throw new Error(\"Sigma: could not find a valid position (x, y) for node \\\"\".concat(key, \"\\\". All your nodes must have a number \\\"x\\\" and \\\"y\\\". Maybe your forgot to apply a layout or your \\\"nodeReducer\\\" is not returning the correct data?\"));\n    if (!data.color)\n        data.color = settings.defaultNodeColor;\n    if (!data.label && data.label !== \"\")\n        data.label = null;\n    if (data.label !== undefined && data.label !== null)\n        data.label = \"\" + data.label;\n    else\n        data.label = null;\n    if (!data.size)\n        data.size = 2;\n    if (!data.hasOwnProperty(\"hidden\"))\n        data.hidden = false;\n    if (!data.hasOwnProperty(\"highlighted\"))\n        data.highlighted = false;\n    if (!data.hasOwnProperty(\"forceLabel\"))\n        data.forceLabel = false;\n    if (!data.type || data.type === \"\")\n        data.type = settings.defaultNodeType;\n    if (!data.zIndex)\n        data.zIndex = 0;\n    return data;\n}\nfunction applyEdgeDefaults(settings, key, data) {\n    if (!data.color)\n        data.color = settings.defaultEdgeColor;\n    if (!data.label)\n        data.label = \"\";\n    if (!data.size)\n        data.size = 0.5;\n    if (!data.hasOwnProperty(\"hidden\"))\n        data.hidden = false;\n    if (!data.hasOwnProperty(\"forceLabel\"))\n        data.forceLabel = false;\n    if (!data.type || data.type === \"\")\n        data.type = settings.defaultEdgeType;\n    if (!data.zIndex)\n        data.zIndex = 0;\n    return data;\n}\n/**\n * Main class.\n *\n * @constructor\n * @param {Graph}       graph     - Graph to render.\n * @param {HTMLElement} container - DOM container in which to render.\n * @param {object}      settings  - Optional settings.\n */\nvar Sigma = /** @class */ (function (_super) {\n    __extends(Sigma, _super);\n    function Sigma(graph, container, settings) {\n        if (settings === void 0) { settings = {}; }\n        var _this = _super.call(this) || this;\n        _this.elements = {};\n        _this.canvasContexts = {};\n        _this.webGLContexts = {};\n        _this.activeListeners = {};\n        _this.quadtree = new quadtree_1.default();\n        _this.labelGrid = new labels_1.LabelGrid();\n        _this.nodeDataCache = {};\n        _this.edgeDataCache = {};\n        _this.nodesWithForcedLabels = [];\n        _this.edgesWithForcedLabels = [];\n        _this.nodeExtent = { x: [0, 1], y: [0, 1] };\n        _this.matrix = (0, matrices_1.identity)();\n        _this.invMatrix = (0, matrices_1.identity)();\n        _this.correctionRatio = 1;\n        _this.customBBox = null;\n        _this.normalizationFunction = (0, utils_1.createNormalizationFunction)({\n            x: [0, 1],\n            y: [0, 1],\n        });\n        // Cache:\n        _this.cameraSizeRatio = 1;\n        // Starting dimensions and pixel ratio\n        _this.width = 0;\n        _this.height = 0;\n        _this.pixelRatio = (0, utils_1.getPixelRatio)();\n        // State\n        _this.displayedLabels = new Set();\n        _this.highlightedNodes = new Set();\n        _this.hoveredNode = null;\n        _this.hoveredEdge = null;\n        _this.renderFrame = null;\n        _this.renderHighlightedNodesFrame = null;\n        _this.needToProcess = false;\n        _this.needToSoftProcess = false;\n        _this.checkEdgesEventsFrame = null;\n        // Programs\n        _this.nodePrograms = {};\n        _this.hoverNodePrograms = {};\n        _this.edgePrograms = {};\n        _this.settings = (0, utils_1.assign)({}, settings_1.DEFAULT_SETTINGS, settings);\n        // Validating\n        (0, settings_1.validateSettings)(_this.settings);\n        (0, utils_1.validateGraph)(graph);\n        if (!(container instanceof HTMLElement))\n            throw new Error(\"Sigma: container should be an html element.\");\n        // Properties\n        _this.graph = graph;\n        _this.container = container;\n        // Initializing contexts\n        _this.createWebGLContext(\"edges\", { preserveDrawingBuffer: true });\n        _this.createCanvasContext(\"edgeLabels\");\n        _this.createWebGLContext(\"nodes\");\n        _this.createCanvasContext(\"labels\");\n        _this.createCanvasContext(\"hovers\");\n        _this.createWebGLContext(\"hoverNodes\");\n        _this.createCanvasContext(\"mouse\");\n        // Blending\n        for (var key in _this.webGLContexts) {\n            var gl = _this.webGLContexts[key];\n            gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n            gl.enable(gl.BLEND);\n        }\n        // Loading programs\n        for (var type in _this.settings.nodeProgramClasses) {\n            var NodeProgramClass = _this.settings.nodeProgramClasses[type];\n            _this.nodePrograms[type] = new NodeProgramClass(_this.webGLContexts.nodes, _this);\n            _this.hoverNodePrograms[type] = new NodeProgramClass(_this.webGLContexts.hoverNodes, _this);\n        }\n        for (var type in _this.settings.edgeProgramClasses) {\n            var EdgeProgramClass = _this.settings.edgeProgramClasses[type];\n            _this.edgePrograms[type] = new EdgeProgramClass(_this.webGLContexts.edges, _this);\n        }\n        // Initial resize\n        _this.resize();\n        // Initializing the camera\n        _this.camera = new camera_1.default();\n        // Binding camera events\n        _this.bindCameraHandlers();\n        // Initializing captors\n        _this.mouseCaptor = new mouse_1.default(_this.elements.mouse, _this);\n        _this.touchCaptor = new touch_1.default(_this.elements.mouse, _this);\n        // Binding event handlers\n        _this.bindEventHandlers();\n        // Binding graph handlers\n        _this.bindGraphHandlers();\n        // Trigger eventual settings-related things\n        _this.handleSettingsUpdate();\n        // Processing data for the first time & render\n        _this.process();\n        _this.render();\n        return _this;\n    }\n    /**---------------------------------------------------------------------------\n     * Internal methods.\n     **---------------------------------------------------------------------------\n     */\n    /**\n     * Internal function used to create a canvas element.\n     * @param  {string} id - Context's id.\n     * @return {Sigma}\n     */\n    Sigma.prototype.createCanvas = function (id) {\n        var canvas = (0, utils_1.createElement)(\"canvas\", {\n            position: \"absolute\",\n        }, {\n            class: \"sigma-\".concat(id),\n        });\n        this.elements[id] = canvas;\n        this.container.appendChild(canvas);\n        return canvas;\n    };\n    /**\n     * Internal function used to create a canvas context and add the relevant\n     * DOM elements.\n     *\n     * @param  {string} id - Context's id.\n     * @return {Sigma}\n     */\n    Sigma.prototype.createCanvasContext = function (id) {\n        var canvas = this.createCanvas(id);\n        var contextOptions = {\n            preserveDrawingBuffer: false,\n            antialias: false,\n        };\n        this.canvasContexts[id] = canvas.getContext(\"2d\", contextOptions);\n        return this;\n    };\n    /**\n     * Internal function used to create a canvas context and add the relevant\n     * DOM elements.\n     *\n     * @param  {string}  id      - Context's id.\n     * @param  {object?} options - #getContext params to override (optional)\n     * @return {Sigma}\n     */\n    Sigma.prototype.createWebGLContext = function (id, options) {\n        var canvas = this.createCanvas(id);\n        var contextOptions = __assign({ preserveDrawingBuffer: false, antialias: false }, (options || {}));\n        var context;\n        // First we try webgl2 for an easy performance boost\n        context = canvas.getContext(\"webgl2\", contextOptions);\n        // Else we fall back to webgl\n        if (!context)\n            context = canvas.getContext(\"webgl\", contextOptions);\n        // Edge, I am looking right at you...\n        if (!context)\n            context = canvas.getContext(\"experimental-webgl\", contextOptions);\n        this.webGLContexts[id] = context;\n        return this;\n    };\n    /**\n     * Method binding camera handlers.\n     *\n     * @return {Sigma}\n     */\n    Sigma.prototype.bindCameraHandlers = function () {\n        var _this = this;\n        this.activeListeners.camera = function () {\n            _this._scheduleRefresh();\n        };\n        this.camera.on(\"updated\", this.activeListeners.camera);\n        return this;\n    };\n    /**\n     * Method that checks whether or not a node collides with a given position.\n     */\n    Sigma.prototype.mouseIsOnNode = function (_a, _b, size) {\n        var x = _a.x, y = _a.y;\n        var nodeX = _b.x, nodeY = _b.y;\n        return (x > nodeX - size &&\n            x < nodeX + size &&\n            y > nodeY - size &&\n            y < nodeY + size &&\n            Math.sqrt(Math.pow(x - nodeX, 2) + Math.pow(y - nodeY, 2)) < size);\n    };\n    /**\n     * Method that returns all nodes in quad at a given position.\n     */\n    Sigma.prototype.getQuadNodes = function (position) {\n        var mouseGraphPosition = this.viewportToFramedGraph(position);\n        return this.quadtree.point(mouseGraphPosition.x, 1 - mouseGraphPosition.y);\n    };\n    /**\n     * Method that returns the closest node to a given position.\n     */\n    Sigma.prototype.getNodeAtPosition = function (position) {\n        var x = position.x, y = position.y;\n        var quadNodes = this.getQuadNodes(position);\n        // We will hover the node whose center is closest to mouse\n        var minDistance = Infinity, nodeAtPosition = null;\n        for (var i = 0, l = quadNodes.length; i < l; i++) {\n            var node = quadNodes[i];\n            var data = this.nodeDataCache[node];\n            var nodePosition = this.framedGraphToViewport(data);\n            var size = this.scaleSize(data.size);\n            if (!data.hidden && this.mouseIsOnNode(position, nodePosition, size)) {\n                var distance = Math.sqrt(Math.pow(x - nodePosition.x, 2) + Math.pow(y - nodePosition.y, 2));\n                // TODO: sort by min size also for cases where center is the same\n                if (distance < minDistance) {\n                    minDistance = distance;\n                    nodeAtPosition = node;\n                }\n            }\n        }\n        return nodeAtPosition;\n    };\n    /**\n     * Method binding event handlers.\n     *\n     * @return {Sigma}\n     */\n    Sigma.prototype.bindEventHandlers = function () {\n        var _this = this;\n        // Handling window resize\n        this.activeListeners.handleResize = function () {\n            _this.needToSoftProcess = true;\n            _this._scheduleRefresh();\n        };\n        window.addEventListener(\"resize\", this.activeListeners.handleResize);\n        // Handling mouse move\n        this.activeListeners.handleMove = function (e) {\n            var baseEvent = {\n                event: e,\n                preventSigmaDefault: function () {\n                    e.preventSigmaDefault();\n                },\n            };\n            var nodeToHover = _this.getNodeAtPosition(e);\n            if (nodeToHover && _this.hoveredNode !== nodeToHover && !_this.nodeDataCache[nodeToHover].hidden) {\n                // Handling passing from one node to the other directly\n                if (_this.hoveredNode)\n                    _this.emit(\"leaveNode\", __assign(__assign({}, baseEvent), { node: _this.hoveredNode }));\n                _this.hoveredNode = nodeToHover;\n                _this.emit(\"enterNode\", __assign(__assign({}, baseEvent), { node: nodeToHover }));\n                _this.scheduleHighlightedNodesRender();\n                return;\n            }\n            // Checking if the hovered node is still hovered\n            if (_this.hoveredNode) {\n                var data = _this.nodeDataCache[_this.hoveredNode];\n                var pos = _this.framedGraphToViewport(data);\n                var size = _this.scaleSize(data.size);\n                if (!_this.mouseIsOnNode(e, pos, size)) {\n                    var node = _this.hoveredNode;\n                    _this.hoveredNode = null;\n                    _this.emit(\"leaveNode\", __assign(__assign({}, baseEvent), { node: node }));\n                    _this.scheduleHighlightedNodesRender();\n                    return;\n                }\n            }\n            if (_this.settings.enableEdgeHoverEvents === true) {\n                _this.checkEdgeHoverEvents(baseEvent);\n            }\n            else if (_this.settings.enableEdgeHoverEvents === \"debounce\") {\n                if (!_this.checkEdgesEventsFrame)\n                    _this.checkEdgesEventsFrame = (0, utils_1.requestFrame)(function () {\n                        _this.checkEdgeHoverEvents(baseEvent);\n                        _this.checkEdgesEventsFrame = null;\n                    });\n            }\n        };\n        // Handling click\n        var createMouseListener = function (eventType) {\n            return function (e) {\n                var baseEvent = {\n                    event: e,\n                    preventSigmaDefault: function () {\n                        e.preventSigmaDefault();\n                    },\n                };\n                var isFakeSigmaMouseEvent = e.original.isFakeSigmaMouseEvent;\n                var nodeAtPosition = isFakeSigmaMouseEvent ? _this.getNodeAtPosition(e) : _this.hoveredNode;\n                if (nodeAtPosition)\n                    return _this.emit(\"\".concat(eventType, \"Node\"), __assign(__assign({}, baseEvent), { node: nodeAtPosition }));\n                if (eventType === \"wheel\" ? _this.settings.enableEdgeWheelEvents : _this.settings.enableEdgeClickEvents) {\n                    var edge = _this.getEdgeAtPoint(e.x, e.y);\n                    if (edge)\n                        return _this.emit(\"\".concat(eventType, \"Edge\"), __assign(__assign({}, baseEvent), { edge: edge }));\n                }\n                return _this.emit(\"\".concat(eventType, \"Stage\"), baseEvent);\n            };\n        };\n        this.activeListeners.handleClick = createMouseListener(\"click\");\n        this.activeListeners.handleRightClick = createMouseListener(\"rightClick\");\n        this.activeListeners.handleDoubleClick = createMouseListener(\"doubleClick\");\n        this.activeListeners.handleWheel = createMouseListener(\"wheel\");\n        this.activeListeners.handleDown = createMouseListener(\"down\");\n        this.mouseCaptor.on(\"mousemove\", this.activeListeners.handleMove);\n        this.mouseCaptor.on(\"click\", this.activeListeners.handleClick);\n        this.mouseCaptor.on(\"rightClick\", this.activeListeners.handleRightClick);\n        this.mouseCaptor.on(\"doubleClick\", this.activeListeners.handleDoubleClick);\n        this.mouseCaptor.on(\"wheel\", this.activeListeners.handleWheel);\n        this.mouseCaptor.on(\"mousedown\", this.activeListeners.handleDown);\n        // TODO\n        // Deal with Touch captor events\n        return this;\n    };\n    /**\n     * Method binding graph handlers\n     *\n     * @return {Sigma}\n     */\n    Sigma.prototype.bindGraphHandlers = function () {\n        var _this = this;\n        var graph = this.graph;\n        this.activeListeners.graphUpdate = function () {\n            _this.needToProcess = true;\n            _this._scheduleRefresh();\n        };\n        this.activeListeners.softGraphUpdate = function () {\n            _this.needToSoftProcess = true;\n            _this._scheduleRefresh();\n        };\n        this.activeListeners.dropNodeGraphUpdate = function (e) {\n            delete _this.nodeDataCache[e.key];\n            if (_this.hoveredNode === e.key)\n                _this.hoveredNode = null;\n            _this.activeListeners.graphUpdate();\n        };\n        this.activeListeners.dropEdgeGraphUpdate = function (e) {\n            delete _this.edgeDataCache[e.key];\n            if (_this.hoveredEdge === e.key)\n                _this.hoveredEdge = null;\n            _this.activeListeners.graphUpdate();\n        };\n        this.activeListeners.clearEdgesGraphUpdate = function () {\n            _this.edgeDataCache = {};\n            _this.hoveredEdge = null;\n            _this.activeListeners.graphUpdate();\n        };\n        this.activeListeners.clearGraphUpdate = function () {\n            _this.nodeDataCache = {};\n            _this.hoveredNode = null;\n            _this.activeListeners.clearEdgesGraphUpdate();\n        };\n        graph.on(\"nodeAdded\", this.activeListeners.graphUpdate);\n        graph.on(\"nodeDropped\", this.activeListeners.dropNodeGraphUpdate);\n        graph.on(\"nodeAttributesUpdated\", this.activeListeners.softGraphUpdate);\n        graph.on(\"eachNodeAttributesUpdated\", this.activeListeners.graphUpdate);\n        graph.on(\"edgeAdded\", this.activeListeners.graphUpdate);\n        graph.on(\"edgeDropped\", this.activeListeners.dropEdgeGraphUpdate);\n        graph.on(\"edgeAttributesUpdated\", this.activeListeners.softGraphUpdate);\n        graph.on(\"eachEdgeAttributesUpdated\", this.activeListeners.graphUpdate);\n        graph.on(\"edgesCleared\", this.activeListeners.clearEdgesGraphUpdate);\n        graph.on(\"cleared\", this.activeListeners.clearGraphUpdate);\n        return this;\n    };\n    /**\n     * Method dealing with \"leaveEdge\" and \"enterEdge\" events.\n     *\n     * @return {Sigma}\n     */\n    Sigma.prototype.checkEdgeHoverEvents = function (payload) {\n        var edgeToHover = this.hoveredNode ? null : this.getEdgeAtPoint(payload.event.x, payload.event.y);\n        if (edgeToHover !== this.hoveredEdge) {\n            if (this.hoveredEdge)\n                this.emit(\"leaveEdge\", __assign(__assign({}, payload), { edge: this.hoveredEdge }));\n            if (edgeToHover)\n                this.emit(\"enterEdge\", __assign(__assign({}, payload), { edge: edgeToHover }));\n            this.hoveredEdge = edgeToHover;\n        }\n        return this;\n    };\n    /**\n     * Method looking for an edge colliding with a given point at (x, y). Returns\n     * the key of the edge if any, or null else.\n     */\n    Sigma.prototype.getEdgeAtPoint = function (x, y) {\n        var e_1, _a;\n        var _this = this;\n        var _b = this, edgeDataCache = _b.edgeDataCache, nodeDataCache = _b.nodeDataCache;\n        // Check first that pixel is colored:\n        // Note that mouse positions must be corrected by pixel ratio to correctly\n        // index the drawing buffer.\n        if (!(0, edge_collisions_1.isPixelColored)(this.webGLContexts.edges, x * this.pixelRatio, y * this.pixelRatio))\n            return null;\n        // Check for each edge if it collides with the point:\n        var _c = this.viewportToGraph({ x: x, y: y }), graphX = _c.x, graphY = _c.y;\n        // To translate edge thicknesses to the graph system, we observe by how much\n        // the length of a non-null edge is transformed to between the graph system\n        // and the viewport system:\n        var transformationRatio = 0;\n        this.graph.someEdge(function (key, _, sourceId, targetId, _a, _b) {\n            var xs = _a.x, ys = _a.y;\n            var xt = _b.x, yt = _b.y;\n            if (edgeDataCache[key].hidden || nodeDataCache[sourceId].hidden || nodeDataCache[targetId].hidden)\n                return false;\n            if (xs !== xt || ys !== yt) {\n                var graphLength = Math.sqrt(Math.pow(xt - xs, 2) + Math.pow(yt - ys, 2));\n                var _c = _this.graphToViewport({ x: xs, y: ys }), vp_xs = _c.x, vp_ys = _c.y;\n                var _d = _this.graphToViewport({ x: xt, y: yt }), vp_xt = _d.x, vp_yt = _d.y;\n                var viewportLength = Math.sqrt(Math.pow(vp_xt - vp_xs, 2) + Math.pow(vp_yt - vp_ys, 2));\n                transformationRatio = graphLength / viewportLength;\n                return true;\n            }\n        });\n        // If no non-null edge has been found, return null:\n        if (!transformationRatio)\n            return null;\n        // Now we can look for matching edges:\n        var edges = this.graph.filterEdges(function (key, edgeAttributes, sourceId, targetId, sourcePosition, targetPosition) {\n            if (edgeDataCache[key].hidden || nodeDataCache[sourceId].hidden || nodeDataCache[targetId].hidden)\n                return false;\n            if ((0, edge_collisions_1.doEdgeCollideWithPoint)(graphX, graphY, sourcePosition.x, sourcePosition.y, targetPosition.x, targetPosition.y, \n            // Adapt the edge size to the zoom ratio:\n            (edgeDataCache[key].size * transformationRatio) / _this.cameraSizeRatio)) {\n                return true;\n            }\n        });\n        if (edges.length === 0)\n            return null; // no edges found\n        // if none of the edges have a zIndex, selected the most recently created one to match the rendering order\n        var selectedEdge = edges[edges.length - 1];\n        // otherwise select edge with highest zIndex\n        var highestZIndex = -Infinity;\n        try {\n            for (var edges_1 = __values(edges), edges_1_1 = edges_1.next(); !edges_1_1.done; edges_1_1 = edges_1.next()) {\n                var edge = edges_1_1.value;\n                var zIndex = this.graph.getEdgeAttribute(edge, \"zIndex\");\n                if (zIndex >= highestZIndex) {\n                    selectedEdge = edge;\n                    highestZIndex = zIndex;\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (edges_1_1 && !edges_1_1.done && (_a = edges_1.return)) _a.call(edges_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return selectedEdge;\n    };\n    /**\n     * Method used to process the whole graph's data.\n     *\n     * @return {Sigma}\n     */\n    Sigma.prototype.process = function (keepArrays) {\n        var _this = this;\n        if (keepArrays === void 0) { keepArrays = false; }\n        var graph = this.graph;\n        var settings = this.settings;\n        var dimensions = this.getDimensions();\n        var nodeZExtent = [Infinity, -Infinity];\n        var edgeZExtent = [Infinity, -Infinity];\n        // Clearing the quad\n        this.quadtree.clear();\n        // Resetting the label grid\n        // TODO: it's probably better to do this explicitly or on resizes for layout and anims\n        this.labelGrid.resizeAndClear(dimensions, settings.labelGridCellSize);\n        // Clear the highlightedNodes\n        this.highlightedNodes = new Set();\n        // Computing extents\n        this.nodeExtent = (0, utils_1.graphExtent)(graph);\n        // Resetting `forceLabel` indices\n        this.nodesWithForcedLabels = [];\n        this.edgesWithForcedLabels = [];\n        // NOTE: it is important to compute this matrix after computing the node's extent\n        // because #.getGraphDimensions relies on it\n        var nullCamera = new camera_1.default();\n        var nullCameraMatrix = (0, utils_1.matrixFromCamera)(nullCamera.getState(), this.getDimensions(), this.getGraphDimensions(), this.getSetting(\"stagePadding\") || 0);\n        // Rescaling function\n        this.normalizationFunction = (0, utils_1.createNormalizationFunction)(this.customBBox || this.nodeExtent);\n        var nodesPerPrograms = {};\n        var nodes = graph.nodes();\n        for (var i = 0, l = nodes.length; i < l; i++) {\n            var node = nodes[i];\n            // Node display data resolution:\n            //   1. First we get the node's attributes\n            //   2. We optionally reduce them using the function provided by the user\n            //      Note that this function must return a total object and won't be merged\n            //   3. We apply our defaults, while running some vital checks\n            //   4. We apply the normalization function\n            // We shallow copy node data to avoid dangerous behaviors from reducers\n            var attr = Object.assign({}, graph.getNodeAttributes(node));\n            if (settings.nodeReducer)\n                attr = settings.nodeReducer(node, attr);\n            var data = applyNodeDefaults(this.settings, node, attr);\n            nodesPerPrograms[data.type] = (nodesPerPrograms[data.type] || 0) + 1;\n            this.nodeDataCache[node] = data;\n            this.normalizationFunction.applyTo(data);\n            if (data.forceLabel)\n                this.nodesWithForcedLabels.push(node);\n            if (this.settings.zIndex) {\n                if (data.zIndex < nodeZExtent[0])\n                    nodeZExtent[0] = data.zIndex;\n                if (data.zIndex > nodeZExtent[1])\n                    nodeZExtent[1] = data.zIndex;\n            }\n        }\n        for (var type in this.nodePrograms) {\n            if (!this.nodePrograms.hasOwnProperty(type)) {\n                throw new Error(\"Sigma: could not find a suitable program for node type \\\"\".concat(type, \"\\\"!\"));\n            }\n            if (!keepArrays)\n                this.nodePrograms[type].allocate(nodesPerPrograms[type] || 0);\n            // We reset that count here, so that we can reuse it while calling the Program#process methods:\n            nodesPerPrograms[type] = 0;\n        }\n        // Handling node z-index\n        // TODO: z-index needs us to compute display data before hand\n        if (this.settings.zIndex && nodeZExtent[0] !== nodeZExtent[1])\n            nodes = (0, utils_1.zIndexOrdering)(nodeZExtent, function (node) { return _this.nodeDataCache[node].zIndex; }, nodes);\n        for (var i = 0, l = nodes.length; i < l; i++) {\n            var node = nodes[i];\n            var data = this.nodeDataCache[node];\n            this.quadtree.add(node, data.x, 1 - data.y, data.size / this.width);\n            if (typeof data.label === \"string\" && !data.hidden)\n                this.labelGrid.add(node, data.size, this.framedGraphToViewport(data, { matrix: nullCameraMatrix }));\n            this.nodePrograms[data.type].process(data, data.hidden, nodesPerPrograms[data.type]++);\n            // Save the node in the highlighted set if needed\n            if (data.highlighted && !data.hidden)\n                this.highlightedNodes.add(node);\n        }\n        this.labelGrid.organize();\n        var edgesPerPrograms = {};\n        var edges = graph.edges();\n        for (var i = 0, l = edges.length; i < l; i++) {\n            var edge = edges[i];\n            // Edge display data resolution:\n            //   1. First we get the edge's attributes\n            //   2. We optionally reduce them using the function provided by the user\n            //      Note that this function must return a total object and won't be merged\n            //   3. We apply our defaults, while running some vital checks\n            // We shallow copy edge data to avoid dangerous behaviors from reducers\n            var attr = Object.assign({}, graph.getEdgeAttributes(edge));\n            if (settings.edgeReducer)\n                attr = settings.edgeReducer(edge, attr);\n            var data = applyEdgeDefaults(this.settings, edge, attr);\n            edgesPerPrograms[data.type] = (edgesPerPrograms[data.type] || 0) + 1;\n            this.edgeDataCache[edge] = data;\n            if (data.forceLabel && !data.hidden)\n                this.edgesWithForcedLabels.push(edge);\n            if (this.settings.zIndex) {\n                if (data.zIndex < edgeZExtent[0])\n                    edgeZExtent[0] = data.zIndex;\n                if (data.zIndex > edgeZExtent[1])\n                    edgeZExtent[1] = data.zIndex;\n            }\n        }\n        for (var type in this.edgePrograms) {\n            if (!this.edgePrograms.hasOwnProperty(type)) {\n                throw new Error(\"Sigma: could not find a suitable program for edge type \\\"\".concat(type, \"\\\"!\"));\n            }\n            if (!keepArrays)\n                this.edgePrograms[type].allocate(edgesPerPrograms[type] || 0);\n            // We reset that count here, so that we can reuse it while calling the Program#process methods:\n            edgesPerPrograms[type] = 0;\n        }\n        // Handling edge z-index\n        if (this.settings.zIndex && edgeZExtent[0] !== edgeZExtent[1])\n            edges = (0, utils_1.zIndexOrdering)(edgeZExtent, function (edge) { return _this.edgeDataCache[edge].zIndex; }, edges);\n        for (var i = 0, l = edges.length; i < l; i++) {\n            var edge = edges[i];\n            var data = this.edgeDataCache[edge];\n            var extremities = graph.extremities(edge), sourceData = this.nodeDataCache[extremities[0]], targetData = this.nodeDataCache[extremities[1]];\n            var hidden = data.hidden || sourceData.hidden || targetData.hidden;\n            this.edgePrograms[data.type].process(sourceData, targetData, data, hidden, edgesPerPrograms[data.type]++);\n        }\n        for (var type in this.edgePrograms) {\n            var program = this.edgePrograms[type];\n            if (!keepArrays && typeof program.computeIndices === \"function\")\n                program.computeIndices();\n        }\n        return this;\n    };\n    /**\n     * Method that backports potential settings updates where it's needed.\n     * @private\n     */\n    Sigma.prototype.handleSettingsUpdate = function () {\n        this.camera.minRatio = this.settings.minCameraRatio;\n        this.camera.maxRatio = this.settings.maxCameraRatio;\n        this.camera.setState(this.camera.validateState(this.camera.getState()));\n        return this;\n    };\n    /**\n     * Method that decides whether to reprocess graph or not, and then render the\n     * graph.\n     *\n     * @return {Sigma}\n     */\n    Sigma.prototype._refresh = function () {\n        // Do we need to process data?\n        if (this.needToProcess) {\n            this.process();\n        }\n        else if (this.needToSoftProcess) {\n            this.process(true);\n        }\n        // Resetting state\n        this.needToProcess = false;\n        this.needToSoftProcess = false;\n        // Rendering\n        this.render();\n        return this;\n    };\n    /**\n     * Method that schedules a `_refresh` call if none has been scheduled yet. It\n     * will then be processed next available frame.\n     *\n     * @return {Sigma}\n     */\n    Sigma.prototype._scheduleRefresh = function () {\n        var _this = this;\n        if (!this.renderFrame) {\n            this.renderFrame = (0, utils_1.requestFrame)(function () {\n                _this._refresh();\n                _this.renderFrame = null;\n            });\n        }\n        return this;\n    };\n    /**\n     * Method used to render labels.\n     *\n     * @return {Sigma}\n     */\n    Sigma.prototype.renderLabels = function () {\n        if (!this.settings.renderLabels)\n            return this;\n        var cameraState = this.camera.getState();\n        // Finding visible nodes to display their labels\n        var visibleNodes;\n        if (cameraState.ratio >= 1) {\n            // Camera is unzoomed so no need to ask the quadtree for visible nodes\n            visibleNodes = new Set(this.graph.nodes());\n        }\n        else {\n            // Let's ask the quadtree\n            var viewRectangle = this.viewRectangle();\n            visibleNodes = new Set(this.quadtree.rectangle(viewRectangle.x1, 1 - viewRectangle.y1, viewRectangle.x2, 1 - viewRectangle.y2, viewRectangle.height));\n        }\n        // Selecting labels to draw\n        // TODO: drop gridsettings likewise\n        // TODO: optimize through visible nodes\n        var labelsToDisplay = this.labelGrid\n            .getLabelsToDisplay(cameraState.ratio, this.settings.labelDensity)\n            .concat(this.nodesWithForcedLabels);\n        this.displayedLabels = new Set();\n        // Drawing labels\n        var context = this.canvasContexts.labels;\n        for (var i = 0, l = labelsToDisplay.length; i < l; i++) {\n            var node = labelsToDisplay[i];\n            var data = this.nodeDataCache[node];\n            // If the node was already drawn (like if it is eligible AND has\n            // `forceLabel`), we don't want to draw it again\n            if (this.displayedLabels.has(node))\n                continue;\n            // If the node is hidden, we don't need to display its label obviously\n            if (data.hidden)\n                continue;\n            var _a = this.framedGraphToViewport(data), x = _a.x, y = _a.y;\n            // TODO: we can cache the labels we need to render until the camera's ratio changes\n            // TODO: this should be computed in the canvas components?\n            var size = this.scaleSize(data.size);\n            if (!data.forceLabel && size < this.settings.labelRenderedSizeThreshold)\n                continue;\n            if (!visibleNodes.has(node))\n                continue;\n            // TODO:\n            // Because displayed edge labels depend directly on actually rendered node\n            // labels, we need to only add to this.displayedLabels nodes whose label\n            // is rendered.\n            // This makes this.displayedLabels depend on viewport, which might become\n            // an issue once we start memoizing getLabelsToDisplay.\n            this.displayedLabels.add(node);\n            this.settings.labelRenderer(context, __assign(__assign({ key: node }, data), { size: size, x: x, y: y }), this.settings);\n        }\n        return this;\n    };\n    /**\n     * Method used to render edge labels, based on which node labels were\n     * rendered.\n     *\n     * @return {Sigma}\n     */\n    Sigma.prototype.renderEdgeLabels = function () {\n        if (!this.settings.renderEdgeLabels)\n            return this;\n        var context = this.canvasContexts.edgeLabels;\n        // Clearing\n        context.clearRect(0, 0, this.width, this.height);\n        var edgeLabelsToDisplay = (0, labels_1.edgeLabelsToDisplayFromNodes)({\n            graph: this.graph,\n            hoveredNode: this.hoveredNode,\n            displayedNodeLabels: this.displayedLabels,\n            highlightedNodes: this.highlightedNodes,\n        }).concat(this.edgesWithForcedLabels);\n        var displayedLabels = new Set();\n        for (var i = 0, l = edgeLabelsToDisplay.length; i < l; i++) {\n            var edge = edgeLabelsToDisplay[i], extremities = this.graph.extremities(edge), sourceData = this.nodeDataCache[extremities[0]], targetData = this.nodeDataCache[extremities[1]], edgeData = this.edgeDataCache[edge];\n            // If the edge was already drawn (like if it is eligible AND has\n            // `forceLabel`), we don't want to draw it again\n            if (displayedLabels.has(edge))\n                continue;\n            // If the edge is hidden we don't need to display its label\n            // NOTE: the test on sourceData & targetData is probably paranoid at this point?\n            if (edgeData.hidden || sourceData.hidden || targetData.hidden) {\n                continue;\n            }\n            this.settings.edgeLabelRenderer(context, __assign(__assign({ key: edge }, edgeData), { size: this.scaleSize(edgeData.size) }), __assign(__assign(__assign({ key: extremities[0] }, sourceData), this.framedGraphToViewport(sourceData)), { size: this.scaleSize(sourceData.size) }), __assign(__assign(__assign({ key: extremities[1] }, targetData), this.framedGraphToViewport(targetData)), { size: this.scaleSize(targetData.size) }), this.settings);\n            displayedLabels.add(edge);\n        }\n        return this;\n    };\n    /**\n     * Method used to render the highlighted nodes.\n     *\n     * @return {Sigma}\n     */\n    Sigma.prototype.renderHighlightedNodes = function () {\n        var _this = this;\n        var context = this.canvasContexts.hovers;\n        // Clearing\n        context.clearRect(0, 0, this.width, this.height);\n        // Rendering\n        var render = function (node) {\n            var data = _this.nodeDataCache[node];\n            var _a = _this.framedGraphToViewport(data), x = _a.x, y = _a.y;\n            var size = _this.scaleSize(data.size);\n            _this.settings.hoverRenderer(context, __assign(__assign({ key: node }, data), { size: size, x: x, y: y }), _this.settings);\n        };\n        var nodesToRender = [];\n        if (this.hoveredNode && !this.nodeDataCache[this.hoveredNode].hidden) {\n            nodesToRender.push(this.hoveredNode);\n        }\n        this.highlightedNodes.forEach(function (node) {\n            // The hovered node has already been highlighted\n            if (node !== _this.hoveredNode)\n                nodesToRender.push(node);\n        });\n        // Draw labels:\n        nodesToRender.forEach(function (node) { return render(node); });\n        // Draw WebGL nodes on top of the labels:\n        var nodesPerPrograms = {};\n        // 1. Count nodes per type:\n        nodesToRender.forEach(function (node) {\n            var type = _this.nodeDataCache[node].type;\n            nodesPerPrograms[type] = (nodesPerPrograms[type] || 0) + 1;\n        });\n        // 2. Allocate for each type for the proper number of nodes\n        for (var type in this.hoverNodePrograms) {\n            this.hoverNodePrograms[type].allocate(nodesPerPrograms[type] || 0);\n            // Also reset count, to use when rendering:\n            nodesPerPrograms[type] = 0;\n        }\n        // 3. Process all nodes to render:\n        nodesToRender.forEach(function (node) {\n            var data = _this.nodeDataCache[node];\n            _this.hoverNodePrograms[data.type].process(data, data.hidden, nodesPerPrograms[data.type]++);\n        });\n        // 4. Clear hovered nodes layer:\n        this.webGLContexts.hoverNodes.clear(this.webGLContexts.hoverNodes.COLOR_BUFFER_BIT);\n        // 5. Render:\n        for (var type in this.hoverNodePrograms) {\n            var program = this.hoverNodePrograms[type];\n            program.bind();\n            program.bufferData();\n            program.render({\n                matrix: this.matrix,\n                width: this.width,\n                height: this.height,\n                ratio: this.camera.ratio,\n                correctionRatio: this.correctionRatio / this.camera.ratio,\n                scalingRatio: this.pixelRatio,\n            });\n        }\n    };\n    /**\n     * Method used to schedule a hover render.\n     *\n     */\n    Sigma.prototype.scheduleHighlightedNodesRender = function () {\n        var _this = this;\n        if (this.renderHighlightedNodesFrame || this.renderFrame)\n            return;\n        this.renderHighlightedNodesFrame = (0, utils_1.requestFrame)(function () {\n            // Resetting state\n            _this.renderHighlightedNodesFrame = null;\n            // Rendering\n            _this.renderHighlightedNodes();\n            _this.renderEdgeLabels();\n        });\n    };\n    /**\n     * Method used to render.\n     *\n     * @return {Sigma}\n     */\n    Sigma.prototype.render = function () {\n        var _this = this;\n        this.emit(\"beforeRender\");\n        var handleEscape = function () {\n            _this.emit(\"afterRender\");\n            return _this;\n        };\n        // If a render was scheduled, we cancel it\n        if (this.renderFrame) {\n            (0, utils_1.cancelFrame)(this.renderFrame);\n            this.renderFrame = null;\n            this.needToProcess = false;\n            this.needToSoftProcess = false;\n        }\n        // First we need to resize\n        this.resize();\n        // Clearing the canvases\n        this.clear();\n        // Recomputing useful camera-related values:\n        this.updateCachedValues();\n        // If we have no nodes we can stop right there\n        if (!this.graph.order)\n            return handleEscape();\n        // TODO: improve this heuristic or move to the captor itself?\n        // TODO: deal with the touch captor here as well\n        var mouseCaptor = this.mouseCaptor;\n        var moving = this.camera.isAnimated() ||\n            mouseCaptor.isMoving ||\n            mouseCaptor.draggedEvents ||\n            mouseCaptor.currentWheelDirection;\n        // Then we need to extract a matrix from the camera\n        var cameraState = this.camera.getState();\n        var viewportDimensions = this.getDimensions();\n        var graphDimensions = this.getGraphDimensions();\n        var padding = this.getSetting(\"stagePadding\") || 0;\n        this.matrix = (0, utils_1.matrixFromCamera)(cameraState, viewportDimensions, graphDimensions, padding);\n        this.invMatrix = (0, utils_1.matrixFromCamera)(cameraState, viewportDimensions, graphDimensions, padding, true);\n        this.correctionRatio = (0, utils_1.getMatrixImpact)(this.matrix, cameraState, viewportDimensions);\n        // Drawing nodes\n        for (var type in this.nodePrograms) {\n            var program = this.nodePrograms[type];\n            program.bind();\n            program.bufferData();\n            program.render({\n                matrix: this.matrix,\n                width: this.width,\n                height: this.height,\n                ratio: cameraState.ratio,\n                correctionRatio: this.correctionRatio / cameraState.ratio,\n                scalingRatio: this.pixelRatio,\n            });\n        }\n        // Drawing edges\n        if (!this.settings.hideEdgesOnMove || !moving) {\n            for (var type in this.edgePrograms) {\n                var program = this.edgePrograms[type];\n                program.bind();\n                program.bufferData();\n                program.render({\n                    matrix: this.matrix,\n                    width: this.width,\n                    height: this.height,\n                    ratio: cameraState.ratio,\n                    correctionRatio: this.correctionRatio / cameraState.ratio,\n                    scalingRatio: this.pixelRatio,\n                });\n            }\n        }\n        // Do not display labels on move per setting\n        if (this.settings.hideLabelsOnMove && moving)\n            return handleEscape();\n        this.renderLabels();\n        this.renderEdgeLabels();\n        this.renderHighlightedNodes();\n        return handleEscape();\n    };\n    /**\n     * Internal method used to update expensive and therefore cached values\n     * each time the camera state is updated.\n     */\n    Sigma.prototype.updateCachedValues = function () {\n        var ratio = this.camera.getState().ratio;\n        this.cameraSizeRatio = Math.sqrt(ratio);\n    };\n    /**---------------------------------------------------------------------------\n     * Public API.\n     **---------------------------------------------------------------------------\n     */\n    /**\n     * Method returning the renderer's camera.\n     *\n     * @return {Camera}\n     */\n    Sigma.prototype.getCamera = function () {\n        return this.camera;\n    };\n    /**\n     * Method returning the container DOM element.\n     *\n     * @return {HTMLElement}\n     */\n    Sigma.prototype.getContainer = function () {\n        return this.container;\n    };\n    /**\n     * Method returning the renderer's graph.\n     *\n     * @return {Graph}\n     */\n    Sigma.prototype.getGraph = function () {\n        return this.graph;\n    };\n    /**\n     * Method returning the mouse captor.\n     *\n     * @return {MouseCaptor}\n     */\n    Sigma.prototype.getMouseCaptor = function () {\n        return this.mouseCaptor;\n    };\n    /**\n     * Method returning the touch captor.\n     *\n     * @return {TouchCaptor}\n     */\n    Sigma.prototype.getTouchCaptor = function () {\n        return this.touchCaptor;\n    };\n    /**\n     * Method returning the current renderer's dimensions.\n     *\n     * @return {Dimensions}\n     */\n    Sigma.prototype.getDimensions = function () {\n        return { width: this.width, height: this.height };\n    };\n    /**\n     * Method returning the current graph's dimensions.\n     *\n     * @return {Dimensions}\n     */\n    Sigma.prototype.getGraphDimensions = function () {\n        var extent = this.customBBox || this.nodeExtent;\n        return {\n            width: extent.x[1] - extent.x[0] || 1,\n            height: extent.y[1] - extent.y[0] || 1,\n        };\n    };\n    /**\n     * Method used to get all the sigma node attributes.\n     * It's usefull for example to get the position of a node\n     * and to get values that are set by the nodeReducer\n     *\n     * @param  {string} key - The node's key.\n     * @return {NodeDisplayData | undefined} A copy of the desired node's attribute or undefined if not found\n     */\n    Sigma.prototype.getNodeDisplayData = function (key) {\n        var node = this.nodeDataCache[key];\n        return node ? Object.assign({}, node) : undefined;\n    };\n    /**\n     * Method used to get all the sigma edge attributes.\n     * It's usefull for example to get values that are set by the edgeReducer.\n     *\n     * @param  {string} key - The edge's key.\n     * @return {EdgeDisplayData | undefined} A copy of the desired edge's attribute or undefined if not found\n     */\n    Sigma.prototype.getEdgeDisplayData = function (key) {\n        var edge = this.edgeDataCache[key];\n        return edge ? Object.assign({}, edge) : undefined;\n    };\n    /**\n     * Method returning a copy of the settings collection.\n     *\n     * @return {Settings} A copy of the settings collection.\n     */\n    Sigma.prototype.getSettings = function () {\n        return __assign({}, this.settings);\n    };\n    /**\n     * Method returning the current value for a given setting key.\n     *\n     * @param  {string} key - The setting key to get.\n     * @return {any} The value attached to this setting key or undefined if not found\n     */\n    Sigma.prototype.getSetting = function (key) {\n        return this.settings[key];\n    };\n    /**\n     * Method setting the value of a given setting key. Note that this will schedule\n     * a new render next frame.\n     *\n     * @param  {string} key - The setting key to set.\n     * @param  {any}    value - The value to set.\n     * @return {Sigma}\n     */\n    Sigma.prototype.setSetting = function (key, value) {\n        this.settings[key] = value;\n        (0, settings_1.validateSettings)(this.settings);\n        this.handleSettingsUpdate();\n        this.needToProcess = true; // TODO: some keys may work with only needToSoftProcess or even nothing\n        this._scheduleRefresh();\n        return this;\n    };\n    /**\n     * Method updating the value of a given setting key using the provided function.\n     * Note that this will schedule a new render next frame.\n     *\n     * @param  {string}   key     - The setting key to set.\n     * @param  {function} updater - The update function.\n     * @return {Sigma}\n     */\n    Sigma.prototype.updateSetting = function (key, updater) {\n        this.settings[key] = updater(this.settings[key]);\n        (0, settings_1.validateSettings)(this.settings);\n        this.handleSettingsUpdate();\n        this.needToProcess = true; // TODO: some keys may work with only needToSoftProcess or even nothing\n        this._scheduleRefresh();\n        return this;\n    };\n    /**\n     * Method used to resize the renderer.\n     *\n     * @return {Sigma}\n     */\n    Sigma.prototype.resize = function () {\n        var previousWidth = this.width, previousHeight = this.height;\n        this.width = this.container.offsetWidth;\n        this.height = this.container.offsetHeight;\n        this.pixelRatio = (0, utils_1.getPixelRatio)();\n        if (this.width === 0) {\n            if (this.settings.allowInvalidContainer)\n                this.width = 1;\n            else\n                throw new Error(\"Sigma: Container has no width. You can set the allowInvalidContainer setting to true to stop seing this error.\");\n        }\n        if (this.height === 0) {\n            if (this.settings.allowInvalidContainer)\n                this.height = 1;\n            else\n                throw new Error(\"Sigma: Container has no height. You can set the allowInvalidContainer setting to true to stop seing this error.\");\n        }\n        // If nothing has changed, we can stop right here\n        if (previousWidth === this.width && previousHeight === this.height)\n            return this;\n        this.emit(\"resize\");\n        // Sizing dom elements\n        for (var id in this.elements) {\n            var element = this.elements[id];\n            element.style.width = this.width + \"px\";\n            element.style.height = this.height + \"px\";\n        }\n        // Sizing canvas contexts\n        for (var id in this.canvasContexts) {\n            this.elements[id].setAttribute(\"width\", this.width * this.pixelRatio + \"px\");\n            this.elements[id].setAttribute(\"height\", this.height * this.pixelRatio + \"px\");\n            if (this.pixelRatio !== 1)\n                this.canvasContexts[id].scale(this.pixelRatio, this.pixelRatio);\n        }\n        // Sizing WebGL contexts\n        for (var id in this.webGLContexts) {\n            this.elements[id].setAttribute(\"width\", this.width * this.pixelRatio + \"px\");\n            this.elements[id].setAttribute(\"height\", this.height * this.pixelRatio + \"px\");\n            this.webGLContexts[id].viewport(0, 0, this.width * this.pixelRatio, this.height * this.pixelRatio);\n        }\n        return this;\n    };\n    /**\n     * Method used to clear all the canvases.\n     *\n     * @return {Sigma}\n     */\n    Sigma.prototype.clear = function () {\n        this.webGLContexts.nodes.clear(this.webGLContexts.nodes.COLOR_BUFFER_BIT);\n        this.webGLContexts.edges.clear(this.webGLContexts.edges.COLOR_BUFFER_BIT);\n        this.webGLContexts.hoverNodes.clear(this.webGLContexts.hoverNodes.COLOR_BUFFER_BIT);\n        this.canvasContexts.labels.clearRect(0, 0, this.width, this.height);\n        this.canvasContexts.hovers.clearRect(0, 0, this.width, this.height);\n        this.canvasContexts.edgeLabels.clearRect(0, 0, this.width, this.height);\n        return this;\n    };\n    /**\n     * Method used to refresh all computed data.\n     *\n     * @return {Sigma}\n     */\n    Sigma.prototype.refresh = function () {\n        this.needToProcess = true;\n        this._refresh();\n        return this;\n    };\n    /**\n     * Method used to refresh all computed data, at the next available frame.\n     * If this method has already been called this frame, then it will only render once at the next available frame.\n     *\n     * @return {Sigma}\n     */\n    Sigma.prototype.scheduleRefresh = function () {\n        this.needToProcess = true;\n        this._scheduleRefresh();\n        return this;\n    };\n    /**\n     * Method used to (un)zoom, while preserving the position of a viewport point.\n     * Used for instance to zoom \"on the mouse cursor\".\n     *\n     * @param viewportTarget\n     * @param newRatio\n     * @return {CameraState}\n     */\n    Sigma.prototype.getViewportZoomedState = function (viewportTarget, newRatio) {\n        var _a = this.camera.getState(), ratio = _a.ratio, angle = _a.angle, x = _a.x, y = _a.y;\n        // TODO: handle max zoom\n        var ratioDiff = newRatio / ratio;\n        var center = {\n            x: this.width / 2,\n            y: this.height / 2,\n        };\n        var graphMousePosition = this.viewportToFramedGraph(viewportTarget);\n        var graphCenterPosition = this.viewportToFramedGraph(center);\n        return {\n            angle: angle,\n            x: (graphMousePosition.x - graphCenterPosition.x) * (1 - ratioDiff) + x,\n            y: (graphMousePosition.y - graphCenterPosition.y) * (1 - ratioDiff) + y,\n            ratio: newRatio,\n        };\n    };\n    /**\n     * Method returning the abstract rectangle containing the graph according\n     * to the camera's state.\n     *\n     * @return {object} - The view's rectangle.\n     */\n    Sigma.prototype.viewRectangle = function () {\n        // TODO: reduce relative margin?\n        var marginX = (0 * this.width) / 8, marginY = (0 * this.height) / 8;\n        var p1 = this.viewportToFramedGraph({ x: 0 - marginX, y: 0 - marginY }), p2 = this.viewportToFramedGraph({ x: this.width + marginX, y: 0 - marginY }), h = this.viewportToFramedGraph({ x: 0, y: this.height + marginY });\n        return {\n            x1: p1.x,\n            y1: p1.y,\n            x2: p2.x,\n            y2: p2.y,\n            height: p2.y - h.y,\n        };\n    };\n    /**\n     * Method returning the coordinates of a point from the framed graph system to the viewport system. It allows\n     * overriding anything that is used to get the translation matrix, or even the matrix itself.\n     *\n     * Be careful if overriding dimensions, padding or cameraState, as the computation of the matrix is not the lightest\n     * of computations.\n     */\n    Sigma.prototype.framedGraphToViewport = function (coordinates, override) {\n        if (override === void 0) { override = {}; }\n        var recomputeMatrix = !!override.cameraState || !!override.viewportDimensions || !!override.graphDimensions;\n        var matrix = override.matrix\n            ? override.matrix\n            : recomputeMatrix\n                ? (0, utils_1.matrixFromCamera)(override.cameraState || this.camera.getState(), override.viewportDimensions || this.getDimensions(), override.graphDimensions || this.getGraphDimensions(), override.padding || this.getSetting(\"stagePadding\") || 0)\n                : this.matrix;\n        var viewportPos = (0, matrices_1.multiplyVec2)(matrix, coordinates);\n        return {\n            x: ((1 + viewportPos.x) * this.width) / 2,\n            y: ((1 - viewportPos.y) * this.height) / 2,\n        };\n    };\n    /**\n     * Method returning the coordinates of a point from the viewport system to the framed graph system. It allows\n     * overriding anything that is used to get the translation matrix, or even the matrix itself.\n     *\n     * Be careful if overriding dimensions, padding or cameraState, as the computation of the matrix is not the lightest\n     * of computations.\n     */\n    Sigma.prototype.viewportToFramedGraph = function (coordinates, override) {\n        if (override === void 0) { override = {}; }\n        var recomputeMatrix = !!override.cameraState || !!override.viewportDimensions || !override.graphDimensions;\n        var invMatrix = override.matrix\n            ? override.matrix\n            : recomputeMatrix\n                ? (0, utils_1.matrixFromCamera)(override.cameraState || this.camera.getState(), override.viewportDimensions || this.getDimensions(), override.graphDimensions || this.getGraphDimensions(), override.padding || this.getSetting(\"stagePadding\") || 0, true)\n                : this.invMatrix;\n        var res = (0, matrices_1.multiplyVec2)(invMatrix, {\n            x: (coordinates.x / this.width) * 2 - 1,\n            y: 1 - (coordinates.y / this.height) * 2,\n        });\n        if (isNaN(res.x))\n            res.x = 0;\n        if (isNaN(res.y))\n            res.y = 0;\n        return res;\n    };\n    /**\n     * Method used to translate a point's coordinates from the viewport system (pixel distance from the top-left of the\n     * stage) to the graph system (the reference system of data as they are in the given graph instance).\n     *\n     * This method accepts an optional camera which can be useful if you need to translate coordinates\n     * based on a different view than the one being currently being displayed on screen.\n     *\n     * @param {Coordinates}                  viewportPoint\n     * @param {CoordinateConversionOverride} override\n     */\n    Sigma.prototype.viewportToGraph = function (viewportPoint, override) {\n        if (override === void 0) { override = {}; }\n        return this.normalizationFunction.inverse(this.viewportToFramedGraph(viewportPoint, override));\n    };\n    /**\n     * Method used to translate a point's coordinates from the graph system (the reference system of data as they are in\n     * the given graph instance) to the viewport system (pixel distance from the top-left of the stage).\n     *\n     * This method accepts an optional camera which can be useful if you need to translate coordinates\n     * based on a different view than the one being currently being displayed on screen.\n     *\n     * @param {Coordinates}                  graphPoint\n     * @param {CoordinateConversionOverride} override\n     */\n    Sigma.prototype.graphToViewport = function (graphPoint, override) {\n        if (override === void 0) { override = {}; }\n        return this.framedGraphToViewport(this.normalizationFunction(graphPoint), override);\n    };\n    /**\n     * Method returning the graph's bounding box.\n     *\n     * @return {{ x: Extent, y: Extent }}\n     */\n    Sigma.prototype.getBBox = function () {\n        return (0, utils_1.graphExtent)(this.graph);\n    };\n    /**\n     * Method returning the graph's custom bounding box, if any.\n     *\n     * @return {{ x: Extent, y: Extent } | null}\n     */\n    Sigma.prototype.getCustomBBox = function () {\n        return this.customBBox;\n    };\n    /**\n     * Method used to override the graph's bounding box with a custom one. Give `null` as the argument to stop overriding.\n     *\n     * @return {Sigma}\n     */\n    Sigma.prototype.setCustomBBox = function (customBBox) {\n        this.customBBox = customBBox;\n        this._scheduleRefresh();\n        return this;\n    };\n    /**\n     * Method used to shut the container & release event listeners.\n     *\n     * @return {undefined}\n     */\n    Sigma.prototype.kill = function () {\n        var graph = this.graph;\n        // Emitting \"kill\" events so that plugins and such can cleanup\n        this.emit(\"kill\");\n        // Releasing events\n        this.removeAllListeners();\n        // Releasing camera handlers\n        this.camera.removeListener(\"updated\", this.activeListeners.camera);\n        // Releasing DOM events & captors\n        window.removeEventListener(\"resize\", this.activeListeners.handleResize);\n        this.mouseCaptor.kill();\n        this.touchCaptor.kill();\n        // Releasing graph handlers\n        graph.removeListener(\"nodeAdded\", this.activeListeners.dropNodeGraphUpdate);\n        graph.removeListener(\"nodeDropped\", this.activeListeners.graphUpdate);\n        graph.removeListener(\"nodeAttributesUpdated\", this.activeListeners.softGraphUpdate);\n        graph.removeListener(\"eachNodeAttributesUpdated\", this.activeListeners.graphUpdate);\n        graph.removeListener(\"edgeAdded\", this.activeListeners.graphUpdate);\n        graph.removeListener(\"edgeDropped\", this.activeListeners.dropEdgeGraphUpdate);\n        graph.removeListener(\"edgeAttributesUpdated\", this.activeListeners.softGraphUpdate);\n        graph.removeListener(\"eachEdgeAttributesUpdated\", this.activeListeners.graphUpdate);\n        graph.removeListener(\"edgesCleared\", this.activeListeners.clearEdgesGraphUpdate);\n        graph.removeListener(\"cleared\", this.activeListeners.clearGraphUpdate);\n        // Releasing cache & state\n        this.quadtree = new quadtree_1.default();\n        this.nodeDataCache = {};\n        this.edgeDataCache = {};\n        this.nodesWithForcedLabels = [];\n        this.edgesWithForcedLabels = [];\n        this.highlightedNodes.clear();\n        // Clearing frames\n        if (this.renderFrame) {\n            (0, utils_1.cancelFrame)(this.renderFrame);\n            this.renderFrame = null;\n        }\n        if (this.renderHighlightedNodesFrame) {\n            (0, utils_1.cancelFrame)(this.renderHighlightedNodesFrame);\n            this.renderHighlightedNodesFrame = null;\n        }\n        // Destroying canvases\n        var container = this.container;\n        while (container.firstChild)\n            container.removeChild(container.firstChild);\n    };\n    /**\n     * Method used to scale the given size according to the camera's ratio, i.e.\n     * zooming state.\n     *\n     * @param  {number} size - The size to scale (node size, edge thickness etc.).\n     * @return {number}      - The scaled size.\n     */\n    Sigma.prototype.scaleSize = function (size) {\n        return size / this.cameraSizeRatio;\n    };\n    /**\n     * Method that returns the collection of all used canvases.\n     * At the moment, the instantiated canvases are the following, and in the\n     * following order in the DOM:\n     * - `edges`\n     * - `nodes`\n     * - `edgeLabels`\n     * - `labels`\n     * - `hovers`\n     * - `hoverNodes`\n     * - `mouse`\n     *\n     * @return {PlainObject<HTMLCanvasElement>} - The collection of canvases.\n     */\n    Sigma.prototype.getCanvases = function () {\n        return __assign({}, this.elements);\n    };\n    return Sigma;\n}(types_1.TypedEventEmitter));\nexports.default = Sigma;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/sigma/sigma.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":457,"column":0},"generated":{"line":457,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":458,"column":0},"generated":{"line":458,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":459,"column":0},"generated":{"line":459,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":460,"column":0},"generated":{"line":460,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":461,"column":0},"generated":{"line":461,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":462,"column":0},"generated":{"line":462,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":463,"column":0},"generated":{"line":463,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":464,"column":0},"generated":{"line":464,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":465,"column":0},"generated":{"line":465,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":466,"column":0},"generated":{"line":466,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":467,"column":0},"generated":{"line":467,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":468,"column":0},"generated":{"line":468,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":469,"column":0},"generated":{"line":469,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":470,"column":0},"generated":{"line":470,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":471,"column":0},"generated":{"line":471,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":472,"column":0},"generated":{"line":472,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":473,"column":0},"generated":{"line":473,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":474,"column":0},"generated":{"line":474,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":475,"column":0},"generated":{"line":475,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":476,"column":0},"generated":{"line":476,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":477,"column":0},"generated":{"line":477,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":478,"column":0},"generated":{"line":478,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":479,"column":0},"generated":{"line":479,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":480,"column":0},"generated":{"line":480,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":481,"column":0},"generated":{"line":481,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":482,"column":0},"generated":{"line":482,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":483,"column":0},"generated":{"line":483,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":484,"column":0},"generated":{"line":484,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":485,"column":0},"generated":{"line":485,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":486,"column":0},"generated":{"line":486,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":487,"column":0},"generated":{"line":487,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":488,"column":0},"generated":{"line":488,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":489,"column":0},"generated":{"line":489,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":490,"column":0},"generated":{"line":490,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":491,"column":0},"generated":{"line":491,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":492,"column":0},"generated":{"line":492,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":493,"column":0},"generated":{"line":493,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":494,"column":0},"generated":{"line":494,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":495,"column":0},"generated":{"line":495,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":496,"column":0},"generated":{"line":496,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":497,"column":0},"generated":{"line":497,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":498,"column":0},"generated":{"line":498,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":499,"column":0},"generated":{"line":499,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":500,"column":0},"generated":{"line":500,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":501,"column":0},"generated":{"line":501,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":502,"column":0},"generated":{"line":502,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":503,"column":0},"generated":{"line":503,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":504,"column":0},"generated":{"line":504,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":505,"column":0},"generated":{"line":505,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":506,"column":0},"generated":{"line":506,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":507,"column":0},"generated":{"line":507,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":508,"column":0},"generated":{"line":508,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":509,"column":0},"generated":{"line":509,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":510,"column":0},"generated":{"line":510,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":511,"column":0},"generated":{"line":511,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":512,"column":0},"generated":{"line":512,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":513,"column":0},"generated":{"line":513,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":514,"column":0},"generated":{"line":514,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":515,"column":0},"generated":{"line":515,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":516,"column":0},"generated":{"line":516,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":517,"column":0},"generated":{"line":517,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":518,"column":0},"generated":{"line":518,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":519,"column":0},"generated":{"line":519,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":520,"column":0},"generated":{"line":520,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":521,"column":0},"generated":{"line":521,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":522,"column":0},"generated":{"line":522,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":523,"column":0},"generated":{"line":523,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":524,"column":0},"generated":{"line":524,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":525,"column":0},"generated":{"line":525,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":526,"column":0},"generated":{"line":526,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":527,"column":0},"generated":{"line":527,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":528,"column":0},"generated":{"line":528,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":529,"column":0},"generated":{"line":529,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":530,"column":0},"generated":{"line":530,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":531,"column":0},"generated":{"line":531,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":532,"column":0},"generated":{"line":532,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":533,"column":0},"generated":{"line":533,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":534,"column":0},"generated":{"line":534,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":535,"column":0},"generated":{"line":535,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":536,"column":0},"generated":{"line":536,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":537,"column":0},"generated":{"line":537,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":538,"column":0},"generated":{"line":538,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":539,"column":0},"generated":{"line":539,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":540,"column":0},"generated":{"line":540,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":541,"column":0},"generated":{"line":541,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":542,"column":0},"generated":{"line":542,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":543,"column":0},"generated":{"line":543,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":544,"column":0},"generated":{"line":544,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":545,"column":0},"generated":{"line":545,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":546,"column":0},"generated":{"line":546,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":547,"column":0},"generated":{"line":547,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":548,"column":0},"generated":{"line":548,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":549,"column":0},"generated":{"line":549,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":550,"column":0},"generated":{"line":550,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":551,"column":0},"generated":{"line":551,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":552,"column":0},"generated":{"line":552,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":553,"column":0},"generated":{"line":553,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":554,"column":0},"generated":{"line":554,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":555,"column":0},"generated":{"line":555,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":556,"column":0},"generated":{"line":556,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":557,"column":0},"generated":{"line":557,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":558,"column":0},"generated":{"line":558,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":559,"column":0},"generated":{"line":559,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":560,"column":0},"generated":{"line":560,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":561,"column":0},"generated":{"line":561,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":562,"column":0},"generated":{"line":562,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":563,"column":0},"generated":{"line":563,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":564,"column":0},"generated":{"line":564,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":565,"column":0},"generated":{"line":565,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":566,"column":0},"generated":{"line":566,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":567,"column":0},"generated":{"line":567,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":568,"column":0},"generated":{"line":568,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":569,"column":0},"generated":{"line":569,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":570,"column":0},"generated":{"line":570,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":571,"column":0},"generated":{"line":571,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":572,"column":0},"generated":{"line":572,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":573,"column":0},"generated":{"line":573,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":574,"column":0},"generated":{"line":574,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":575,"column":0},"generated":{"line":575,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":576,"column":0},"generated":{"line":576,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":577,"column":0},"generated":{"line":577,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":578,"column":0},"generated":{"line":578,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":579,"column":0},"generated":{"line":579,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":580,"column":0},"generated":{"line":580,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":581,"column":0},"generated":{"line":581,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":582,"column":0},"generated":{"line":582,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":583,"column":0},"generated":{"line":583,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":584,"column":0},"generated":{"line":584,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":585,"column":0},"generated":{"line":585,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":586,"column":0},"generated":{"line":586,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":587,"column":0},"generated":{"line":587,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":588,"column":0},"generated":{"line":588,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":589,"column":0},"generated":{"line":589,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":590,"column":0},"generated":{"line":590,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":591,"column":0},"generated":{"line":591,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":592,"column":0},"generated":{"line":592,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":593,"column":0},"generated":{"line":593,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":594,"column":0},"generated":{"line":594,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":595,"column":0},"generated":{"line":595,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":596,"column":0},"generated":{"line":596,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":597,"column":0},"generated":{"line":597,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":598,"column":0},"generated":{"line":598,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":599,"column":0},"generated":{"line":599,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":600,"column":0},"generated":{"line":600,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":601,"column":0},"generated":{"line":601,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":602,"column":0},"generated":{"line":602,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":603,"column":0},"generated":{"line":603,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":604,"column":0},"generated":{"line":604,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":605,"column":0},"generated":{"line":605,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":606,"column":0},"generated":{"line":606,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":607,"column":0},"generated":{"line":607,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":608,"column":0},"generated":{"line":608,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":609,"column":0},"generated":{"line":609,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":610,"column":0},"generated":{"line":610,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":611,"column":0},"generated":{"line":611,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":612,"column":0},"generated":{"line":612,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":613,"column":0},"generated":{"line":613,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":614,"column":0},"generated":{"line":614,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":615,"column":0},"generated":{"line":615,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":616,"column":0},"generated":{"line":616,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":617,"column":0},"generated":{"line":617,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":618,"column":0},"generated":{"line":618,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":619,"column":0},"generated":{"line":619,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":620,"column":0},"generated":{"line":620,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":621,"column":0},"generated":{"line":621,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":622,"column":0},"generated":{"line":622,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":623,"column":0},"generated":{"line":623,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":624,"column":0},"generated":{"line":624,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":625,"column":0},"generated":{"line":625,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":626,"column":0},"generated":{"line":626,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":627,"column":0},"generated":{"line":627,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":628,"column":0},"generated":{"line":628,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":629,"column":0},"generated":{"line":629,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":630,"column":0},"generated":{"line":630,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":631,"column":0},"generated":{"line":631,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":632,"column":0},"generated":{"line":632,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":633,"column":0},"generated":{"line":633,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":634,"column":0},"generated":{"line":634,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":635,"column":0},"generated":{"line":635,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":636,"column":0},"generated":{"line":636,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":637,"column":0},"generated":{"line":637,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":638,"column":0},"generated":{"line":638,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":639,"column":0},"generated":{"line":639,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":640,"column":0},"generated":{"line":640,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":641,"column":0},"generated":{"line":641,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":642,"column":0},"generated":{"line":642,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":643,"column":0},"generated":{"line":643,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":644,"column":0},"generated":{"line":644,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":645,"column":0},"generated":{"line":645,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":646,"column":0},"generated":{"line":646,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":647,"column":0},"generated":{"line":647,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":648,"column":0},"generated":{"line":648,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":649,"column":0},"generated":{"line":649,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":650,"column":0},"generated":{"line":650,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":651,"column":0},"generated":{"line":651,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":652,"column":0},"generated":{"line":652,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":653,"column":0},"generated":{"line":653,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":654,"column":0},"generated":{"line":654,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":655,"column":0},"generated":{"line":655,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":656,"column":0},"generated":{"line":656,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":657,"column":0},"generated":{"line":657,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":658,"column":0},"generated":{"line":658,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":659,"column":0},"generated":{"line":659,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":660,"column":0},"generated":{"line":660,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":661,"column":0},"generated":{"line":661,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":662,"column":0},"generated":{"line":662,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":663,"column":0},"generated":{"line":663,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":664,"column":0},"generated":{"line":664,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":665,"column":0},"generated":{"line":665,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":666,"column":0},"generated":{"line":666,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":667,"column":0},"generated":{"line":667,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":668,"column":0},"generated":{"line":668,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":669,"column":0},"generated":{"line":669,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":670,"column":0},"generated":{"line":670,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":671,"column":0},"generated":{"line":671,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":672,"column":0},"generated":{"line":672,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":673,"column":0},"generated":{"line":673,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":674,"column":0},"generated":{"line":674,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":675,"column":0},"generated":{"line":675,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":676,"column":0},"generated":{"line":676,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":677,"column":0},"generated":{"line":677,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":678,"column":0},"generated":{"line":678,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":679,"column":0},"generated":{"line":679,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":680,"column":0},"generated":{"line":680,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":681,"column":0},"generated":{"line":681,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":682,"column":0},"generated":{"line":682,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":683,"column":0},"generated":{"line":683,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":684,"column":0},"generated":{"line":684,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":685,"column":0},"generated":{"line":685,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":686,"column":0},"generated":{"line":686,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":687,"column":0},"generated":{"line":687,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":688,"column":0},"generated":{"line":688,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":689,"column":0},"generated":{"line":689,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":690,"column":0},"generated":{"line":690,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":691,"column":0},"generated":{"line":691,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":692,"column":0},"generated":{"line":692,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":693,"column":0},"generated":{"line":693,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":694,"column":0},"generated":{"line":694,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":695,"column":0},"generated":{"line":695,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":696,"column":0},"generated":{"line":696,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":697,"column":0},"generated":{"line":697,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":698,"column":0},"generated":{"line":698,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":699,"column":0},"generated":{"line":699,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":700,"column":0},"generated":{"line":700,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":701,"column":0},"generated":{"line":701,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":702,"column":0},"generated":{"line":702,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":703,"column":0},"generated":{"line":703,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":704,"column":0},"generated":{"line":704,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":705,"column":0},"generated":{"line":705,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":706,"column":0},"generated":{"line":706,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":707,"column":0},"generated":{"line":707,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":708,"column":0},"generated":{"line":708,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":709,"column":0},"generated":{"line":709,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":710,"column":0},"generated":{"line":710,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":711,"column":0},"generated":{"line":711,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":712,"column":0},"generated":{"line":712,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":713,"column":0},"generated":{"line":713,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":714,"column":0},"generated":{"line":714,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":715,"column":0},"generated":{"line":715,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":716,"column":0},"generated":{"line":716,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":717,"column":0},"generated":{"line":717,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":718,"column":0},"generated":{"line":718,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":719,"column":0},"generated":{"line":719,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":720,"column":0},"generated":{"line":720,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":721,"column":0},"generated":{"line":721,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":722,"column":0},"generated":{"line":722,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":723,"column":0},"generated":{"line":723,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":724,"column":0},"generated":{"line":724,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":725,"column":0},"generated":{"line":725,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":726,"column":0},"generated":{"line":726,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":727,"column":0},"generated":{"line":727,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":728,"column":0},"generated":{"line":728,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":729,"column":0},"generated":{"line":729,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":730,"column":0},"generated":{"line":730,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":731,"column":0},"generated":{"line":731,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":732,"column":0},"generated":{"line":732,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":733,"column":0},"generated":{"line":733,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":734,"column":0},"generated":{"line":734,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":735,"column":0},"generated":{"line":735,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":736,"column":0},"generated":{"line":736,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":737,"column":0},"generated":{"line":737,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":738,"column":0},"generated":{"line":738,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":739,"column":0},"generated":{"line":739,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":740,"column":0},"generated":{"line":740,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":741,"column":0},"generated":{"line":741,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":742,"column":0},"generated":{"line":742,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":743,"column":0},"generated":{"line":743,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":744,"column":0},"generated":{"line":744,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":745,"column":0},"generated":{"line":745,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":746,"column":0},"generated":{"line":746,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":747,"column":0},"generated":{"line":747,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":748,"column":0},"generated":{"line":748,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":749,"column":0},"generated":{"line":749,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":750,"column":0},"generated":{"line":750,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":751,"column":0},"generated":{"line":751,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":752,"column":0},"generated":{"line":752,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":753,"column":0},"generated":{"line":753,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":754,"column":0},"generated":{"line":754,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":755,"column":0},"generated":{"line":755,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":756,"column":0},"generated":{"line":756,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":757,"column":0},"generated":{"line":757,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":758,"column":0},"generated":{"line":758,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":759,"column":0},"generated":{"line":759,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":760,"column":0},"generated":{"line":760,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":761,"column":0},"generated":{"line":761,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":762,"column":0},"generated":{"line":762,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":763,"column":0},"generated":{"line":763,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":764,"column":0},"generated":{"line":764,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":765,"column":0},"generated":{"line":765,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":766,"column":0},"generated":{"line":766,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":767,"column":0},"generated":{"line":767,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":768,"column":0},"generated":{"line":768,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":769,"column":0},"generated":{"line":769,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":770,"column":0},"generated":{"line":770,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":771,"column":0},"generated":{"line":771,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":772,"column":0},"generated":{"line":772,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":773,"column":0},"generated":{"line":773,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":774,"column":0},"generated":{"line":774,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":775,"column":0},"generated":{"line":775,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":776,"column":0},"generated":{"line":776,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":777,"column":0},"generated":{"line":777,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":778,"column":0},"generated":{"line":778,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":779,"column":0},"generated":{"line":779,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":780,"column":0},"generated":{"line":780,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":781,"column":0},"generated":{"line":781,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":782,"column":0},"generated":{"line":782,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":783,"column":0},"generated":{"line":783,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":784,"column":0},"generated":{"line":784,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":785,"column":0},"generated":{"line":785,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":786,"column":0},"generated":{"line":786,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":787,"column":0},"generated":{"line":787,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":788,"column":0},"generated":{"line":788,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":789,"column":0},"generated":{"line":789,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":790,"column":0},"generated":{"line":790,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":791,"column":0},"generated":{"line":791,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":792,"column":0},"generated":{"line":792,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":793,"column":0},"generated":{"line":793,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":794,"column":0},"generated":{"line":794,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":795,"column":0},"generated":{"line":795,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":796,"column":0},"generated":{"line":796,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":797,"column":0},"generated":{"line":797,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":798,"column":0},"generated":{"line":798,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":799,"column":0},"generated":{"line":799,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":800,"column":0},"generated":{"line":800,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":801,"column":0},"generated":{"line":801,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":802,"column":0},"generated":{"line":802,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":803,"column":0},"generated":{"line":803,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":804,"column":0},"generated":{"line":804,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":805,"column":0},"generated":{"line":805,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":806,"column":0},"generated":{"line":806,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":807,"column":0},"generated":{"line":807,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":808,"column":0},"generated":{"line":808,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":809,"column":0},"generated":{"line":809,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":810,"column":0},"generated":{"line":810,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":811,"column":0},"generated":{"line":811,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":812,"column":0},"generated":{"line":812,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":813,"column":0},"generated":{"line":813,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":814,"column":0},"generated":{"line":814,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":815,"column":0},"generated":{"line":815,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":816,"column":0},"generated":{"line":816,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":817,"column":0},"generated":{"line":817,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":818,"column":0},"generated":{"line":818,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":819,"column":0},"generated":{"line":819,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":820,"column":0},"generated":{"line":820,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":821,"column":0},"generated":{"line":821,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":822,"column":0},"generated":{"line":822,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":823,"column":0},"generated":{"line":823,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":824,"column":0},"generated":{"line":824,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":825,"column":0},"generated":{"line":825,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":826,"column":0},"generated":{"line":826,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":827,"column":0},"generated":{"line":827,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":828,"column":0},"generated":{"line":828,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":829,"column":0},"generated":{"line":829,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":830,"column":0},"generated":{"line":830,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":831,"column":0},"generated":{"line":831,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":832,"column":0},"generated":{"line":832,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":833,"column":0},"generated":{"line":833,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":834,"column":0},"generated":{"line":834,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":835,"column":0},"generated":{"line":835,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":836,"column":0},"generated":{"line":836,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":837,"column":0},"generated":{"line":837,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":838,"column":0},"generated":{"line":838,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":839,"column":0},"generated":{"line":839,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":840,"column":0},"generated":{"line":840,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":841,"column":0},"generated":{"line":841,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":842,"column":0},"generated":{"line":842,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":843,"column":0},"generated":{"line":843,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":844,"column":0},"generated":{"line":844,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":845,"column":0},"generated":{"line":845,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":846,"column":0},"generated":{"line":846,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":847,"column":0},"generated":{"line":847,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":848,"column":0},"generated":{"line":848,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":849,"column":0},"generated":{"line":849,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":850,"column":0},"generated":{"line":850,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":851,"column":0},"generated":{"line":851,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":852,"column":0},"generated":{"line":852,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":853,"column":0},"generated":{"line":853,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":854,"column":0},"generated":{"line":854,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":855,"column":0},"generated":{"line":855,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":856,"column":0},"generated":{"line":856,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":857,"column":0},"generated":{"line":857,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":858,"column":0},"generated":{"line":858,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":859,"column":0},"generated":{"line":859,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":860,"column":0},"generated":{"line":860,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":861,"column":0},"generated":{"line":861,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":862,"column":0},"generated":{"line":862,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":863,"column":0},"generated":{"line":863,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":864,"column":0},"generated":{"line":864,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":865,"column":0},"generated":{"line":865,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":866,"column":0},"generated":{"line":866,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":867,"column":0},"generated":{"line":867,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":868,"column":0},"generated":{"line":868,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":869,"column":0},"generated":{"line":869,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":870,"column":0},"generated":{"line":870,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":871,"column":0},"generated":{"line":871,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":872,"column":0},"generated":{"line":872,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":873,"column":0},"generated":{"line":873,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":874,"column":0},"generated":{"line":874,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":875,"column":0},"generated":{"line":875,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":876,"column":0},"generated":{"line":876,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":877,"column":0},"generated":{"line":877,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":878,"column":0},"generated":{"line":878,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":879,"column":0},"generated":{"line":879,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":880,"column":0},"generated":{"line":880,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":881,"column":0},"generated":{"line":881,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":882,"column":0},"generated":{"line":882,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":883,"column":0},"generated":{"line":883,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":884,"column":0},"generated":{"line":884,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":885,"column":0},"generated":{"line":885,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":886,"column":0},"generated":{"line":886,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":887,"column":0},"generated":{"line":887,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":888,"column":0},"generated":{"line":888,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":889,"column":0},"generated":{"line":889,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":890,"column":0},"generated":{"line":890,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":891,"column":0},"generated":{"line":891,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":892,"column":0},"generated":{"line":892,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":893,"column":0},"generated":{"line":893,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":894,"column":0},"generated":{"line":894,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":895,"column":0},"generated":{"line":895,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":896,"column":0},"generated":{"line":896,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":897,"column":0},"generated":{"line":897,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":898,"column":0},"generated":{"line":898,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":899,"column":0},"generated":{"line":899,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":900,"column":0},"generated":{"line":900,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":901,"column":0},"generated":{"line":901,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":902,"column":0},"generated":{"line":902,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":903,"column":0},"generated":{"line":903,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":904,"column":0},"generated":{"line":904,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":905,"column":0},"generated":{"line":905,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":906,"column":0},"generated":{"line":906,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":907,"column":0},"generated":{"line":907,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":908,"column":0},"generated":{"line":908,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":909,"column":0},"generated":{"line":909,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":910,"column":0},"generated":{"line":910,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":911,"column":0},"generated":{"line":911,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":912,"column":0},"generated":{"line":912,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":913,"column":0},"generated":{"line":913,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":914,"column":0},"generated":{"line":914,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":915,"column":0},"generated":{"line":915,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":916,"column":0},"generated":{"line":916,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":917,"column":0},"generated":{"line":917,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":918,"column":0},"generated":{"line":918,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":919,"column":0},"generated":{"line":919,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":920,"column":0},"generated":{"line":920,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":921,"column":0},"generated":{"line":921,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":922,"column":0},"generated":{"line":922,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":923,"column":0},"generated":{"line":923,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":924,"column":0},"generated":{"line":924,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":925,"column":0},"generated":{"line":925,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":926,"column":0},"generated":{"line":926,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":927,"column":0},"generated":{"line":927,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":928,"column":0},"generated":{"line":928,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":929,"column":0},"generated":{"line":929,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":930,"column":0},"generated":{"line":930,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":931,"column":0},"generated":{"line":931,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":932,"column":0},"generated":{"line":932,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":933,"column":0},"generated":{"line":933,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":934,"column":0},"generated":{"line":934,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":935,"column":0},"generated":{"line":935,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":936,"column":0},"generated":{"line":936,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":937,"column":0},"generated":{"line":937,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":938,"column":0},"generated":{"line":938,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":939,"column":0},"generated":{"line":939,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":940,"column":0},"generated":{"line":940,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":941,"column":0},"generated":{"line":941,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":942,"column":0},"generated":{"line":942,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":943,"column":0},"generated":{"line":943,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":944,"column":0},"generated":{"line":944,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":945,"column":0},"generated":{"line":945,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":946,"column":0},"generated":{"line":946,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":947,"column":0},"generated":{"line":947,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":948,"column":0},"generated":{"line":948,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":949,"column":0},"generated":{"line":949,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":950,"column":0},"generated":{"line":950,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":951,"column":0},"generated":{"line":951,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":952,"column":0},"generated":{"line":952,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":953,"column":0},"generated":{"line":953,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":954,"column":0},"generated":{"line":954,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":955,"column":0},"generated":{"line":955,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":956,"column":0},"generated":{"line":956,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":957,"column":0},"generated":{"line":957,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":958,"column":0},"generated":{"line":958,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":959,"column":0},"generated":{"line":959,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":960,"column":0},"generated":{"line":960,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":961,"column":0},"generated":{"line":961,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":962,"column":0},"generated":{"line":962,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":963,"column":0},"generated":{"line":963,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":964,"column":0},"generated":{"line":964,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":965,"column":0},"generated":{"line":965,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":966,"column":0},"generated":{"line":966,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":967,"column":0},"generated":{"line":967,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":968,"column":0},"generated":{"line":968,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":969,"column":0},"generated":{"line":969,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":970,"column":0},"generated":{"line":970,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":971,"column":0},"generated":{"line":971,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":972,"column":0},"generated":{"line":972,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":973,"column":0},"generated":{"line":973,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":974,"column":0},"generated":{"line":974,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":975,"column":0},"generated":{"line":975,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":976,"column":0},"generated":{"line":976,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":977,"column":0},"generated":{"line":977,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":978,"column":0},"generated":{"line":978,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":979,"column":0},"generated":{"line":979,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":980,"column":0},"generated":{"line":980,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":981,"column":0},"generated":{"line":981,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":982,"column":0},"generated":{"line":982,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":983,"column":0},"generated":{"line":983,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":984,"column":0},"generated":{"line":984,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":985,"column":0},"generated":{"line":985,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":986,"column":0},"generated":{"line":986,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":987,"column":0},"generated":{"line":987,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":988,"column":0},"generated":{"line":988,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":989,"column":0},"generated":{"line":989,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":990,"column":0},"generated":{"line":990,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":991,"column":0},"generated":{"line":991,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":992,"column":0},"generated":{"line":992,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":993,"column":0},"generated":{"line":993,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":994,"column":0},"generated":{"line":994,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":995,"column":0},"generated":{"line":995,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":996,"column":0},"generated":{"line":996,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":997,"column":0},"generated":{"line":997,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":998,"column":0},"generated":{"line":998,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":999,"column":0},"generated":{"line":999,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1000,"column":0},"generated":{"line":1000,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1001,"column":0},"generated":{"line":1001,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1002,"column":0},"generated":{"line":1002,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1003,"column":0},"generated":{"line":1003,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1004,"column":0},"generated":{"line":1004,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1005,"column":0},"generated":{"line":1005,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1006,"column":0},"generated":{"line":1006,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1007,"column":0},"generated":{"line":1007,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1008,"column":0},"generated":{"line":1008,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1009,"column":0},"generated":{"line":1009,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1010,"column":0},"generated":{"line":1010,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1011,"column":0},"generated":{"line":1011,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1012,"column":0},"generated":{"line":1012,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1013,"column":0},"generated":{"line":1013,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1014,"column":0},"generated":{"line":1014,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1015,"column":0},"generated":{"line":1015,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1016,"column":0},"generated":{"line":1016,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1017,"column":0},"generated":{"line":1017,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1018,"column":0},"generated":{"line":1018,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1019,"column":0},"generated":{"line":1019,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1020,"column":0},"generated":{"line":1020,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1021,"column":0},"generated":{"line":1021,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1022,"column":0},"generated":{"line":1022,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1023,"column":0},"generated":{"line":1023,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1024,"column":0},"generated":{"line":1024,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1025,"column":0},"generated":{"line":1025,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1026,"column":0},"generated":{"line":1026,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1027,"column":0},"generated":{"line":1027,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1028,"column":0},"generated":{"line":1028,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1029,"column":0},"generated":{"line":1029,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1030,"column":0},"generated":{"line":1030,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1031,"column":0},"generated":{"line":1031,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1032,"column":0},"generated":{"line":1032,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1033,"column":0},"generated":{"line":1033,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1034,"column":0},"generated":{"line":1034,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1035,"column":0},"generated":{"line":1035,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1036,"column":0},"generated":{"line":1036,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1037,"column":0},"generated":{"line":1037,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1038,"column":0},"generated":{"line":1038,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1039,"column":0},"generated":{"line":1039,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1040,"column":0},"generated":{"line":1040,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1041,"column":0},"generated":{"line":1041,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1042,"column":0},"generated":{"line":1042,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1043,"column":0},"generated":{"line":1043,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1044,"column":0},"generated":{"line":1044,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1045,"column":0},"generated":{"line":1045,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1046,"column":0},"generated":{"line":1046,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1047,"column":0},"generated":{"line":1047,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1048,"column":0},"generated":{"line":1048,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1049,"column":0},"generated":{"line":1049,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1050,"column":0},"generated":{"line":1050,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1051,"column":0},"generated":{"line":1051,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1052,"column":0},"generated":{"line":1052,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1053,"column":0},"generated":{"line":1053,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1054,"column":0},"generated":{"line":1054,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1055,"column":0},"generated":{"line":1055,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1056,"column":0},"generated":{"line":1056,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1057,"column":0},"generated":{"line":1057,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1058,"column":0},"generated":{"line":1058,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1059,"column":0},"generated":{"line":1059,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1060,"column":0},"generated":{"line":1060,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1061,"column":0},"generated":{"line":1061,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1062,"column":0},"generated":{"line":1062,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1063,"column":0},"generated":{"line":1063,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1064,"column":0},"generated":{"line":1064,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1065,"column":0},"generated":{"line":1065,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1066,"column":0},"generated":{"line":1066,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1067,"column":0},"generated":{"line":1067,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1068,"column":0},"generated":{"line":1068,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1069,"column":0},"generated":{"line":1069,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1070,"column":0},"generated":{"line":1070,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1071,"column":0},"generated":{"line":1071,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1072,"column":0},"generated":{"line":1072,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1073,"column":0},"generated":{"line":1073,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1074,"column":0},"generated":{"line":1074,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1075,"column":0},"generated":{"line":1075,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1076,"column":0},"generated":{"line":1076,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1077,"column":0},"generated":{"line":1077,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1078,"column":0},"generated":{"line":1078,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1079,"column":0},"generated":{"line":1079,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1080,"column":0},"generated":{"line":1080,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1081,"column":0},"generated":{"line":1081,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1082,"column":0},"generated":{"line":1082,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1083,"column":0},"generated":{"line":1083,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1084,"column":0},"generated":{"line":1084,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1085,"column":0},"generated":{"line":1085,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1086,"column":0},"generated":{"line":1086,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1087,"column":0},"generated":{"line":1087,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1088,"column":0},"generated":{"line":1088,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1089,"column":0},"generated":{"line":1089,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1090,"column":0},"generated":{"line":1090,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1091,"column":0},"generated":{"line":1091,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1092,"column":0},"generated":{"line":1092,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1093,"column":0},"generated":{"line":1093,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1094,"column":0},"generated":{"line":1094,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1095,"column":0},"generated":{"line":1095,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1096,"column":0},"generated":{"line":1096,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1097,"column":0},"generated":{"line":1097,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1098,"column":0},"generated":{"line":1098,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1099,"column":0},"generated":{"line":1099,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1100,"column":0},"generated":{"line":1100,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1101,"column":0},"generated":{"line":1101,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1102,"column":0},"generated":{"line":1102,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1103,"column":0},"generated":{"line":1103,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1104,"column":0},"generated":{"line":1104,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1105,"column":0},"generated":{"line":1105,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1106,"column":0},"generated":{"line":1106,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1107,"column":0},"generated":{"line":1107,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1108,"column":0},"generated":{"line":1108,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1109,"column":0},"generated":{"line":1109,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1110,"column":0},"generated":{"line":1110,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1111,"column":0},"generated":{"line":1111,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1112,"column":0},"generated":{"line":1112,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1113,"column":0},"generated":{"line":1113,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1114,"column":0},"generated":{"line":1114,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1115,"column":0},"generated":{"line":1115,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1116,"column":0},"generated":{"line":1116,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1117,"column":0},"generated":{"line":1117,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1118,"column":0},"generated":{"line":1118,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1119,"column":0},"generated":{"line":1119,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1120,"column":0},"generated":{"line":1120,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1121,"column":0},"generated":{"line":1121,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1122,"column":0},"generated":{"line":1122,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1123,"column":0},"generated":{"line":1123,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1124,"column":0},"generated":{"line":1124,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1125,"column":0},"generated":{"line":1125,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1126,"column":0},"generated":{"line":1126,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1127,"column":0},"generated":{"line":1127,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1128,"column":0},"generated":{"line":1128,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1129,"column":0},"generated":{"line":1129,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1130,"column":0},"generated":{"line":1130,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1131,"column":0},"generated":{"line":1131,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1132,"column":0},"generated":{"line":1132,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1133,"column":0},"generated":{"line":1133,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1134,"column":0},"generated":{"line":1134,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1135,"column":0},"generated":{"line":1135,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1136,"column":0},"generated":{"line":1136,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1137,"column":0},"generated":{"line":1137,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1138,"column":0},"generated":{"line":1138,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1139,"column":0},"generated":{"line":1139,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1140,"column":0},"generated":{"line":1140,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1141,"column":0},"generated":{"line":1141,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1142,"column":0},"generated":{"line":1142,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1143,"column":0},"generated":{"line":1143,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1144,"column":0},"generated":{"line":1144,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1145,"column":0},"generated":{"line":1145,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1146,"column":0},"generated":{"line":1146,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1147,"column":0},"generated":{"line":1147,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1148,"column":0},"generated":{"line":1148,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1149,"column":0},"generated":{"line":1149,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1150,"column":0},"generated":{"line":1150,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1151,"column":0},"generated":{"line":1151,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1152,"column":0},"generated":{"line":1152,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1153,"column":0},"generated":{"line":1153,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1154,"column":0},"generated":{"line":1154,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1155,"column":0},"generated":{"line":1155,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1156,"column":0},"generated":{"line":1156,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1157,"column":0},"generated":{"line":1157,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1158,"column":0},"generated":{"line":1158,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1159,"column":0},"generated":{"line":1159,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1160,"column":0},"generated":{"line":1160,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1161,"column":0},"generated":{"line":1161,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1162,"column":0},"generated":{"line":1162,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1163,"column":0},"generated":{"line":1163,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1164,"column":0},"generated":{"line":1164,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1165,"column":0},"generated":{"line":1165,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1166,"column":0},"generated":{"line":1166,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1167,"column":0},"generated":{"line":1167,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1168,"column":0},"generated":{"line":1168,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1169,"column":0},"generated":{"line":1169,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1170,"column":0},"generated":{"line":1170,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1171,"column":0},"generated":{"line":1171,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1172,"column":0},"generated":{"line":1172,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1173,"column":0},"generated":{"line":1173,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1174,"column":0},"generated":{"line":1174,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1175,"column":0},"generated":{"line":1175,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1176,"column":0},"generated":{"line":1176,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1177,"column":0},"generated":{"line":1177,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1178,"column":0},"generated":{"line":1178,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1179,"column":0},"generated":{"line":1179,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1180,"column":0},"generated":{"line":1180,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1181,"column":0},"generated":{"line":1181,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1182,"column":0},"generated":{"line":1182,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1183,"column":0},"generated":{"line":1183,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1184,"column":0},"generated":{"line":1184,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1185,"column":0},"generated":{"line":1185,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1186,"column":0},"generated":{"line":1186,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1187,"column":0},"generated":{"line":1187,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1188,"column":0},"generated":{"line":1188,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1189,"column":0},"generated":{"line":1189,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1190,"column":0},"generated":{"line":1190,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1191,"column":0},"generated":{"line":1191,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1192,"column":0},"generated":{"line":1192,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1193,"column":0},"generated":{"line":1193,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1194,"column":0},"generated":{"line":1194,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1195,"column":0},"generated":{"line":1195,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1196,"column":0},"generated":{"line":1196,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1197,"column":0},"generated":{"line":1197,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1198,"column":0},"generated":{"line":1198,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1199,"column":0},"generated":{"line":1199,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1200,"column":0},"generated":{"line":1200,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1201,"column":0},"generated":{"line":1201,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1202,"column":0},"generated":{"line":1202,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1203,"column":0},"generated":{"line":1203,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1204,"column":0},"generated":{"line":1204,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1205,"column":0},"generated":{"line":1205,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1206,"column":0},"generated":{"line":1206,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1207,"column":0},"generated":{"line":1207,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1208,"column":0},"generated":{"line":1208,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1209,"column":0},"generated":{"line":1209,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1210,"column":0},"generated":{"line":1210,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1211,"column":0},"generated":{"line":1211,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1212,"column":0},"generated":{"line":1212,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1213,"column":0},"generated":{"line":1213,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1214,"column":0},"generated":{"line":1214,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1215,"column":0},"generated":{"line":1215,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1216,"column":0},"generated":{"line":1216,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1217,"column":0},"generated":{"line":1217,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1218,"column":0},"generated":{"line":1218,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1219,"column":0},"generated":{"line":1219,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1220,"column":0},"generated":{"line":1220,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1221,"column":0},"generated":{"line":1221,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1222,"column":0},"generated":{"line":1222,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1223,"column":0},"generated":{"line":1223,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1224,"column":0},"generated":{"line":1224,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1225,"column":0},"generated":{"line":1225,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1226,"column":0},"generated":{"line":1226,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1227,"column":0},"generated":{"line":1227,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1228,"column":0},"generated":{"line":1228,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1229,"column":0},"generated":{"line":1229,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1230,"column":0},"generated":{"line":1230,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1231,"column":0},"generated":{"line":1231,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1232,"column":0},"generated":{"line":1232,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1233,"column":0},"generated":{"line":1233,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1234,"column":0},"generated":{"line":1234,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1235,"column":0},"generated":{"line":1235,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1236,"column":0},"generated":{"line":1236,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1237,"column":0},"generated":{"line":1237,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1238,"column":0},"generated":{"line":1238,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1239,"column":0},"generated":{"line":1239,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1240,"column":0},"generated":{"line":1240,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1241,"column":0},"generated":{"line":1241,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1242,"column":0},"generated":{"line":1242,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1243,"column":0},"generated":{"line":1243,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1244,"column":0},"generated":{"line":1244,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1245,"column":0},"generated":{"line":1245,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1246,"column":0},"generated":{"line":1246,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1247,"column":0},"generated":{"line":1247,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1248,"column":0},"generated":{"line":1248,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1249,"column":0},"generated":{"line":1249,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1250,"column":0},"generated":{"line":1250,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1251,"column":0},"generated":{"line":1251,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1252,"column":0},"generated":{"line":1252,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1253,"column":0},"generated":{"line":1253,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1254,"column":0},"generated":{"line":1254,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1255,"column":0},"generated":{"line":1255,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1256,"column":0},"generated":{"line":1256,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1257,"column":0},"generated":{"line":1257,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1258,"column":0},"generated":{"line":1258,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1259,"column":0},"generated":{"line":1259,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1260,"column":0},"generated":{"line":1260,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1261,"column":0},"generated":{"line":1261,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1262,"column":0},"generated":{"line":1262,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1263,"column":0},"generated":{"line":1263,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1264,"column":0},"generated":{"line":1264,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1265,"column":0},"generated":{"line":1265,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1266,"column":0},"generated":{"line":1266,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1267,"column":0},"generated":{"line":1267,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1268,"column":0},"generated":{"line":1268,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1269,"column":0},"generated":{"line":1269,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1270,"column":0},"generated":{"line":1270,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1271,"column":0},"generated":{"line":1271,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1272,"column":0},"generated":{"line":1272,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1273,"column":0},"generated":{"line":1273,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1274,"column":0},"generated":{"line":1274,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1275,"column":0},"generated":{"line":1275,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1276,"column":0},"generated":{"line":1276,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1277,"column":0},"generated":{"line":1277,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1278,"column":0},"generated":{"line":1278,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1279,"column":0},"generated":{"line":1279,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1280,"column":0},"generated":{"line":1280,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1281,"column":0},"generated":{"line":1281,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1282,"column":0},"generated":{"line":1282,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1283,"column":0},"generated":{"line":1283,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1284,"column":0},"generated":{"line":1284,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1285,"column":0},"generated":{"line":1285,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1286,"column":0},"generated":{"line":1286,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1287,"column":0},"generated":{"line":1287,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1288,"column":0},"generated":{"line":1288,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1289,"column":0},"generated":{"line":1289,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1290,"column":0},"generated":{"line":1290,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1291,"column":0},"generated":{"line":1291,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1292,"column":0},"generated":{"line":1292,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1293,"column":0},"generated":{"line":1293,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1294,"column":0},"generated":{"line":1294,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1295,"column":0},"generated":{"line":1295,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1296,"column":0},"generated":{"line":1296,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1297,"column":0},"generated":{"line":1297,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1298,"column":0},"generated":{"line":1298,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1299,"column":0},"generated":{"line":1299,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1300,"column":0},"generated":{"line":1300,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1301,"column":0},"generated":{"line":1301,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1302,"column":0},"generated":{"line":1302,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1303,"column":0},"generated":{"line":1303,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1304,"column":0},"generated":{"line":1304,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1305,"column":0},"generated":{"line":1305,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1306,"column":0},"generated":{"line":1306,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1307,"column":0},"generated":{"line":1307,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1308,"column":0},"generated":{"line":1308,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1309,"column":0},"generated":{"line":1309,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1310,"column":0},"generated":{"line":1310,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1311,"column":0},"generated":{"line":1311,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1312,"column":0},"generated":{"line":1312,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1313,"column":0},"generated":{"line":1313,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1314,"column":0},"generated":{"line":1314,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1315,"column":0},"generated":{"line":1315,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1316,"column":0},"generated":{"line":1316,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1317,"column":0},"generated":{"line":1317,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1318,"column":0},"generated":{"line":1318,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1319,"column":0},"generated":{"line":1319,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1320,"column":0},"generated":{"line":1320,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1321,"column":0},"generated":{"line":1321,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1322,"column":0},"generated":{"line":1322,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1323,"column":0},"generated":{"line":1323,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1324,"column":0},"generated":{"line":1324,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1325,"column":0},"generated":{"line":1325,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1326,"column":0},"generated":{"line":1326,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1327,"column":0},"generated":{"line":1327,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1328,"column":0},"generated":{"line":1328,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1329,"column":0},"generated":{"line":1329,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1330,"column":0},"generated":{"line":1330,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1331,"column":0},"generated":{"line":1331,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1332,"column":0},"generated":{"line":1332,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1333,"column":0},"generated":{"line":1333,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1334,"column":0},"generated":{"line":1334,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1335,"column":0},"generated":{"line":1335,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1336,"column":0},"generated":{"line":1336,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1337,"column":0},"generated":{"line":1337,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1338,"column":0},"generated":{"line":1338,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1339,"column":0},"generated":{"line":1339,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1340,"column":0},"generated":{"line":1340,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1341,"column":0},"generated":{"line":1341,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1342,"column":0},"generated":{"line":1342,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1343,"column":0},"generated":{"line":1343,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1344,"column":0},"generated":{"line":1344,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1345,"column":0},"generated":{"line":1345,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1346,"column":0},"generated":{"line":1346,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1347,"column":0},"generated":{"line":1347,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1348,"column":0},"generated":{"line":1348,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1349,"column":0},"generated":{"line":1349,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1350,"column":0},"generated":{"line":1350,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1351,"column":0},"generated":{"line":1351,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1352,"column":0},"generated":{"line":1352,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1353,"column":0},"generated":{"line":1353,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1354,"column":0},"generated":{"line":1354,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1355,"column":0},"generated":{"line":1355,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1356,"column":0},"generated":{"line":1356,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1357,"column":0},"generated":{"line":1357,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1358,"column":0},"generated":{"line":1358,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1359,"column":0},"generated":{"line":1359,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1360,"column":0},"generated":{"line":1360,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1361,"column":0},"generated":{"line":1361,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1362,"column":0},"generated":{"line":1362,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1363,"column":0},"generated":{"line":1363,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1364,"column":0},"generated":{"line":1364,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1365,"column":0},"generated":{"line":1365,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1366,"column":0},"generated":{"line":1366,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1367,"column":0},"generated":{"line":1367,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1368,"column":0},"generated":{"line":1368,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1369,"column":0},"generated":{"line":1369,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1370,"column":0},"generated":{"line":1370,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1371,"column":0},"generated":{"line":1371,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1372,"column":0},"generated":{"line":1372,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1373,"column":0},"generated":{"line":1373,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1374,"column":0},"generated":{"line":1374,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1375,"column":0},"generated":{"line":1375,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1376,"column":0},"generated":{"line":1376,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1377,"column":0},"generated":{"line":1377,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1378,"column":0},"generated":{"line":1378,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1379,"column":0},"generated":{"line":1379,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1380,"column":0},"generated":{"line":1380,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1381,"column":0},"generated":{"line":1381,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1382,"column":0},"generated":{"line":1382,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1383,"column":0},"generated":{"line":1383,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1384,"column":0},"generated":{"line":1384,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1385,"column":0},"generated":{"line":1385,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1386,"column":0},"generated":{"line":1386,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1387,"column":0},"generated":{"line":1387,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1388,"column":0},"generated":{"line":1388,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1389,"column":0},"generated":{"line":1389,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1390,"column":0},"generated":{"line":1390,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1391,"column":0},"generated":{"line":1391,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1392,"column":0},"generated":{"line":1392,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1393,"column":0},"generated":{"line":1393,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1394,"column":0},"generated":{"line":1394,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1395,"column":0},"generated":{"line":1395,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1396,"column":0},"generated":{"line":1396,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1397,"column":0},"generated":{"line":1397,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1398,"column":0},"generated":{"line":1398,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1399,"column":0},"generated":{"line":1399,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1400,"column":0},"generated":{"line":1400,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1401,"column":0},"generated":{"line":1401,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1402,"column":0},"generated":{"line":1402,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1403,"column":0},"generated":{"line":1403,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1404,"column":0},"generated":{"line":1404,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1405,"column":0},"generated":{"line":1405,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1406,"column":0},"generated":{"line":1406,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1407,"column":0},"generated":{"line":1407,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1408,"column":0},"generated":{"line":1408,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1409,"column":0},"generated":{"line":1409,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1410,"column":0},"generated":{"line":1410,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1411,"column":0},"generated":{"line":1411,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1412,"column":0},"generated":{"line":1412,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1413,"column":0},"generated":{"line":1413,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1414,"column":0},"generated":{"line":1414,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1415,"column":0},"generated":{"line":1415,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1416,"column":0},"generated":{"line":1416,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1417,"column":0},"generated":{"line":1417,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1418,"column":0},"generated":{"line":1418,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1419,"column":0},"generated":{"line":1419,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1420,"column":0},"generated":{"line":1420,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1421,"column":0},"generated":{"line":1421,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1422,"column":0},"generated":{"line":1422,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1423,"column":0},"generated":{"line":1423,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1424,"column":0},"generated":{"line":1424,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1425,"column":0},"generated":{"line":1425,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1426,"column":0},"generated":{"line":1426,"column":0}},{"source":"node_modules/sigma/sigma.js","original":{"line":1427,"column":0},"generated":{"line":1427,"column":0}}],"sources":{"node_modules/sigma/sigma.js":"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar camera_1 = __importDefault(require(\"./core/camera\"));\nvar mouse_1 = __importDefault(require(\"./core/captors/mouse\"));\nvar quadtree_1 = __importDefault(require(\"./core/quadtree\"));\nvar types_1 = require(\"./types\");\nvar utils_1 = require(\"./utils\");\nvar labels_1 = require(\"./core/labels\");\nvar settings_1 = require(\"./settings\");\nvar touch_1 = __importDefault(require(\"./core/captors/touch\"));\nvar matrices_1 = require(\"./utils/matrices\");\nvar edge_collisions_1 = require(\"./utils/edge-collisions\");\n/**\n * Important functions.\n */\nfunction applyNodeDefaults(settings, key, data) {\n    if (!data.hasOwnProperty(\"x\") || !data.hasOwnProperty(\"y\"))\n        throw new Error(\"Sigma: could not find a valid position (x, y) for node \\\"\".concat(key, \"\\\". All your nodes must have a number \\\"x\\\" and \\\"y\\\". Maybe your forgot to apply a layout or your \\\"nodeReducer\\\" is not returning the correct data?\"));\n    if (!data.color)\n        data.color = settings.defaultNodeColor;\n    if (!data.label && data.label !== \"\")\n        data.label = null;\n    if (data.label !== undefined && data.label !== null)\n        data.label = \"\" + data.label;\n    else\n        data.label = null;\n    if (!data.size)\n        data.size = 2;\n    if (!data.hasOwnProperty(\"hidden\"))\n        data.hidden = false;\n    if (!data.hasOwnProperty(\"highlighted\"))\n        data.highlighted = false;\n    if (!data.hasOwnProperty(\"forceLabel\"))\n        data.forceLabel = false;\n    if (!data.type || data.type === \"\")\n        data.type = settings.defaultNodeType;\n    if (!data.zIndex)\n        data.zIndex = 0;\n    return data;\n}\nfunction applyEdgeDefaults(settings, key, data) {\n    if (!data.color)\n        data.color = settings.defaultEdgeColor;\n    if (!data.label)\n        data.label = \"\";\n    if (!data.size)\n        data.size = 0.5;\n    if (!data.hasOwnProperty(\"hidden\"))\n        data.hidden = false;\n    if (!data.hasOwnProperty(\"forceLabel\"))\n        data.forceLabel = false;\n    if (!data.type || data.type === \"\")\n        data.type = settings.defaultEdgeType;\n    if (!data.zIndex)\n        data.zIndex = 0;\n    return data;\n}\n/**\n * Main class.\n *\n * @constructor\n * @param {Graph}       graph     - Graph to render.\n * @param {HTMLElement} container - DOM container in which to render.\n * @param {object}      settings  - Optional settings.\n */\nvar Sigma = /** @class */ (function (_super) {\n    __extends(Sigma, _super);\n    function Sigma(graph, container, settings) {\n        if (settings === void 0) { settings = {}; }\n        var _this = _super.call(this) || this;\n        _this.elements = {};\n        _this.canvasContexts = {};\n        _this.webGLContexts = {};\n        _this.activeListeners = {};\n        _this.quadtree = new quadtree_1.default();\n        _this.labelGrid = new labels_1.LabelGrid();\n        _this.nodeDataCache = {};\n        _this.edgeDataCache = {};\n        _this.nodesWithForcedLabels = [];\n        _this.edgesWithForcedLabels = [];\n        _this.nodeExtent = { x: [0, 1], y: [0, 1] };\n        _this.matrix = (0, matrices_1.identity)();\n        _this.invMatrix = (0, matrices_1.identity)();\n        _this.correctionRatio = 1;\n        _this.customBBox = null;\n        _this.normalizationFunction = (0, utils_1.createNormalizationFunction)({\n            x: [0, 1],\n            y: [0, 1],\n        });\n        // Cache:\n        _this.cameraSizeRatio = 1;\n        // Starting dimensions and pixel ratio\n        _this.width = 0;\n        _this.height = 0;\n        _this.pixelRatio = (0, utils_1.getPixelRatio)();\n        // State\n        _this.displayedLabels = new Set();\n        _this.highlightedNodes = new Set();\n        _this.hoveredNode = null;\n        _this.hoveredEdge = null;\n        _this.renderFrame = null;\n        _this.renderHighlightedNodesFrame = null;\n        _this.needToProcess = false;\n        _this.needToSoftProcess = false;\n        _this.checkEdgesEventsFrame = null;\n        // Programs\n        _this.nodePrograms = {};\n        _this.hoverNodePrograms = {};\n        _this.edgePrograms = {};\n        _this.settings = (0, utils_1.assign)({}, settings_1.DEFAULT_SETTINGS, settings);\n        // Validating\n        (0, settings_1.validateSettings)(_this.settings);\n        (0, utils_1.validateGraph)(graph);\n        if (!(container instanceof HTMLElement))\n            throw new Error(\"Sigma: container should be an html element.\");\n        // Properties\n        _this.graph = graph;\n        _this.container = container;\n        // Initializing contexts\n        _this.createWebGLContext(\"edges\", { preserveDrawingBuffer: true });\n        _this.createCanvasContext(\"edgeLabels\");\n        _this.createWebGLContext(\"nodes\");\n        _this.createCanvasContext(\"labels\");\n        _this.createCanvasContext(\"hovers\");\n        _this.createWebGLContext(\"hoverNodes\");\n        _this.createCanvasContext(\"mouse\");\n        // Blending\n        for (var key in _this.webGLContexts) {\n            var gl = _this.webGLContexts[key];\n            gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n            gl.enable(gl.BLEND);\n        }\n        // Loading programs\n        for (var type in _this.settings.nodeProgramClasses) {\n            var NodeProgramClass = _this.settings.nodeProgramClasses[type];\n            _this.nodePrograms[type] = new NodeProgramClass(_this.webGLContexts.nodes, _this);\n            _this.hoverNodePrograms[type] = new NodeProgramClass(_this.webGLContexts.hoverNodes, _this);\n        }\n        for (var type in _this.settings.edgeProgramClasses) {\n            var EdgeProgramClass = _this.settings.edgeProgramClasses[type];\n            _this.edgePrograms[type] = new EdgeProgramClass(_this.webGLContexts.edges, _this);\n        }\n        // Initial resize\n        _this.resize();\n        // Initializing the camera\n        _this.camera = new camera_1.default();\n        // Binding camera events\n        _this.bindCameraHandlers();\n        // Initializing captors\n        _this.mouseCaptor = new mouse_1.default(_this.elements.mouse, _this);\n        _this.touchCaptor = new touch_1.default(_this.elements.mouse, _this);\n        // Binding event handlers\n        _this.bindEventHandlers();\n        // Binding graph handlers\n        _this.bindGraphHandlers();\n        // Trigger eventual settings-related things\n        _this.handleSettingsUpdate();\n        // Processing data for the first time & render\n        _this.process();\n        _this.render();\n        return _this;\n    }\n    /**---------------------------------------------------------------------------\n     * Internal methods.\n     **---------------------------------------------------------------------------\n     */\n    /**\n     * Internal function used to create a canvas element.\n     * @param  {string} id - Context's id.\n     * @return {Sigma}\n     */\n    Sigma.prototype.createCanvas = function (id) {\n        var canvas = (0, utils_1.createElement)(\"canvas\", {\n            position: \"absolute\",\n        }, {\n            class: \"sigma-\".concat(id),\n        });\n        this.elements[id] = canvas;\n        this.container.appendChild(canvas);\n        return canvas;\n    };\n    /**\n     * Internal function used to create a canvas context and add the relevant\n     * DOM elements.\n     *\n     * @param  {string} id - Context's id.\n     * @return {Sigma}\n     */\n    Sigma.prototype.createCanvasContext = function (id) {\n        var canvas = this.createCanvas(id);\n        var contextOptions = {\n            preserveDrawingBuffer: false,\n            antialias: false,\n        };\n        this.canvasContexts[id] = canvas.getContext(\"2d\", contextOptions);\n        return this;\n    };\n    /**\n     * Internal function used to create a canvas context and add the relevant\n     * DOM elements.\n     *\n     * @param  {string}  id      - Context's id.\n     * @param  {object?} options - #getContext params to override (optional)\n     * @return {Sigma}\n     */\n    Sigma.prototype.createWebGLContext = function (id, options) {\n        var canvas = this.createCanvas(id);\n        var contextOptions = __assign({ preserveDrawingBuffer: false, antialias: false }, (options || {}));\n        var context;\n        // First we try webgl2 for an easy performance boost\n        context = canvas.getContext(\"webgl2\", contextOptions);\n        // Else we fall back to webgl\n        if (!context)\n            context = canvas.getContext(\"webgl\", contextOptions);\n        // Edge, I am looking right at you...\n        if (!context)\n            context = canvas.getContext(\"experimental-webgl\", contextOptions);\n        this.webGLContexts[id] = context;\n        return this;\n    };\n    /**\n     * Method binding camera handlers.\n     *\n     * @return {Sigma}\n     */\n    Sigma.prototype.bindCameraHandlers = function () {\n        var _this = this;\n        this.activeListeners.camera = function () {\n            _this._scheduleRefresh();\n        };\n        this.camera.on(\"updated\", this.activeListeners.camera);\n        return this;\n    };\n    /**\n     * Method that checks whether or not a node collides with a given position.\n     */\n    Sigma.prototype.mouseIsOnNode = function (_a, _b, size) {\n        var x = _a.x, y = _a.y;\n        var nodeX = _b.x, nodeY = _b.y;\n        return (x > nodeX - size &&\n            x < nodeX + size &&\n            y > nodeY - size &&\n            y < nodeY + size &&\n            Math.sqrt(Math.pow(x - nodeX, 2) + Math.pow(y - nodeY, 2)) < size);\n    };\n    /**\n     * Method that returns all nodes in quad at a given position.\n     */\n    Sigma.prototype.getQuadNodes = function (position) {\n        var mouseGraphPosition = this.viewportToFramedGraph(position);\n        return this.quadtree.point(mouseGraphPosition.x, 1 - mouseGraphPosition.y);\n    };\n    /**\n     * Method that returns the closest node to a given position.\n     */\n    Sigma.prototype.getNodeAtPosition = function (position) {\n        var x = position.x, y = position.y;\n        var quadNodes = this.getQuadNodes(position);\n        // We will hover the node whose center is closest to mouse\n        var minDistance = Infinity, nodeAtPosition = null;\n        for (var i = 0, l = quadNodes.length; i < l; i++) {\n            var node = quadNodes[i];\n            var data = this.nodeDataCache[node];\n            var nodePosition = this.framedGraphToViewport(data);\n            var size = this.scaleSize(data.size);\n            if (!data.hidden && this.mouseIsOnNode(position, nodePosition, size)) {\n                var distance = Math.sqrt(Math.pow(x - nodePosition.x, 2) + Math.pow(y - nodePosition.y, 2));\n                // TODO: sort by min size also for cases where center is the same\n                if (distance < minDistance) {\n                    minDistance = distance;\n                    nodeAtPosition = node;\n                }\n            }\n        }\n        return nodeAtPosition;\n    };\n    /**\n     * Method binding event handlers.\n     *\n     * @return {Sigma}\n     */\n    Sigma.prototype.bindEventHandlers = function () {\n        var _this = this;\n        // Handling window resize\n        this.activeListeners.handleResize = function () {\n            _this.needToSoftProcess = true;\n            _this._scheduleRefresh();\n        };\n        window.addEventListener(\"resize\", this.activeListeners.handleResize);\n        // Handling mouse move\n        this.activeListeners.handleMove = function (e) {\n            var baseEvent = {\n                event: e,\n                preventSigmaDefault: function () {\n                    e.preventSigmaDefault();\n                },\n            };\n            var nodeToHover = _this.getNodeAtPosition(e);\n            if (nodeToHover && _this.hoveredNode !== nodeToHover && !_this.nodeDataCache[nodeToHover].hidden) {\n                // Handling passing from one node to the other directly\n                if (_this.hoveredNode)\n                    _this.emit(\"leaveNode\", __assign(__assign({}, baseEvent), { node: _this.hoveredNode }));\n                _this.hoveredNode = nodeToHover;\n                _this.emit(\"enterNode\", __assign(__assign({}, baseEvent), { node: nodeToHover }));\n                _this.scheduleHighlightedNodesRender();\n                return;\n            }\n            // Checking if the hovered node is still hovered\n            if (_this.hoveredNode) {\n                var data = _this.nodeDataCache[_this.hoveredNode];\n                var pos = _this.framedGraphToViewport(data);\n                var size = _this.scaleSize(data.size);\n                if (!_this.mouseIsOnNode(e, pos, size)) {\n                    var node = _this.hoveredNode;\n                    _this.hoveredNode = null;\n                    _this.emit(\"leaveNode\", __assign(__assign({}, baseEvent), { node: node }));\n                    _this.scheduleHighlightedNodesRender();\n                    return;\n                }\n            }\n            if (_this.settings.enableEdgeHoverEvents === true) {\n                _this.checkEdgeHoverEvents(baseEvent);\n            }\n            else if (_this.settings.enableEdgeHoverEvents === \"debounce\") {\n                if (!_this.checkEdgesEventsFrame)\n                    _this.checkEdgesEventsFrame = (0, utils_1.requestFrame)(function () {\n                        _this.checkEdgeHoverEvents(baseEvent);\n                        _this.checkEdgesEventsFrame = null;\n                    });\n            }\n        };\n        // Handling click\n        var createMouseListener = function (eventType) {\n            return function (e) {\n                var baseEvent = {\n                    event: e,\n                    preventSigmaDefault: function () {\n                        e.preventSigmaDefault();\n                    },\n                };\n                var isFakeSigmaMouseEvent = e.original.isFakeSigmaMouseEvent;\n                var nodeAtPosition = isFakeSigmaMouseEvent ? _this.getNodeAtPosition(e) : _this.hoveredNode;\n                if (nodeAtPosition)\n                    return _this.emit(\"\".concat(eventType, \"Node\"), __assign(__assign({}, baseEvent), { node: nodeAtPosition }));\n                if (eventType === \"wheel\" ? _this.settings.enableEdgeWheelEvents : _this.settings.enableEdgeClickEvents) {\n                    var edge = _this.getEdgeAtPoint(e.x, e.y);\n                    if (edge)\n                        return _this.emit(\"\".concat(eventType, \"Edge\"), __assign(__assign({}, baseEvent), { edge: edge }));\n                }\n                return _this.emit(\"\".concat(eventType, \"Stage\"), baseEvent);\n            };\n        };\n        this.activeListeners.handleClick = createMouseListener(\"click\");\n        this.activeListeners.handleRightClick = createMouseListener(\"rightClick\");\n        this.activeListeners.handleDoubleClick = createMouseListener(\"doubleClick\");\n        this.activeListeners.handleWheel = createMouseListener(\"wheel\");\n        this.activeListeners.handleDown = createMouseListener(\"down\");\n        this.mouseCaptor.on(\"mousemove\", this.activeListeners.handleMove);\n        this.mouseCaptor.on(\"click\", this.activeListeners.handleClick);\n        this.mouseCaptor.on(\"rightClick\", this.activeListeners.handleRightClick);\n        this.mouseCaptor.on(\"doubleClick\", this.activeListeners.handleDoubleClick);\n        this.mouseCaptor.on(\"wheel\", this.activeListeners.handleWheel);\n        this.mouseCaptor.on(\"mousedown\", this.activeListeners.handleDown);\n        // TODO\n        // Deal with Touch captor events\n        return this;\n    };\n    /**\n     * Method binding graph handlers\n     *\n     * @return {Sigma}\n     */\n    Sigma.prototype.bindGraphHandlers = function () {\n        var _this = this;\n        var graph = this.graph;\n        this.activeListeners.graphUpdate = function () {\n            _this.needToProcess = true;\n            _this._scheduleRefresh();\n        };\n        this.activeListeners.softGraphUpdate = function () {\n            _this.needToSoftProcess = true;\n            _this._scheduleRefresh();\n        };\n        this.activeListeners.dropNodeGraphUpdate = function (e) {\n            delete _this.nodeDataCache[e.key];\n            if (_this.hoveredNode === e.key)\n                _this.hoveredNode = null;\n            _this.activeListeners.graphUpdate();\n        };\n        this.activeListeners.dropEdgeGraphUpdate = function (e) {\n            delete _this.edgeDataCache[e.key];\n            if (_this.hoveredEdge === e.key)\n                _this.hoveredEdge = null;\n            _this.activeListeners.graphUpdate();\n        };\n        this.activeListeners.clearEdgesGraphUpdate = function () {\n            _this.edgeDataCache = {};\n            _this.hoveredEdge = null;\n            _this.activeListeners.graphUpdate();\n        };\n        this.activeListeners.clearGraphUpdate = function () {\n            _this.nodeDataCache = {};\n            _this.hoveredNode = null;\n            _this.activeListeners.clearEdgesGraphUpdate();\n        };\n        graph.on(\"nodeAdded\", this.activeListeners.graphUpdate);\n        graph.on(\"nodeDropped\", this.activeListeners.dropNodeGraphUpdate);\n        graph.on(\"nodeAttributesUpdated\", this.activeListeners.softGraphUpdate);\n        graph.on(\"eachNodeAttributesUpdated\", this.activeListeners.graphUpdate);\n        graph.on(\"edgeAdded\", this.activeListeners.graphUpdate);\n        graph.on(\"edgeDropped\", this.activeListeners.dropEdgeGraphUpdate);\n        graph.on(\"edgeAttributesUpdated\", this.activeListeners.softGraphUpdate);\n        graph.on(\"eachEdgeAttributesUpdated\", this.activeListeners.graphUpdate);\n        graph.on(\"edgesCleared\", this.activeListeners.clearEdgesGraphUpdate);\n        graph.on(\"cleared\", this.activeListeners.clearGraphUpdate);\n        return this;\n    };\n    /**\n     * Method dealing with \"leaveEdge\" and \"enterEdge\" events.\n     *\n     * @return {Sigma}\n     */\n    Sigma.prototype.checkEdgeHoverEvents = function (payload) {\n        var edgeToHover = this.hoveredNode ? null : this.getEdgeAtPoint(payload.event.x, payload.event.y);\n        if (edgeToHover !== this.hoveredEdge) {\n            if (this.hoveredEdge)\n                this.emit(\"leaveEdge\", __assign(__assign({}, payload), { edge: this.hoveredEdge }));\n            if (edgeToHover)\n                this.emit(\"enterEdge\", __assign(__assign({}, payload), { edge: edgeToHover }));\n            this.hoveredEdge = edgeToHover;\n        }\n        return this;\n    };\n    /**\n     * Method looking for an edge colliding with a given point at (x, y). Returns\n     * the key of the edge if any, or null else.\n     */\n    Sigma.prototype.getEdgeAtPoint = function (x, y) {\n        var e_1, _a;\n        var _this = this;\n        var _b = this, edgeDataCache = _b.edgeDataCache, nodeDataCache = _b.nodeDataCache;\n        // Check first that pixel is colored:\n        // Note that mouse positions must be corrected by pixel ratio to correctly\n        // index the drawing buffer.\n        if (!(0, edge_collisions_1.isPixelColored)(this.webGLContexts.edges, x * this.pixelRatio, y * this.pixelRatio))\n            return null;\n        // Check for each edge if it collides with the point:\n        var _c = this.viewportToGraph({ x: x, y: y }), graphX = _c.x, graphY = _c.y;\n        // To translate edge thicknesses to the graph system, we observe by how much\n        // the length of a non-null edge is transformed to between the graph system\n        // and the viewport system:\n        var transformationRatio = 0;\n        this.graph.someEdge(function (key, _, sourceId, targetId, _a, _b) {\n            var xs = _a.x, ys = _a.y;\n            var xt = _b.x, yt = _b.y;\n            if (edgeDataCache[key].hidden || nodeDataCache[sourceId].hidden || nodeDataCache[targetId].hidden)\n                return false;\n            if (xs !== xt || ys !== yt) {\n                var graphLength = Math.sqrt(Math.pow(xt - xs, 2) + Math.pow(yt - ys, 2));\n                var _c = _this.graphToViewport({ x: xs, y: ys }), vp_xs = _c.x, vp_ys = _c.y;\n                var _d = _this.graphToViewport({ x: xt, y: yt }), vp_xt = _d.x, vp_yt = _d.y;\n                var viewportLength = Math.sqrt(Math.pow(vp_xt - vp_xs, 2) + Math.pow(vp_yt - vp_ys, 2));\n                transformationRatio = graphLength / viewportLength;\n                return true;\n            }\n        });\n        // If no non-null edge has been found, return null:\n        if (!transformationRatio)\n            return null;\n        // Now we can look for matching edges:\n        var edges = this.graph.filterEdges(function (key, edgeAttributes, sourceId, targetId, sourcePosition, targetPosition) {\n            if (edgeDataCache[key].hidden || nodeDataCache[sourceId].hidden || nodeDataCache[targetId].hidden)\n                return false;\n            if ((0, edge_collisions_1.doEdgeCollideWithPoint)(graphX, graphY, sourcePosition.x, sourcePosition.y, targetPosition.x, targetPosition.y, \n            // Adapt the edge size to the zoom ratio:\n            (edgeDataCache[key].size * transformationRatio) / _this.cameraSizeRatio)) {\n                return true;\n            }\n        });\n        if (edges.length === 0)\n            return null; // no edges found\n        // if none of the edges have a zIndex, selected the most recently created one to match the rendering order\n        var selectedEdge = edges[edges.length - 1];\n        // otherwise select edge with highest zIndex\n        var highestZIndex = -Infinity;\n        try {\n            for (var edges_1 = __values(edges), edges_1_1 = edges_1.next(); !edges_1_1.done; edges_1_1 = edges_1.next()) {\n                var edge = edges_1_1.value;\n                var zIndex = this.graph.getEdgeAttribute(edge, \"zIndex\");\n                if (zIndex >= highestZIndex) {\n                    selectedEdge = edge;\n                    highestZIndex = zIndex;\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (edges_1_1 && !edges_1_1.done && (_a = edges_1.return)) _a.call(edges_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return selectedEdge;\n    };\n    /**\n     * Method used to process the whole graph's data.\n     *\n     * @return {Sigma}\n     */\n    Sigma.prototype.process = function (keepArrays) {\n        var _this = this;\n        if (keepArrays === void 0) { keepArrays = false; }\n        var graph = this.graph;\n        var settings = this.settings;\n        var dimensions = this.getDimensions();\n        var nodeZExtent = [Infinity, -Infinity];\n        var edgeZExtent = [Infinity, -Infinity];\n        // Clearing the quad\n        this.quadtree.clear();\n        // Resetting the label grid\n        // TODO: it's probably better to do this explicitly or on resizes for layout and anims\n        this.labelGrid.resizeAndClear(dimensions, settings.labelGridCellSize);\n        // Clear the highlightedNodes\n        this.highlightedNodes = new Set();\n        // Computing extents\n        this.nodeExtent = (0, utils_1.graphExtent)(graph);\n        // Resetting `forceLabel` indices\n        this.nodesWithForcedLabels = [];\n        this.edgesWithForcedLabels = [];\n        // NOTE: it is important to compute this matrix after computing the node's extent\n        // because #.getGraphDimensions relies on it\n        var nullCamera = new camera_1.default();\n        var nullCameraMatrix = (0, utils_1.matrixFromCamera)(nullCamera.getState(), this.getDimensions(), this.getGraphDimensions(), this.getSetting(\"stagePadding\") || 0);\n        // Rescaling function\n        this.normalizationFunction = (0, utils_1.createNormalizationFunction)(this.customBBox || this.nodeExtent);\n        var nodesPerPrograms = {};\n        var nodes = graph.nodes();\n        for (var i = 0, l = nodes.length; i < l; i++) {\n            var node = nodes[i];\n            // Node display data resolution:\n            //   1. First we get the node's attributes\n            //   2. We optionally reduce them using the function provided by the user\n            //      Note that this function must return a total object and won't be merged\n            //   3. We apply our defaults, while running some vital checks\n            //   4. We apply the normalization function\n            // We shallow copy node data to avoid dangerous behaviors from reducers\n            var attr = Object.assign({}, graph.getNodeAttributes(node));\n            if (settings.nodeReducer)\n                attr = settings.nodeReducer(node, attr);\n            var data = applyNodeDefaults(this.settings, node, attr);\n            nodesPerPrograms[data.type] = (nodesPerPrograms[data.type] || 0) + 1;\n            this.nodeDataCache[node] = data;\n            this.normalizationFunction.applyTo(data);\n            if (data.forceLabel)\n                this.nodesWithForcedLabels.push(node);\n            if (this.settings.zIndex) {\n                if (data.zIndex < nodeZExtent[0])\n                    nodeZExtent[0] = data.zIndex;\n                if (data.zIndex > nodeZExtent[1])\n                    nodeZExtent[1] = data.zIndex;\n            }\n        }\n        for (var type in this.nodePrograms) {\n            if (!this.nodePrograms.hasOwnProperty(type)) {\n                throw new Error(\"Sigma: could not find a suitable program for node type \\\"\".concat(type, \"\\\"!\"));\n            }\n            if (!keepArrays)\n                this.nodePrograms[type].allocate(nodesPerPrograms[type] || 0);\n            // We reset that count here, so that we can reuse it while calling the Program#process methods:\n            nodesPerPrograms[type] = 0;\n        }\n        // Handling node z-index\n        // TODO: z-index needs us to compute display data before hand\n        if (this.settings.zIndex && nodeZExtent[0] !== nodeZExtent[1])\n            nodes = (0, utils_1.zIndexOrdering)(nodeZExtent, function (node) { return _this.nodeDataCache[node].zIndex; }, nodes);\n        for (var i = 0, l = nodes.length; i < l; i++) {\n            var node = nodes[i];\n            var data = this.nodeDataCache[node];\n            this.quadtree.add(node, data.x, 1 - data.y, data.size / this.width);\n            if (typeof data.label === \"string\" && !data.hidden)\n                this.labelGrid.add(node, data.size, this.framedGraphToViewport(data, { matrix: nullCameraMatrix }));\n            this.nodePrograms[data.type].process(data, data.hidden, nodesPerPrograms[data.type]++);\n            // Save the node in the highlighted set if needed\n            if (data.highlighted && !data.hidden)\n                this.highlightedNodes.add(node);\n        }\n        this.labelGrid.organize();\n        var edgesPerPrograms = {};\n        var edges = graph.edges();\n        for (var i = 0, l = edges.length; i < l; i++) {\n            var edge = edges[i];\n            // Edge display data resolution:\n            //   1. First we get the edge's attributes\n            //   2. We optionally reduce them using the function provided by the user\n            //      Note that this function must return a total object and won't be merged\n            //   3. We apply our defaults, while running some vital checks\n            // We shallow copy edge data to avoid dangerous behaviors from reducers\n            var attr = Object.assign({}, graph.getEdgeAttributes(edge));\n            if (settings.edgeReducer)\n                attr = settings.edgeReducer(edge, attr);\n            var data = applyEdgeDefaults(this.settings, edge, attr);\n            edgesPerPrograms[data.type] = (edgesPerPrograms[data.type] || 0) + 1;\n            this.edgeDataCache[edge] = data;\n            if (data.forceLabel && !data.hidden)\n                this.edgesWithForcedLabels.push(edge);\n            if (this.settings.zIndex) {\n                if (data.zIndex < edgeZExtent[0])\n                    edgeZExtent[0] = data.zIndex;\n                if (data.zIndex > edgeZExtent[1])\n                    edgeZExtent[1] = data.zIndex;\n            }\n        }\n        for (var type in this.edgePrograms) {\n            if (!this.edgePrograms.hasOwnProperty(type)) {\n                throw new Error(\"Sigma: could not find a suitable program for edge type \\\"\".concat(type, \"\\\"!\"));\n            }\n            if (!keepArrays)\n                this.edgePrograms[type].allocate(edgesPerPrograms[type] || 0);\n            // We reset that count here, so that we can reuse it while calling the Program#process methods:\n            edgesPerPrograms[type] = 0;\n        }\n        // Handling edge z-index\n        if (this.settings.zIndex && edgeZExtent[0] !== edgeZExtent[1])\n            edges = (0, utils_1.zIndexOrdering)(edgeZExtent, function (edge) { return _this.edgeDataCache[edge].zIndex; }, edges);\n        for (var i = 0, l = edges.length; i < l; i++) {\n            var edge = edges[i];\n            var data = this.edgeDataCache[edge];\n            var extremities = graph.extremities(edge), sourceData = this.nodeDataCache[extremities[0]], targetData = this.nodeDataCache[extremities[1]];\n            var hidden = data.hidden || sourceData.hidden || targetData.hidden;\n            this.edgePrograms[data.type].process(sourceData, targetData, data, hidden, edgesPerPrograms[data.type]++);\n        }\n        for (var type in this.edgePrograms) {\n            var program = this.edgePrograms[type];\n            if (!keepArrays && typeof program.computeIndices === \"function\")\n                program.computeIndices();\n        }\n        return this;\n    };\n    /**\n     * Method that backports potential settings updates where it's needed.\n     * @private\n     */\n    Sigma.prototype.handleSettingsUpdate = function () {\n        this.camera.minRatio = this.settings.minCameraRatio;\n        this.camera.maxRatio = this.settings.maxCameraRatio;\n        this.camera.setState(this.camera.validateState(this.camera.getState()));\n        return this;\n    };\n    /**\n     * Method that decides whether to reprocess graph or not, and then render the\n     * graph.\n     *\n     * @return {Sigma}\n     */\n    Sigma.prototype._refresh = function () {\n        // Do we need to process data?\n        if (this.needToProcess) {\n            this.process();\n        }\n        else if (this.needToSoftProcess) {\n            this.process(true);\n        }\n        // Resetting state\n        this.needToProcess = false;\n        this.needToSoftProcess = false;\n        // Rendering\n        this.render();\n        return this;\n    };\n    /**\n     * Method that schedules a `_refresh` call if none has been scheduled yet. It\n     * will then be processed next available frame.\n     *\n     * @return {Sigma}\n     */\n    Sigma.prototype._scheduleRefresh = function () {\n        var _this = this;\n        if (!this.renderFrame) {\n            this.renderFrame = (0, utils_1.requestFrame)(function () {\n                _this._refresh();\n                _this.renderFrame = null;\n            });\n        }\n        return this;\n    };\n    /**\n     * Method used to render labels.\n     *\n     * @return {Sigma}\n     */\n    Sigma.prototype.renderLabels = function () {\n        if (!this.settings.renderLabels)\n            return this;\n        var cameraState = this.camera.getState();\n        // Finding visible nodes to display their labels\n        var visibleNodes;\n        if (cameraState.ratio >= 1) {\n            // Camera is unzoomed so no need to ask the quadtree for visible nodes\n            visibleNodes = new Set(this.graph.nodes());\n        }\n        else {\n            // Let's ask the quadtree\n            var viewRectangle = this.viewRectangle();\n            visibleNodes = new Set(this.quadtree.rectangle(viewRectangle.x1, 1 - viewRectangle.y1, viewRectangle.x2, 1 - viewRectangle.y2, viewRectangle.height));\n        }\n        // Selecting labels to draw\n        // TODO: drop gridsettings likewise\n        // TODO: optimize through visible nodes\n        var labelsToDisplay = this.labelGrid\n            .getLabelsToDisplay(cameraState.ratio, this.settings.labelDensity)\n            .concat(this.nodesWithForcedLabels);\n        this.displayedLabels = new Set();\n        // Drawing labels\n        var context = this.canvasContexts.labels;\n        for (var i = 0, l = labelsToDisplay.length; i < l; i++) {\n            var node = labelsToDisplay[i];\n            var data = this.nodeDataCache[node];\n            // If the node was already drawn (like if it is eligible AND has\n            // `forceLabel`), we don't want to draw it again\n            if (this.displayedLabels.has(node))\n                continue;\n            // If the node is hidden, we don't need to display its label obviously\n            if (data.hidden)\n                continue;\n            var _a = this.framedGraphToViewport(data), x = _a.x, y = _a.y;\n            // TODO: we can cache the labels we need to render until the camera's ratio changes\n            // TODO: this should be computed in the canvas components?\n            var size = this.scaleSize(data.size);\n            if (!data.forceLabel && size < this.settings.labelRenderedSizeThreshold)\n                continue;\n            if (!visibleNodes.has(node))\n                continue;\n            // TODO:\n            // Because displayed edge labels depend directly on actually rendered node\n            // labels, we need to only add to this.displayedLabels nodes whose label\n            // is rendered.\n            // This makes this.displayedLabels depend on viewport, which might become\n            // an issue once we start memoizing getLabelsToDisplay.\n            this.displayedLabels.add(node);\n            this.settings.labelRenderer(context, __assign(__assign({ key: node }, data), { size: size, x: x, y: y }), this.settings);\n        }\n        return this;\n    };\n    /**\n     * Method used to render edge labels, based on which node labels were\n     * rendered.\n     *\n     * @return {Sigma}\n     */\n    Sigma.prototype.renderEdgeLabels = function () {\n        if (!this.settings.renderEdgeLabels)\n            return this;\n        var context = this.canvasContexts.edgeLabels;\n        // Clearing\n        context.clearRect(0, 0, this.width, this.height);\n        var edgeLabelsToDisplay = (0, labels_1.edgeLabelsToDisplayFromNodes)({\n            graph: this.graph,\n            hoveredNode: this.hoveredNode,\n            displayedNodeLabels: this.displayedLabels,\n            highlightedNodes: this.highlightedNodes,\n        }).concat(this.edgesWithForcedLabels);\n        var displayedLabels = new Set();\n        for (var i = 0, l = edgeLabelsToDisplay.length; i < l; i++) {\n            var edge = edgeLabelsToDisplay[i], extremities = this.graph.extremities(edge), sourceData = this.nodeDataCache[extremities[0]], targetData = this.nodeDataCache[extremities[1]], edgeData = this.edgeDataCache[edge];\n            // If the edge was already drawn (like if it is eligible AND has\n            // `forceLabel`), we don't want to draw it again\n            if (displayedLabels.has(edge))\n                continue;\n            // If the edge is hidden we don't need to display its label\n            // NOTE: the test on sourceData & targetData is probably paranoid at this point?\n            if (edgeData.hidden || sourceData.hidden || targetData.hidden) {\n                continue;\n            }\n            this.settings.edgeLabelRenderer(context, __assign(__assign({ key: edge }, edgeData), { size: this.scaleSize(edgeData.size) }), __assign(__assign(__assign({ key: extremities[0] }, sourceData), this.framedGraphToViewport(sourceData)), { size: this.scaleSize(sourceData.size) }), __assign(__assign(__assign({ key: extremities[1] }, targetData), this.framedGraphToViewport(targetData)), { size: this.scaleSize(targetData.size) }), this.settings);\n            displayedLabels.add(edge);\n        }\n        return this;\n    };\n    /**\n     * Method used to render the highlighted nodes.\n     *\n     * @return {Sigma}\n     */\n    Sigma.prototype.renderHighlightedNodes = function () {\n        var _this = this;\n        var context = this.canvasContexts.hovers;\n        // Clearing\n        context.clearRect(0, 0, this.width, this.height);\n        // Rendering\n        var render = function (node) {\n            var data = _this.nodeDataCache[node];\n            var _a = _this.framedGraphToViewport(data), x = _a.x, y = _a.y;\n            var size = _this.scaleSize(data.size);\n            _this.settings.hoverRenderer(context, __assign(__assign({ key: node }, data), { size: size, x: x, y: y }), _this.settings);\n        };\n        var nodesToRender = [];\n        if (this.hoveredNode && !this.nodeDataCache[this.hoveredNode].hidden) {\n            nodesToRender.push(this.hoveredNode);\n        }\n        this.highlightedNodes.forEach(function (node) {\n            // The hovered node has already been highlighted\n            if (node !== _this.hoveredNode)\n                nodesToRender.push(node);\n        });\n        // Draw labels:\n        nodesToRender.forEach(function (node) { return render(node); });\n        // Draw WebGL nodes on top of the labels:\n        var nodesPerPrograms = {};\n        // 1. Count nodes per type:\n        nodesToRender.forEach(function (node) {\n            var type = _this.nodeDataCache[node].type;\n            nodesPerPrograms[type] = (nodesPerPrograms[type] || 0) + 1;\n        });\n        // 2. Allocate for each type for the proper number of nodes\n        for (var type in this.hoverNodePrograms) {\n            this.hoverNodePrograms[type].allocate(nodesPerPrograms[type] || 0);\n            // Also reset count, to use when rendering:\n            nodesPerPrograms[type] = 0;\n        }\n        // 3. Process all nodes to render:\n        nodesToRender.forEach(function (node) {\n            var data = _this.nodeDataCache[node];\n            _this.hoverNodePrograms[data.type].process(data, data.hidden, nodesPerPrograms[data.type]++);\n        });\n        // 4. Clear hovered nodes layer:\n        this.webGLContexts.hoverNodes.clear(this.webGLContexts.hoverNodes.COLOR_BUFFER_BIT);\n        // 5. Render:\n        for (var type in this.hoverNodePrograms) {\n            var program = this.hoverNodePrograms[type];\n            program.bind();\n            program.bufferData();\n            program.render({\n                matrix: this.matrix,\n                width: this.width,\n                height: this.height,\n                ratio: this.camera.ratio,\n                correctionRatio: this.correctionRatio / this.camera.ratio,\n                scalingRatio: this.pixelRatio,\n            });\n        }\n    };\n    /**\n     * Method used to schedule a hover render.\n     *\n     */\n    Sigma.prototype.scheduleHighlightedNodesRender = function () {\n        var _this = this;\n        if (this.renderHighlightedNodesFrame || this.renderFrame)\n            return;\n        this.renderHighlightedNodesFrame = (0, utils_1.requestFrame)(function () {\n            // Resetting state\n            _this.renderHighlightedNodesFrame = null;\n            // Rendering\n            _this.renderHighlightedNodes();\n            _this.renderEdgeLabels();\n        });\n    };\n    /**\n     * Method used to render.\n     *\n     * @return {Sigma}\n     */\n    Sigma.prototype.render = function () {\n        var _this = this;\n        this.emit(\"beforeRender\");\n        var handleEscape = function () {\n            _this.emit(\"afterRender\");\n            return _this;\n        };\n        // If a render was scheduled, we cancel it\n        if (this.renderFrame) {\n            (0, utils_1.cancelFrame)(this.renderFrame);\n            this.renderFrame = null;\n            this.needToProcess = false;\n            this.needToSoftProcess = false;\n        }\n        // First we need to resize\n        this.resize();\n        // Clearing the canvases\n        this.clear();\n        // Recomputing useful camera-related values:\n        this.updateCachedValues();\n        // If we have no nodes we can stop right there\n        if (!this.graph.order)\n            return handleEscape();\n        // TODO: improve this heuristic or move to the captor itself?\n        // TODO: deal with the touch captor here as well\n        var mouseCaptor = this.mouseCaptor;\n        var moving = this.camera.isAnimated() ||\n            mouseCaptor.isMoving ||\n            mouseCaptor.draggedEvents ||\n            mouseCaptor.currentWheelDirection;\n        // Then we need to extract a matrix from the camera\n        var cameraState = this.camera.getState();\n        var viewportDimensions = this.getDimensions();\n        var graphDimensions = this.getGraphDimensions();\n        var padding = this.getSetting(\"stagePadding\") || 0;\n        this.matrix = (0, utils_1.matrixFromCamera)(cameraState, viewportDimensions, graphDimensions, padding);\n        this.invMatrix = (0, utils_1.matrixFromCamera)(cameraState, viewportDimensions, graphDimensions, padding, true);\n        this.correctionRatio = (0, utils_1.getMatrixImpact)(this.matrix, cameraState, viewportDimensions);\n        // Drawing nodes\n        for (var type in this.nodePrograms) {\n            var program = this.nodePrograms[type];\n            program.bind();\n            program.bufferData();\n            program.render({\n                matrix: this.matrix,\n                width: this.width,\n                height: this.height,\n                ratio: cameraState.ratio,\n                correctionRatio: this.correctionRatio / cameraState.ratio,\n                scalingRatio: this.pixelRatio,\n            });\n        }\n        // Drawing edges\n        if (!this.settings.hideEdgesOnMove || !moving) {\n            for (var type in this.edgePrograms) {\n                var program = this.edgePrograms[type];\n                program.bind();\n                program.bufferData();\n                program.render({\n                    matrix: this.matrix,\n                    width: this.width,\n                    height: this.height,\n                    ratio: cameraState.ratio,\n                    correctionRatio: this.correctionRatio / cameraState.ratio,\n                    scalingRatio: this.pixelRatio,\n                });\n            }\n        }\n        // Do not display labels on move per setting\n        if (this.settings.hideLabelsOnMove && moving)\n            return handleEscape();\n        this.renderLabels();\n        this.renderEdgeLabels();\n        this.renderHighlightedNodes();\n        return handleEscape();\n    };\n    /**\n     * Internal method used to update expensive and therefore cached values\n     * each time the camera state is updated.\n     */\n    Sigma.prototype.updateCachedValues = function () {\n        var ratio = this.camera.getState().ratio;\n        this.cameraSizeRatio = Math.sqrt(ratio);\n    };\n    /**---------------------------------------------------------------------------\n     * Public API.\n     **---------------------------------------------------------------------------\n     */\n    /**\n     * Method returning the renderer's camera.\n     *\n     * @return {Camera}\n     */\n    Sigma.prototype.getCamera = function () {\n        return this.camera;\n    };\n    /**\n     * Method returning the container DOM element.\n     *\n     * @return {HTMLElement}\n     */\n    Sigma.prototype.getContainer = function () {\n        return this.container;\n    };\n    /**\n     * Method returning the renderer's graph.\n     *\n     * @return {Graph}\n     */\n    Sigma.prototype.getGraph = function () {\n        return this.graph;\n    };\n    /**\n     * Method returning the mouse captor.\n     *\n     * @return {MouseCaptor}\n     */\n    Sigma.prototype.getMouseCaptor = function () {\n        return this.mouseCaptor;\n    };\n    /**\n     * Method returning the touch captor.\n     *\n     * @return {TouchCaptor}\n     */\n    Sigma.prototype.getTouchCaptor = function () {\n        return this.touchCaptor;\n    };\n    /**\n     * Method returning the current renderer's dimensions.\n     *\n     * @return {Dimensions}\n     */\n    Sigma.prototype.getDimensions = function () {\n        return { width: this.width, height: this.height };\n    };\n    /**\n     * Method returning the current graph's dimensions.\n     *\n     * @return {Dimensions}\n     */\n    Sigma.prototype.getGraphDimensions = function () {\n        var extent = this.customBBox || this.nodeExtent;\n        return {\n            width: extent.x[1] - extent.x[0] || 1,\n            height: extent.y[1] - extent.y[0] || 1,\n        };\n    };\n    /**\n     * Method used to get all the sigma node attributes.\n     * It's usefull for example to get the position of a node\n     * and to get values that are set by the nodeReducer\n     *\n     * @param  {string} key - The node's key.\n     * @return {NodeDisplayData | undefined} A copy of the desired node's attribute or undefined if not found\n     */\n    Sigma.prototype.getNodeDisplayData = function (key) {\n        var node = this.nodeDataCache[key];\n        return node ? Object.assign({}, node) : undefined;\n    };\n    /**\n     * Method used to get all the sigma edge attributes.\n     * It's usefull for example to get values that are set by the edgeReducer.\n     *\n     * @param  {string} key - The edge's key.\n     * @return {EdgeDisplayData | undefined} A copy of the desired edge's attribute or undefined if not found\n     */\n    Sigma.prototype.getEdgeDisplayData = function (key) {\n        var edge = this.edgeDataCache[key];\n        return edge ? Object.assign({}, edge) : undefined;\n    };\n    /**\n     * Method returning a copy of the settings collection.\n     *\n     * @return {Settings} A copy of the settings collection.\n     */\n    Sigma.prototype.getSettings = function () {\n        return __assign({}, this.settings);\n    };\n    /**\n     * Method returning the current value for a given setting key.\n     *\n     * @param  {string} key - The setting key to get.\n     * @return {any} The value attached to this setting key or undefined if not found\n     */\n    Sigma.prototype.getSetting = function (key) {\n        return this.settings[key];\n    };\n    /**\n     * Method setting the value of a given setting key. Note that this will schedule\n     * a new render next frame.\n     *\n     * @param  {string} key - The setting key to set.\n     * @param  {any}    value - The value to set.\n     * @return {Sigma}\n     */\n    Sigma.prototype.setSetting = function (key, value) {\n        this.settings[key] = value;\n        (0, settings_1.validateSettings)(this.settings);\n        this.handleSettingsUpdate();\n        this.needToProcess = true; // TODO: some keys may work with only needToSoftProcess or even nothing\n        this._scheduleRefresh();\n        return this;\n    };\n    /**\n     * Method updating the value of a given setting key using the provided function.\n     * Note that this will schedule a new render next frame.\n     *\n     * @param  {string}   key     - The setting key to set.\n     * @param  {function} updater - The update function.\n     * @return {Sigma}\n     */\n    Sigma.prototype.updateSetting = function (key, updater) {\n        this.settings[key] = updater(this.settings[key]);\n        (0, settings_1.validateSettings)(this.settings);\n        this.handleSettingsUpdate();\n        this.needToProcess = true; // TODO: some keys may work with only needToSoftProcess or even nothing\n        this._scheduleRefresh();\n        return this;\n    };\n    /**\n     * Method used to resize the renderer.\n     *\n     * @return {Sigma}\n     */\n    Sigma.prototype.resize = function () {\n        var previousWidth = this.width, previousHeight = this.height;\n        this.width = this.container.offsetWidth;\n        this.height = this.container.offsetHeight;\n        this.pixelRatio = (0, utils_1.getPixelRatio)();\n        if (this.width === 0) {\n            if (this.settings.allowInvalidContainer)\n                this.width = 1;\n            else\n                throw new Error(\"Sigma: Container has no width. You can set the allowInvalidContainer setting to true to stop seing this error.\");\n        }\n        if (this.height === 0) {\n            if (this.settings.allowInvalidContainer)\n                this.height = 1;\n            else\n                throw new Error(\"Sigma: Container has no height. You can set the allowInvalidContainer setting to true to stop seing this error.\");\n        }\n        // If nothing has changed, we can stop right here\n        if (previousWidth === this.width && previousHeight === this.height)\n            return this;\n        this.emit(\"resize\");\n        // Sizing dom elements\n        for (var id in this.elements) {\n            var element = this.elements[id];\n            element.style.width = this.width + \"px\";\n            element.style.height = this.height + \"px\";\n        }\n        // Sizing canvas contexts\n        for (var id in this.canvasContexts) {\n            this.elements[id].setAttribute(\"width\", this.width * this.pixelRatio + \"px\");\n            this.elements[id].setAttribute(\"height\", this.height * this.pixelRatio + \"px\");\n            if (this.pixelRatio !== 1)\n                this.canvasContexts[id].scale(this.pixelRatio, this.pixelRatio);\n        }\n        // Sizing WebGL contexts\n        for (var id in this.webGLContexts) {\n            this.elements[id].setAttribute(\"width\", this.width * this.pixelRatio + \"px\");\n            this.elements[id].setAttribute(\"height\", this.height * this.pixelRatio + \"px\");\n            this.webGLContexts[id].viewport(0, 0, this.width * this.pixelRatio, this.height * this.pixelRatio);\n        }\n        return this;\n    };\n    /**\n     * Method used to clear all the canvases.\n     *\n     * @return {Sigma}\n     */\n    Sigma.prototype.clear = function () {\n        this.webGLContexts.nodes.clear(this.webGLContexts.nodes.COLOR_BUFFER_BIT);\n        this.webGLContexts.edges.clear(this.webGLContexts.edges.COLOR_BUFFER_BIT);\n        this.webGLContexts.hoverNodes.clear(this.webGLContexts.hoverNodes.COLOR_BUFFER_BIT);\n        this.canvasContexts.labels.clearRect(0, 0, this.width, this.height);\n        this.canvasContexts.hovers.clearRect(0, 0, this.width, this.height);\n        this.canvasContexts.edgeLabels.clearRect(0, 0, this.width, this.height);\n        return this;\n    };\n    /**\n     * Method used to refresh all computed data.\n     *\n     * @return {Sigma}\n     */\n    Sigma.prototype.refresh = function () {\n        this.needToProcess = true;\n        this._refresh();\n        return this;\n    };\n    /**\n     * Method used to refresh all computed data, at the next available frame.\n     * If this method has already been called this frame, then it will only render once at the next available frame.\n     *\n     * @return {Sigma}\n     */\n    Sigma.prototype.scheduleRefresh = function () {\n        this.needToProcess = true;\n        this._scheduleRefresh();\n        return this;\n    };\n    /**\n     * Method used to (un)zoom, while preserving the position of a viewport point.\n     * Used for instance to zoom \"on the mouse cursor\".\n     *\n     * @param viewportTarget\n     * @param newRatio\n     * @return {CameraState}\n     */\n    Sigma.prototype.getViewportZoomedState = function (viewportTarget, newRatio) {\n        var _a = this.camera.getState(), ratio = _a.ratio, angle = _a.angle, x = _a.x, y = _a.y;\n        // TODO: handle max zoom\n        var ratioDiff = newRatio / ratio;\n        var center = {\n            x: this.width / 2,\n            y: this.height / 2,\n        };\n        var graphMousePosition = this.viewportToFramedGraph(viewportTarget);\n        var graphCenterPosition = this.viewportToFramedGraph(center);\n        return {\n            angle: angle,\n            x: (graphMousePosition.x - graphCenterPosition.x) * (1 - ratioDiff) + x,\n            y: (graphMousePosition.y - graphCenterPosition.y) * (1 - ratioDiff) + y,\n            ratio: newRatio,\n        };\n    };\n    /**\n     * Method returning the abstract rectangle containing the graph according\n     * to the camera's state.\n     *\n     * @return {object} - The view's rectangle.\n     */\n    Sigma.prototype.viewRectangle = function () {\n        // TODO: reduce relative margin?\n        var marginX = (0 * this.width) / 8, marginY = (0 * this.height) / 8;\n        var p1 = this.viewportToFramedGraph({ x: 0 - marginX, y: 0 - marginY }), p2 = this.viewportToFramedGraph({ x: this.width + marginX, y: 0 - marginY }), h = this.viewportToFramedGraph({ x: 0, y: this.height + marginY });\n        return {\n            x1: p1.x,\n            y1: p1.y,\n            x2: p2.x,\n            y2: p2.y,\n            height: p2.y - h.y,\n        };\n    };\n    /**\n     * Method returning the coordinates of a point from the framed graph system to the viewport system. It allows\n     * overriding anything that is used to get the translation matrix, or even the matrix itself.\n     *\n     * Be careful if overriding dimensions, padding or cameraState, as the computation of the matrix is not the lightest\n     * of computations.\n     */\n    Sigma.prototype.framedGraphToViewport = function (coordinates, override) {\n        if (override === void 0) { override = {}; }\n        var recomputeMatrix = !!override.cameraState || !!override.viewportDimensions || !!override.graphDimensions;\n        var matrix = override.matrix\n            ? override.matrix\n            : recomputeMatrix\n                ? (0, utils_1.matrixFromCamera)(override.cameraState || this.camera.getState(), override.viewportDimensions || this.getDimensions(), override.graphDimensions || this.getGraphDimensions(), override.padding || this.getSetting(\"stagePadding\") || 0)\n                : this.matrix;\n        var viewportPos = (0, matrices_1.multiplyVec2)(matrix, coordinates);\n        return {\n            x: ((1 + viewportPos.x) * this.width) / 2,\n            y: ((1 - viewportPos.y) * this.height) / 2,\n        };\n    };\n    /**\n     * Method returning the coordinates of a point from the viewport system to the framed graph system. It allows\n     * overriding anything that is used to get the translation matrix, or even the matrix itself.\n     *\n     * Be careful if overriding dimensions, padding or cameraState, as the computation of the matrix is not the lightest\n     * of computations.\n     */\n    Sigma.prototype.viewportToFramedGraph = function (coordinates, override) {\n        if (override === void 0) { override = {}; }\n        var recomputeMatrix = !!override.cameraState || !!override.viewportDimensions || !override.graphDimensions;\n        var invMatrix = override.matrix\n            ? override.matrix\n            : recomputeMatrix\n                ? (0, utils_1.matrixFromCamera)(override.cameraState || this.camera.getState(), override.viewportDimensions || this.getDimensions(), override.graphDimensions || this.getGraphDimensions(), override.padding || this.getSetting(\"stagePadding\") || 0, true)\n                : this.invMatrix;\n        var res = (0, matrices_1.multiplyVec2)(invMatrix, {\n            x: (coordinates.x / this.width) * 2 - 1,\n            y: 1 - (coordinates.y / this.height) * 2,\n        });\n        if (isNaN(res.x))\n            res.x = 0;\n        if (isNaN(res.y))\n            res.y = 0;\n        return res;\n    };\n    /**\n     * Method used to translate a point's coordinates from the viewport system (pixel distance from the top-left of the\n     * stage) to the graph system (the reference system of data as they are in the given graph instance).\n     *\n     * This method accepts an optional camera which can be useful if you need to translate coordinates\n     * based on a different view than the one being currently being displayed on screen.\n     *\n     * @param {Coordinates}                  viewportPoint\n     * @param {CoordinateConversionOverride} override\n     */\n    Sigma.prototype.viewportToGraph = function (viewportPoint, override) {\n        if (override === void 0) { override = {}; }\n        return this.normalizationFunction.inverse(this.viewportToFramedGraph(viewportPoint, override));\n    };\n    /**\n     * Method used to translate a point's coordinates from the graph system (the reference system of data as they are in\n     * the given graph instance) to the viewport system (pixel distance from the top-left of the stage).\n     *\n     * This method accepts an optional camera which can be useful if you need to translate coordinates\n     * based on a different view than the one being currently being displayed on screen.\n     *\n     * @param {Coordinates}                  graphPoint\n     * @param {CoordinateConversionOverride} override\n     */\n    Sigma.prototype.graphToViewport = function (graphPoint, override) {\n        if (override === void 0) { override = {}; }\n        return this.framedGraphToViewport(this.normalizationFunction(graphPoint), override);\n    };\n    /**\n     * Method returning the graph's bounding box.\n     *\n     * @return {{ x: Extent, y: Extent }}\n     */\n    Sigma.prototype.getBBox = function () {\n        return (0, utils_1.graphExtent)(this.graph);\n    };\n    /**\n     * Method returning the graph's custom bounding box, if any.\n     *\n     * @return {{ x: Extent, y: Extent } | null}\n     */\n    Sigma.prototype.getCustomBBox = function () {\n        return this.customBBox;\n    };\n    /**\n     * Method used to override the graph's bounding box with a custom one. Give `null` as the argument to stop overriding.\n     *\n     * @return {Sigma}\n     */\n    Sigma.prototype.setCustomBBox = function (customBBox) {\n        this.customBBox = customBBox;\n        this._scheduleRefresh();\n        return this;\n    };\n    /**\n     * Method used to shut the container & release event listeners.\n     *\n     * @return {undefined}\n     */\n    Sigma.prototype.kill = function () {\n        var graph = this.graph;\n        // Emitting \"kill\" events so that plugins and such can cleanup\n        this.emit(\"kill\");\n        // Releasing events\n        this.removeAllListeners();\n        // Releasing camera handlers\n        this.camera.removeListener(\"updated\", this.activeListeners.camera);\n        // Releasing DOM events & captors\n        window.removeEventListener(\"resize\", this.activeListeners.handleResize);\n        this.mouseCaptor.kill();\n        this.touchCaptor.kill();\n        // Releasing graph handlers\n        graph.removeListener(\"nodeAdded\", this.activeListeners.dropNodeGraphUpdate);\n        graph.removeListener(\"nodeDropped\", this.activeListeners.graphUpdate);\n        graph.removeListener(\"nodeAttributesUpdated\", this.activeListeners.softGraphUpdate);\n        graph.removeListener(\"eachNodeAttributesUpdated\", this.activeListeners.graphUpdate);\n        graph.removeListener(\"edgeAdded\", this.activeListeners.graphUpdate);\n        graph.removeListener(\"edgeDropped\", this.activeListeners.dropEdgeGraphUpdate);\n        graph.removeListener(\"edgeAttributesUpdated\", this.activeListeners.softGraphUpdate);\n        graph.removeListener(\"eachEdgeAttributesUpdated\", this.activeListeners.graphUpdate);\n        graph.removeListener(\"edgesCleared\", this.activeListeners.clearEdgesGraphUpdate);\n        graph.removeListener(\"cleared\", this.activeListeners.clearGraphUpdate);\n        // Releasing cache & state\n        this.quadtree = new quadtree_1.default();\n        this.nodeDataCache = {};\n        this.edgeDataCache = {};\n        this.nodesWithForcedLabels = [];\n        this.edgesWithForcedLabels = [];\n        this.highlightedNodes.clear();\n        // Clearing frames\n        if (this.renderFrame) {\n            (0, utils_1.cancelFrame)(this.renderFrame);\n            this.renderFrame = null;\n        }\n        if (this.renderHighlightedNodesFrame) {\n            (0, utils_1.cancelFrame)(this.renderHighlightedNodesFrame);\n            this.renderHighlightedNodesFrame = null;\n        }\n        // Destroying canvases\n        var container = this.container;\n        while (container.firstChild)\n            container.removeChild(container.firstChild);\n    };\n    /**\n     * Method used to scale the given size according to the camera's ratio, i.e.\n     * zooming state.\n     *\n     * @param  {number} size - The size to scale (node size, edge thickness etc.).\n     * @return {number}      - The scaled size.\n     */\n    Sigma.prototype.scaleSize = function (size) {\n        return size / this.cameraSizeRatio;\n    };\n    /**\n     * Method that returns the collection of all used canvases.\n     * At the moment, the instantiated canvases are the following, and in the\n     * following order in the DOM:\n     * - `edges`\n     * - `nodes`\n     * - `edgeLabels`\n     * - `labels`\n     * - `hovers`\n     * - `hoverNodes`\n     * - `mouse`\n     *\n     * @return {PlainObject<HTMLCanvasElement>} - The collection of canvases.\n     */\n    Sigma.prototype.getCanvases = function () {\n        return __assign({}, this.elements);\n    };\n    return Sigma;\n}(types_1.TypedEventEmitter));\nexports.default = Sigma;\n"},"lineCount":1427}},"error":null,"hash":"d2f70530f8dd485ee6034570f04e00a6","cacheData":{"env":{}}}