{"id":"node_modules/sigma/core/quadtree.js","dependencies":[{"name":"/home/ven/graphTest/package.json","includedInParent":true,"mtime":1664287371192},{"name":"/home/ven/graphTest/node_modules/sigma/package.json","includedInParent":true,"mtime":1664366520512},{"name":"@yomguithereal/helpers/extend","loc":{"line":43,"column":39,"index":1647},"parent":"/home/ven/graphTest/node_modules/sigma/core/quadtree.js","resolved":"/home/ven/graphTest/node_modules/@yomguithereal/helpers/extend.js"}],"generated":{"js":"\"use strict\";\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.rectangleCollidesWithQuad = exports.squareCollidesWithQuad = exports.getCircumscribedAlignedRectangle = exports.isRectangleAligned = void 0;\n/**\n * Sigma.js Quad Tree Class\n * =========================\n *\n * Class implementing the quad tree data structure used to solve hovers and\n * determine which elements are currently in the scope of the camera so that\n * we don't waste time rendering things the user cannot see anyway.\n * @module\n */\n/* eslint no-nested-ternary: 0 */\n/* eslint no-constant-condition: 0 */\nvar extend_1 = __importDefault(require(\"@yomguithereal/helpers/extend\"));\n// TODO: should not ask the quadtree when the camera has the whole graph in\n// sight.\n// TODO: a square can be represented as topleft + width, saying for the quad blocks (reduce mem)\n// TODO: jsdoc\n// TODO: be sure we can handle cases overcoming boundaries (because of size) or use a maxed size\n// TODO: filtering unwanted labels beforehand through the filter function\n// NOTE: this is basically a MX-CIF Quadtree at this point\n// NOTE: need to explore R-Trees for edges\n// NOTE: need to explore 2d segment tree for edges\n// NOTE: probably can do faster using spatial hashing\n/**\n * Constants.\n *\n * Note that since we are representing a static 4-ary tree, the indices of the\n * quadrants are the following:\n *   - TOP_LEFT:     4i + b\n *   - TOP_RIGHT:    4i + 2b\n *   - BOTTOM_LEFT:  4i + 3b\n *   - BOTTOM_RIGHT: 4i + 4b\n */\nvar BLOCKS = 4, MAX_LEVEL = 5;\nvar OUTSIDE_BLOCK = \"outside\";\nvar X_OFFSET = 0, Y_OFFSET = 1, WIDTH_OFFSET = 2, HEIGHT_OFFSET = 3;\nvar TOP_LEFT = 1, TOP_RIGHT = 2, BOTTOM_LEFT = 3, BOTTOM_RIGHT = 4;\nvar hasWarnedTooMuchOutside = false;\n/**\n * Geometry helpers.\n */\n/**\n * Function returning whether the given rectangle is axis-aligned.\n *\n * @param  {Rectangle} rect\n * @return {boolean}\n */\nfunction isRectangleAligned(rect) {\n    return rect.x1 === rect.x2 || rect.y1 === rect.y2;\n}\nexports.isRectangleAligned = isRectangleAligned;\n/**\n * Function returning the smallest rectangle that contains the given rectangle, and that is aligned with the axis.\n *\n * @param {Rectangle} rect\n * @return {Rectangle}\n */\nfunction getCircumscribedAlignedRectangle(rect) {\n    var width = Math.sqrt(Math.pow(rect.x2 - rect.x1, 2) + Math.pow(rect.y2 - rect.y1, 2));\n    var heightVector = {\n        x: ((rect.y1 - rect.y2) * rect.height) / width,\n        y: ((rect.x2 - rect.x1) * rect.height) / width,\n    };\n    // Compute all corners:\n    var tl = { x: rect.x1, y: rect.y1 };\n    var tr = { x: rect.x2, y: rect.y2 };\n    var bl = {\n        x: rect.x1 + heightVector.x,\n        y: rect.y1 + heightVector.y,\n    };\n    var br = {\n        x: rect.x2 + heightVector.x,\n        y: rect.y2 + heightVector.y,\n    };\n    var xL = Math.min(tl.x, tr.x, bl.x, br.x);\n    var xR = Math.max(tl.x, tr.x, bl.x, br.x);\n    var yT = Math.min(tl.y, tr.y, bl.y, br.y);\n    var yB = Math.max(tl.y, tr.y, bl.y, br.y);\n    return {\n        x1: xL,\n        y1: yT,\n        x2: xR,\n        y2: yT,\n        height: yB - yT,\n    };\n}\nexports.getCircumscribedAlignedRectangle = getCircumscribedAlignedRectangle;\n/**\n *\n * @param x1\n * @param y1\n * @param w\n * @param qx\n * @param qy\n * @param qw\n * @param qh\n */\nfunction squareCollidesWithQuad(x1, y1, w, qx, qy, qw, qh) {\n    return x1 < qx + qw && x1 + w > qx && y1 < qy + qh && y1 + w > qy;\n}\nexports.squareCollidesWithQuad = squareCollidesWithQuad;\nfunction rectangleCollidesWithQuad(x1, y1, w, h, qx, qy, qw, qh) {\n    return x1 < qx + qw && x1 + w > qx && y1 < qy + qh && y1 + h > qy;\n}\nexports.rectangleCollidesWithQuad = rectangleCollidesWithQuad;\nfunction pointIsInQuad(x, y, qx, qy, qw, qh) {\n    var xmp = qx + qw / 2, ymp = qy + qh / 2, top = y < ymp, left = x < xmp;\n    return top ? (left ? TOP_LEFT : TOP_RIGHT) : left ? BOTTOM_LEFT : BOTTOM_RIGHT;\n}\n/**\n * Helper functions that are not bound to the class so an external user\n * cannot mess with them.\n */\nfunction buildQuadrants(maxLevel, data) {\n    // [block, level]\n    var stack = [0, 0];\n    while (stack.length) {\n        var level = stack.pop(), block = stack.pop();\n        var topLeftBlock = 4 * block + BLOCKS, topRightBlock = 4 * block + 2 * BLOCKS, bottomLeftBlock = 4 * block + 3 * BLOCKS, bottomRightBlock = 4 * block + 4 * BLOCKS;\n        var x = data[block + X_OFFSET], y = data[block + Y_OFFSET], width = data[block + WIDTH_OFFSET], height = data[block + HEIGHT_OFFSET], hw = width / 2, hh = height / 2;\n        data[topLeftBlock + X_OFFSET] = x;\n        data[topLeftBlock + Y_OFFSET] = y;\n        data[topLeftBlock + WIDTH_OFFSET] = hw;\n        data[topLeftBlock + HEIGHT_OFFSET] = hh;\n        data[topRightBlock + X_OFFSET] = x + hw;\n        data[topRightBlock + Y_OFFSET] = y;\n        data[topRightBlock + WIDTH_OFFSET] = hw;\n        data[topRightBlock + HEIGHT_OFFSET] = hh;\n        data[bottomLeftBlock + X_OFFSET] = x;\n        data[bottomLeftBlock + Y_OFFSET] = y + hh;\n        data[bottomLeftBlock + WIDTH_OFFSET] = hw;\n        data[bottomLeftBlock + HEIGHT_OFFSET] = hh;\n        data[bottomRightBlock + X_OFFSET] = x + hw;\n        data[bottomRightBlock + Y_OFFSET] = y + hh;\n        data[bottomRightBlock + WIDTH_OFFSET] = hw;\n        data[bottomRightBlock + HEIGHT_OFFSET] = hh;\n        if (level < maxLevel - 1) {\n            stack.push(bottomRightBlock, level + 1);\n            stack.push(bottomLeftBlock, level + 1);\n            stack.push(topRightBlock, level + 1);\n            stack.push(topLeftBlock, level + 1);\n        }\n    }\n}\nfunction insertNode(maxLevel, data, containers, key, x, y, size) {\n    var x1 = x - size, y1 = y - size, w = size * 2;\n    var level = 0, block = 0;\n    while (true) {\n        // If we reached max level\n        if (level >= maxLevel) {\n            containers[block] = containers[block] || [];\n            containers[block].push(key);\n            return;\n        }\n        var topLeftBlock = 4 * block + BLOCKS, topRightBlock = 4 * block + 2 * BLOCKS, bottomLeftBlock = 4 * block + 3 * BLOCKS, bottomRightBlock = 4 * block + 4 * BLOCKS;\n        var collidingWithTopLeft = squareCollidesWithQuad(x1, y1, w, data[topLeftBlock + X_OFFSET], data[topLeftBlock + Y_OFFSET], data[topLeftBlock + WIDTH_OFFSET], data[topLeftBlock + HEIGHT_OFFSET]);\n        var collidingWithTopRight = squareCollidesWithQuad(x1, y1, w, data[topRightBlock + X_OFFSET], data[topRightBlock + Y_OFFSET], data[topRightBlock + WIDTH_OFFSET], data[topRightBlock + HEIGHT_OFFSET]);\n        var collidingWithBottomLeft = squareCollidesWithQuad(x1, y1, w, data[bottomLeftBlock + X_OFFSET], data[bottomLeftBlock + Y_OFFSET], data[bottomLeftBlock + WIDTH_OFFSET], data[bottomLeftBlock + HEIGHT_OFFSET]);\n        var collidingWithBottomRight = squareCollidesWithQuad(x1, y1, w, data[bottomRightBlock + X_OFFSET], data[bottomRightBlock + Y_OFFSET], data[bottomRightBlock + WIDTH_OFFSET], data[bottomRightBlock + HEIGHT_OFFSET]);\n        var collisions = [\n            collidingWithTopLeft,\n            collidingWithTopRight,\n            collidingWithBottomLeft,\n            collidingWithBottomRight,\n        ].reduce(function (acc, current) {\n            if (current)\n                return acc + 1;\n            else\n                return acc;\n        }, 0);\n        // If we have no collision at root level, inject node in the outside block\n        if (collisions === 0 && level === 0) {\n            containers[OUTSIDE_BLOCK].push(key);\n            if (!hasWarnedTooMuchOutside && containers[OUTSIDE_BLOCK].length >= 5) {\n                hasWarnedTooMuchOutside = true;\n                console.warn(\"sigma/quadtree.insertNode: At least 5 nodes are outside the global quadtree zone. \" +\n                    \"You might have a problem with the normalization function or the custom bounding box.\");\n            }\n            return;\n        }\n        // If we don't have at least a collision but deeper, there is an issue\n        if (collisions === 0)\n            throw new Error(\"sigma/quadtree.insertNode: no collision (level: \".concat(level, \", key: \").concat(key, \", x: \").concat(x, \", y: \").concat(y, \", size: \").concat(size, \").\"));\n        // If we have 3 collisions, we have a geometry problem obviously\n        if (collisions === 3)\n            throw new Error(\"sigma/quadtree.insertNode: 3 impossible collisions (level: \".concat(level, \", key: \").concat(key, \", x: \").concat(x, \", y: \").concat(y, \", size: \").concat(size, \").\"));\n        // If we have more that one collision, we stop here and store the node\n        // in the relevant containers\n        if (collisions > 1) {\n            containers[block] = containers[block] || [];\n            containers[block].push(key);\n            return;\n        }\n        else {\n            level++;\n        }\n        // Else we recurse into the correct quads\n        if (collidingWithTopLeft)\n            block = topLeftBlock;\n        if (collidingWithTopRight)\n            block = topRightBlock;\n        if (collidingWithBottomLeft)\n            block = bottomLeftBlock;\n        if (collidingWithBottomRight)\n            block = bottomRightBlock;\n    }\n}\nfunction getNodesInAxisAlignedRectangleArea(maxLevel, data, containers, x1, y1, w, h) {\n    // [block, level]\n    var stack = [0, 0];\n    var collectedNodes = [];\n    var container;\n    while (stack.length) {\n        var level = stack.pop(), block = stack.pop();\n        // Collecting nodes\n        container = containers[block];\n        if (container)\n            (0, extend_1.default)(collectedNodes, container);\n        // If we reached max level\n        if (level >= maxLevel)\n            continue;\n        var topLeftBlock = 4 * block + BLOCKS, topRightBlock = 4 * block + 2 * BLOCKS, bottomLeftBlock = 4 * block + 3 * BLOCKS, bottomRightBlock = 4 * block + 4 * BLOCKS;\n        var collidingWithTopLeft = rectangleCollidesWithQuad(x1, y1, w, h, data[topLeftBlock + X_OFFSET], data[topLeftBlock + Y_OFFSET], data[topLeftBlock + WIDTH_OFFSET], data[topLeftBlock + HEIGHT_OFFSET]);\n        var collidingWithTopRight = rectangleCollidesWithQuad(x1, y1, w, h, data[topRightBlock + X_OFFSET], data[topRightBlock + Y_OFFSET], data[topRightBlock + WIDTH_OFFSET], data[topRightBlock + HEIGHT_OFFSET]);\n        var collidingWithBottomLeft = rectangleCollidesWithQuad(x1, y1, w, h, data[bottomLeftBlock + X_OFFSET], data[bottomLeftBlock + Y_OFFSET], data[bottomLeftBlock + WIDTH_OFFSET], data[bottomLeftBlock + HEIGHT_OFFSET]);\n        var collidingWithBottomRight = rectangleCollidesWithQuad(x1, y1, w, h, data[bottomRightBlock + X_OFFSET], data[bottomRightBlock + Y_OFFSET], data[bottomRightBlock + WIDTH_OFFSET], data[bottomRightBlock + HEIGHT_OFFSET]);\n        if (collidingWithTopLeft)\n            stack.push(topLeftBlock, level + 1);\n        if (collidingWithTopRight)\n            stack.push(topRightBlock, level + 1);\n        if (collidingWithBottomLeft)\n            stack.push(bottomLeftBlock, level + 1);\n        if (collidingWithBottomRight)\n            stack.push(bottomRightBlock, level + 1);\n    }\n    return collectedNodes;\n}\n/**\n * QuadTree class.\n *\n * @constructor\n * @param {object} boundaries - The graph boundaries.\n */\nvar QuadTree = /** @class */ (function () {\n    function QuadTree(params) {\n        var _a;\n        if (params === void 0) { params = {}; }\n        this.containers = (_a = {}, _a[OUTSIDE_BLOCK] = [], _a);\n        this.cache = null;\n        this.lastRectangle = null;\n        // Allocating the underlying byte array\n        var L = Math.pow(4, MAX_LEVEL);\n        this.data = new Float32Array(BLOCKS * ((4 * L - 1) / 3));\n        if (params.boundaries)\n            this.resize(params.boundaries);\n        else\n            this.resize({\n                x: 0,\n                y: 0,\n                width: 1,\n                height: 1,\n            });\n    }\n    QuadTree.prototype.add = function (key, x, y, size) {\n        insertNode(MAX_LEVEL, this.data, this.containers, key, x, y, size);\n        return this;\n    };\n    QuadTree.prototype.resize = function (boundaries) {\n        this.clear();\n        // Building the quadrants\n        this.data[X_OFFSET] = boundaries.x;\n        this.data[Y_OFFSET] = boundaries.y;\n        this.data[WIDTH_OFFSET] = boundaries.width;\n        this.data[HEIGHT_OFFSET] = boundaries.height;\n        buildQuadrants(MAX_LEVEL, this.data);\n    };\n    QuadTree.prototype.clear = function () {\n        var _a;\n        this.containers = (_a = {}, _a[OUTSIDE_BLOCK] = [], _a);\n        return this;\n    };\n    QuadTree.prototype.point = function (x, y) {\n        var nodes = this.containers[OUTSIDE_BLOCK];\n        var block = 0, level = 0;\n        do {\n            if (this.containers[block])\n                nodes.push.apply(nodes, __spreadArray([], __read(this.containers[block]), false));\n            var quad = pointIsInQuad(x, y, this.data[block + X_OFFSET], this.data[block + Y_OFFSET], this.data[block + WIDTH_OFFSET], this.data[block + HEIGHT_OFFSET]);\n            block = 4 * block + quad * BLOCKS;\n            level++;\n        } while (level <= MAX_LEVEL);\n        return nodes;\n    };\n    QuadTree.prototype.rectangle = function (x1, y1, x2, y2, height) {\n        var _a;\n        var lr = this.lastRectangle;\n        if (lr && x1 === lr.x1 && x2 === lr.x2 && y1 === lr.y1 && y2 === lr.y2 && height === lr.height) {\n            return this.cache;\n        }\n        this.lastRectangle = {\n            x1: x1,\n            y1: y1,\n            x2: x2,\n            y2: y2,\n            height: height,\n        };\n        // If the rectangle is shifted, we use the smallest aligned rectangle that contains the shifted one:\n        if (!isRectangleAligned(this.lastRectangle))\n            this.lastRectangle = getCircumscribedAlignedRectangle(this.lastRectangle);\n        this.cache = getNodesInAxisAlignedRectangleArea(MAX_LEVEL, this.data, this.containers, x1, y1, Math.abs(x1 - x2) || Math.abs(y1 - y2), height);\n        // Add all the nodes in the outside block, since they might be relevant, and since they should be very few:\n        (_a = this.cache).push.apply(_a, __spreadArray([], __read(this.containers[OUTSIDE_BLOCK]), false));\n        return this.cache;\n    };\n    return QuadTree;\n}());\nexports.default = QuadTree;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/sigma/core/quadtree.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"node_modules/sigma/core/quadtree.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}}],"sources":{"node_modules/sigma/core/quadtree.js":"\"use strict\";\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.rectangleCollidesWithQuad = exports.squareCollidesWithQuad = exports.getCircumscribedAlignedRectangle = exports.isRectangleAligned = void 0;\n/**\n * Sigma.js Quad Tree Class\n * =========================\n *\n * Class implementing the quad tree data structure used to solve hovers and\n * determine which elements are currently in the scope of the camera so that\n * we don't waste time rendering things the user cannot see anyway.\n * @module\n */\n/* eslint no-nested-ternary: 0 */\n/* eslint no-constant-condition: 0 */\nvar extend_1 = __importDefault(require(\"@yomguithereal/helpers/extend\"));\n// TODO: should not ask the quadtree when the camera has the whole graph in\n// sight.\n// TODO: a square can be represented as topleft + width, saying for the quad blocks (reduce mem)\n// TODO: jsdoc\n// TODO: be sure we can handle cases overcoming boundaries (because of size) or use a maxed size\n// TODO: filtering unwanted labels beforehand through the filter function\n// NOTE: this is basically a MX-CIF Quadtree at this point\n// NOTE: need to explore R-Trees for edges\n// NOTE: need to explore 2d segment tree for edges\n// NOTE: probably can do faster using spatial hashing\n/**\n * Constants.\n *\n * Note that since we are representing a static 4-ary tree, the indices of the\n * quadrants are the following:\n *   - TOP_LEFT:     4i + b\n *   - TOP_RIGHT:    4i + 2b\n *   - BOTTOM_LEFT:  4i + 3b\n *   - BOTTOM_RIGHT: 4i + 4b\n */\nvar BLOCKS = 4, MAX_LEVEL = 5;\nvar OUTSIDE_BLOCK = \"outside\";\nvar X_OFFSET = 0, Y_OFFSET = 1, WIDTH_OFFSET = 2, HEIGHT_OFFSET = 3;\nvar TOP_LEFT = 1, TOP_RIGHT = 2, BOTTOM_LEFT = 3, BOTTOM_RIGHT = 4;\nvar hasWarnedTooMuchOutside = false;\n/**\n * Geometry helpers.\n */\n/**\n * Function returning whether the given rectangle is axis-aligned.\n *\n * @param  {Rectangle} rect\n * @return {boolean}\n */\nfunction isRectangleAligned(rect) {\n    return rect.x1 === rect.x2 || rect.y1 === rect.y2;\n}\nexports.isRectangleAligned = isRectangleAligned;\n/**\n * Function returning the smallest rectangle that contains the given rectangle, and that is aligned with the axis.\n *\n * @param {Rectangle} rect\n * @return {Rectangle}\n */\nfunction getCircumscribedAlignedRectangle(rect) {\n    var width = Math.sqrt(Math.pow(rect.x2 - rect.x1, 2) + Math.pow(rect.y2 - rect.y1, 2));\n    var heightVector = {\n        x: ((rect.y1 - rect.y2) * rect.height) / width,\n        y: ((rect.x2 - rect.x1) * rect.height) / width,\n    };\n    // Compute all corners:\n    var tl = { x: rect.x1, y: rect.y1 };\n    var tr = { x: rect.x2, y: rect.y2 };\n    var bl = {\n        x: rect.x1 + heightVector.x,\n        y: rect.y1 + heightVector.y,\n    };\n    var br = {\n        x: rect.x2 + heightVector.x,\n        y: rect.y2 + heightVector.y,\n    };\n    var xL = Math.min(tl.x, tr.x, bl.x, br.x);\n    var xR = Math.max(tl.x, tr.x, bl.x, br.x);\n    var yT = Math.min(tl.y, tr.y, bl.y, br.y);\n    var yB = Math.max(tl.y, tr.y, bl.y, br.y);\n    return {\n        x1: xL,\n        y1: yT,\n        x2: xR,\n        y2: yT,\n        height: yB - yT,\n    };\n}\nexports.getCircumscribedAlignedRectangle = getCircumscribedAlignedRectangle;\n/**\n *\n * @param x1\n * @param y1\n * @param w\n * @param qx\n * @param qy\n * @param qw\n * @param qh\n */\nfunction squareCollidesWithQuad(x1, y1, w, qx, qy, qw, qh) {\n    return x1 < qx + qw && x1 + w > qx && y1 < qy + qh && y1 + w > qy;\n}\nexports.squareCollidesWithQuad = squareCollidesWithQuad;\nfunction rectangleCollidesWithQuad(x1, y1, w, h, qx, qy, qw, qh) {\n    return x1 < qx + qw && x1 + w > qx && y1 < qy + qh && y1 + h > qy;\n}\nexports.rectangleCollidesWithQuad = rectangleCollidesWithQuad;\nfunction pointIsInQuad(x, y, qx, qy, qw, qh) {\n    var xmp = qx + qw / 2, ymp = qy + qh / 2, top = y < ymp, left = x < xmp;\n    return top ? (left ? TOP_LEFT : TOP_RIGHT) : left ? BOTTOM_LEFT : BOTTOM_RIGHT;\n}\n/**\n * Helper functions that are not bound to the class so an external user\n * cannot mess with them.\n */\nfunction buildQuadrants(maxLevel, data) {\n    // [block, level]\n    var stack = [0, 0];\n    while (stack.length) {\n        var level = stack.pop(), block = stack.pop();\n        var topLeftBlock = 4 * block + BLOCKS, topRightBlock = 4 * block + 2 * BLOCKS, bottomLeftBlock = 4 * block + 3 * BLOCKS, bottomRightBlock = 4 * block + 4 * BLOCKS;\n        var x = data[block + X_OFFSET], y = data[block + Y_OFFSET], width = data[block + WIDTH_OFFSET], height = data[block + HEIGHT_OFFSET], hw = width / 2, hh = height / 2;\n        data[topLeftBlock + X_OFFSET] = x;\n        data[topLeftBlock + Y_OFFSET] = y;\n        data[topLeftBlock + WIDTH_OFFSET] = hw;\n        data[topLeftBlock + HEIGHT_OFFSET] = hh;\n        data[topRightBlock + X_OFFSET] = x + hw;\n        data[topRightBlock + Y_OFFSET] = y;\n        data[topRightBlock + WIDTH_OFFSET] = hw;\n        data[topRightBlock + HEIGHT_OFFSET] = hh;\n        data[bottomLeftBlock + X_OFFSET] = x;\n        data[bottomLeftBlock + Y_OFFSET] = y + hh;\n        data[bottomLeftBlock + WIDTH_OFFSET] = hw;\n        data[bottomLeftBlock + HEIGHT_OFFSET] = hh;\n        data[bottomRightBlock + X_OFFSET] = x + hw;\n        data[bottomRightBlock + Y_OFFSET] = y + hh;\n        data[bottomRightBlock + WIDTH_OFFSET] = hw;\n        data[bottomRightBlock + HEIGHT_OFFSET] = hh;\n        if (level < maxLevel - 1) {\n            stack.push(bottomRightBlock, level + 1);\n            stack.push(bottomLeftBlock, level + 1);\n            stack.push(topRightBlock, level + 1);\n            stack.push(topLeftBlock, level + 1);\n        }\n    }\n}\nfunction insertNode(maxLevel, data, containers, key, x, y, size) {\n    var x1 = x - size, y1 = y - size, w = size * 2;\n    var level = 0, block = 0;\n    while (true) {\n        // If we reached max level\n        if (level >= maxLevel) {\n            containers[block] = containers[block] || [];\n            containers[block].push(key);\n            return;\n        }\n        var topLeftBlock = 4 * block + BLOCKS, topRightBlock = 4 * block + 2 * BLOCKS, bottomLeftBlock = 4 * block + 3 * BLOCKS, bottomRightBlock = 4 * block + 4 * BLOCKS;\n        var collidingWithTopLeft = squareCollidesWithQuad(x1, y1, w, data[topLeftBlock + X_OFFSET], data[topLeftBlock + Y_OFFSET], data[topLeftBlock + WIDTH_OFFSET], data[topLeftBlock + HEIGHT_OFFSET]);\n        var collidingWithTopRight = squareCollidesWithQuad(x1, y1, w, data[topRightBlock + X_OFFSET], data[topRightBlock + Y_OFFSET], data[topRightBlock + WIDTH_OFFSET], data[topRightBlock + HEIGHT_OFFSET]);\n        var collidingWithBottomLeft = squareCollidesWithQuad(x1, y1, w, data[bottomLeftBlock + X_OFFSET], data[bottomLeftBlock + Y_OFFSET], data[bottomLeftBlock + WIDTH_OFFSET], data[bottomLeftBlock + HEIGHT_OFFSET]);\n        var collidingWithBottomRight = squareCollidesWithQuad(x1, y1, w, data[bottomRightBlock + X_OFFSET], data[bottomRightBlock + Y_OFFSET], data[bottomRightBlock + WIDTH_OFFSET], data[bottomRightBlock + HEIGHT_OFFSET]);\n        var collisions = [\n            collidingWithTopLeft,\n            collidingWithTopRight,\n            collidingWithBottomLeft,\n            collidingWithBottomRight,\n        ].reduce(function (acc, current) {\n            if (current)\n                return acc + 1;\n            else\n                return acc;\n        }, 0);\n        // If we have no collision at root level, inject node in the outside block\n        if (collisions === 0 && level === 0) {\n            containers[OUTSIDE_BLOCK].push(key);\n            if (!hasWarnedTooMuchOutside && containers[OUTSIDE_BLOCK].length >= 5) {\n                hasWarnedTooMuchOutside = true;\n                console.warn(\"sigma/quadtree.insertNode: At least 5 nodes are outside the global quadtree zone. \" +\n                    \"You might have a problem with the normalization function or the custom bounding box.\");\n            }\n            return;\n        }\n        // If we don't have at least a collision but deeper, there is an issue\n        if (collisions === 0)\n            throw new Error(\"sigma/quadtree.insertNode: no collision (level: \".concat(level, \", key: \").concat(key, \", x: \").concat(x, \", y: \").concat(y, \", size: \").concat(size, \").\"));\n        // If we have 3 collisions, we have a geometry problem obviously\n        if (collisions === 3)\n            throw new Error(\"sigma/quadtree.insertNode: 3 impossible collisions (level: \".concat(level, \", key: \").concat(key, \", x: \").concat(x, \", y: \").concat(y, \", size: \").concat(size, \").\"));\n        // If we have more that one collision, we stop here and store the node\n        // in the relevant containers\n        if (collisions > 1) {\n            containers[block] = containers[block] || [];\n            containers[block].push(key);\n            return;\n        }\n        else {\n            level++;\n        }\n        // Else we recurse into the correct quads\n        if (collidingWithTopLeft)\n            block = topLeftBlock;\n        if (collidingWithTopRight)\n            block = topRightBlock;\n        if (collidingWithBottomLeft)\n            block = bottomLeftBlock;\n        if (collidingWithBottomRight)\n            block = bottomRightBlock;\n    }\n}\nfunction getNodesInAxisAlignedRectangleArea(maxLevel, data, containers, x1, y1, w, h) {\n    // [block, level]\n    var stack = [0, 0];\n    var collectedNodes = [];\n    var container;\n    while (stack.length) {\n        var level = stack.pop(), block = stack.pop();\n        // Collecting nodes\n        container = containers[block];\n        if (container)\n            (0, extend_1.default)(collectedNodes, container);\n        // If we reached max level\n        if (level >= maxLevel)\n            continue;\n        var topLeftBlock = 4 * block + BLOCKS, topRightBlock = 4 * block + 2 * BLOCKS, bottomLeftBlock = 4 * block + 3 * BLOCKS, bottomRightBlock = 4 * block + 4 * BLOCKS;\n        var collidingWithTopLeft = rectangleCollidesWithQuad(x1, y1, w, h, data[topLeftBlock + X_OFFSET], data[topLeftBlock + Y_OFFSET], data[topLeftBlock + WIDTH_OFFSET], data[topLeftBlock + HEIGHT_OFFSET]);\n        var collidingWithTopRight = rectangleCollidesWithQuad(x1, y1, w, h, data[topRightBlock + X_OFFSET], data[topRightBlock + Y_OFFSET], data[topRightBlock + WIDTH_OFFSET], data[topRightBlock + HEIGHT_OFFSET]);\n        var collidingWithBottomLeft = rectangleCollidesWithQuad(x1, y1, w, h, data[bottomLeftBlock + X_OFFSET], data[bottomLeftBlock + Y_OFFSET], data[bottomLeftBlock + WIDTH_OFFSET], data[bottomLeftBlock + HEIGHT_OFFSET]);\n        var collidingWithBottomRight = rectangleCollidesWithQuad(x1, y1, w, h, data[bottomRightBlock + X_OFFSET], data[bottomRightBlock + Y_OFFSET], data[bottomRightBlock + WIDTH_OFFSET], data[bottomRightBlock + HEIGHT_OFFSET]);\n        if (collidingWithTopLeft)\n            stack.push(topLeftBlock, level + 1);\n        if (collidingWithTopRight)\n            stack.push(topRightBlock, level + 1);\n        if (collidingWithBottomLeft)\n            stack.push(bottomLeftBlock, level + 1);\n        if (collidingWithBottomRight)\n            stack.push(bottomRightBlock, level + 1);\n    }\n    return collectedNodes;\n}\n/**\n * QuadTree class.\n *\n * @constructor\n * @param {object} boundaries - The graph boundaries.\n */\nvar QuadTree = /** @class */ (function () {\n    function QuadTree(params) {\n        var _a;\n        if (params === void 0) { params = {}; }\n        this.containers = (_a = {}, _a[OUTSIDE_BLOCK] = [], _a);\n        this.cache = null;\n        this.lastRectangle = null;\n        // Allocating the underlying byte array\n        var L = Math.pow(4, MAX_LEVEL);\n        this.data = new Float32Array(BLOCKS * ((4 * L - 1) / 3));\n        if (params.boundaries)\n            this.resize(params.boundaries);\n        else\n            this.resize({\n                x: 0,\n                y: 0,\n                width: 1,\n                height: 1,\n            });\n    }\n    QuadTree.prototype.add = function (key, x, y, size) {\n        insertNode(MAX_LEVEL, this.data, this.containers, key, x, y, size);\n        return this;\n    };\n    QuadTree.prototype.resize = function (boundaries) {\n        this.clear();\n        // Building the quadrants\n        this.data[X_OFFSET] = boundaries.x;\n        this.data[Y_OFFSET] = boundaries.y;\n        this.data[WIDTH_OFFSET] = boundaries.width;\n        this.data[HEIGHT_OFFSET] = boundaries.height;\n        buildQuadrants(MAX_LEVEL, this.data);\n    };\n    QuadTree.prototype.clear = function () {\n        var _a;\n        this.containers = (_a = {}, _a[OUTSIDE_BLOCK] = [], _a);\n        return this;\n    };\n    QuadTree.prototype.point = function (x, y) {\n        var nodes = this.containers[OUTSIDE_BLOCK];\n        var block = 0, level = 0;\n        do {\n            if (this.containers[block])\n                nodes.push.apply(nodes, __spreadArray([], __read(this.containers[block]), false));\n            var quad = pointIsInQuad(x, y, this.data[block + X_OFFSET], this.data[block + Y_OFFSET], this.data[block + WIDTH_OFFSET], this.data[block + HEIGHT_OFFSET]);\n            block = 4 * block + quad * BLOCKS;\n            level++;\n        } while (level <= MAX_LEVEL);\n        return nodes;\n    };\n    QuadTree.prototype.rectangle = function (x1, y1, x2, y2, height) {\n        var _a;\n        var lr = this.lastRectangle;\n        if (lr && x1 === lr.x1 && x2 === lr.x2 && y1 === lr.y1 && y2 === lr.y2 && height === lr.height) {\n            return this.cache;\n        }\n        this.lastRectangle = {\n            x1: x1,\n            y1: y1,\n            x2: x2,\n            y2: y2,\n            height: height,\n        };\n        // If the rectangle is shifted, we use the smallest aligned rectangle that contains the shifted one:\n        if (!isRectangleAligned(this.lastRectangle))\n            this.lastRectangle = getCircumscribedAlignedRectangle(this.lastRectangle);\n        this.cache = getNodesInAxisAlignedRectangleArea(MAX_LEVEL, this.data, this.containers, x1, y1, Math.abs(x1 - x2) || Math.abs(y1 - y2), height);\n        // Add all the nodes in the outside block, since they might be relevant, and since they should be very few:\n        (_a = this.cache).push.apply(_a, __spreadArray([], __read(this.containers[OUTSIDE_BLOCK]), false));\n        return this.cache;\n    };\n    return QuadTree;\n}());\nexports.default = QuadTree;\n"},"lineCount":348}},"error":null,"hash":"8c46f927f26f4d280cf80d8d7ffea369","cacheData":{"env":{}}}